arm9:
  versions:
    - NA
    - EU
    - JP
  address:
    NA: 0x2000000
    EU: 0x2000000
    JP: 0x2000000
  length:
    NA: 0xB73F8
    EU: 0xB7D38
  description: |-
    The main ARM9 binary.
    
    This is the binary that gets loaded when the game is launched, and contains the core code that runs the game, low level facilities such as memory allocation, compression, other external dependencies (such as linked functions from libc and libgcc), and the functions and tables necessary to load overlays and dispatch execution to them.
  functions:
    - name: InitMemAllocTable
      address:
        NA: 0x2000DE0
      description: |-
        Initializes MEMORY_ALLOCATION_TABLE.
        
        Sets up the default memory arena, sets the default memory allocator parameters (calls SetMemAllocatorParams(0, 0)), and does some other stuff.
        
        No params.
    - name: SetMemAllocatorParams
      address:
        NA: 0x2000E70
      description: |-
        Sets global parameters for the memory allocator.
        
        This includes MEMORY_ALLOCATION_ARENA_GETTERS and some other stuff.
        
        Dungeon mode uses the default arena getters. Ground mode uses its own arena getters, which are defined in overlay 11 and set (by calling this function) at the start of GroundMainLoop.
        
        r0: GetAllocArena function pointer (GetAllocArenaDefault is used if null)
        r1: GetFreeArena function pointer (GetFreeArenaDefault is used if null)
    - name: GetAllocArenaDefault
      address:
        NA: 0x2000EC0
      description: |-
        The default function for retrieving the arena for memory allocations. This function always just returns the initial arena pointer.
        
        r0: initial memory arena pointer, or null
        r1: flags (see MemAlloc)
        return: memory arena pointer, or null
    - name: GetFreeArenaDefault
      address:
        NA: 0x2000EC4
      description: |-
        The default function for retrieving the arena for memory freeing. This function always just returns the initial arena pointer.
        
        r0: initial memory arena pointer, or null
        r1: pointer to free
        return: memory arena pointer, or null
    - name: InitMemArena
      address:
        NA: 0x2000EC8
      description: |-
        Initializes a new memory arena with the given specifications, and records it in the global MEMORY_ALLOCATION_TABLE.
        
        r0: arena struct to be initialized
        r1: memory region to be owned by the arena, as {pointer, length}
        r2: pointer to block metadata array for the arena to use
        r3: maximum number of blocks that the arena can hold
    - name: MemAllocFlagsToBlockType
      address:
        NA: 0x2000F44
      description: |-
        Converts the internal alloc flags bitfield (struct mem_block field 0x4) to the block type bitfield (struct mem_block field 0x0).
        
        r0: internal alloc flags
        return: block type flags
    - name: FindAvailableMemBlock
      address:
        NA: 0x2000F88
      description: |-
        Searches through the given memory arena for a block with enough free space.
        
        Blocks are searched in reverse order. For object allocations (i.e., not arenas), the block with the smallest amount of free space that still suffices is returned. For arena allocations, the first satisfactory block found is returned.
        
        r0: memory arena to search
        r1: internal alloc flags
        r2: amount of space needed, in bytes
        return: index of the located block in the arena's block array, or -1 if nothing is available
    - name: SplitMemBlock
      address:
        NA: 0x2001070
      description: |-
        Given a memory block at a given index, splits off another memory block of the specified size from the end.
        
        Since blocks are stored in an array on the memory arena struct, this is essentially an insertion operation, plus some processing on the block being split and its child.
        
        r0: memory arena
        r1: block index
        r2: internal alloc flags
        r3: number of bytes to split off
        stack[0]: user alloc flags (to assign to the new block)
        return: the newly split-off memory block
    - name: MemAlloc
      address:
        NA: 0x2001170
      description: |-
        Allocates some memory on the heap, returning a pointer to the starting address.
        
        Memory allocation is done with region-based memory management. See MEMORY_ALLOCATION_TABLE for more information.
        
        This function is just a wrapper around MemLocateSet.
        
        r0: length in bytes
        r1: flags (see the comment on struct mem_block::user_flags)
        return: pointer
    - name: MemFree
      address:
        NA: 0x2001188
      description: |-
        Frees heap-allocated memory.
        
        This function is just a wrapper around MemLocateUnset.
        
        r0: pointer
    - name: MemArenaAlloc
      address:
        NA: 0x200119C
      description: |-
        Allocates some memory on the heap and creates a new global memory arena with it.
        
        The actual allocation part works similarly to the normal MemAlloc.
        
        r0: desired parent memory arena, or null
        r1: length of the arena in bytes
        r2: maximum number of blocks that the arena can hold
        r3: flags (see MemAlloc)
        return: memory arena pointer
    - name: CreateMemArena
      address:
        NA: 0x2001280
      description: |-
        Creates a new memory arena within a given block of memory.
        
        This is essentially a wrapper around InitMemArena, accounting for the space needed by the arena metadata.
        
        r0: memory region in which to create the arena, as {pointer, length}
        r1: maximum number of blocks that the arena can hold
        return: memory arena pointer
    - name: MemLocateSet
      address:
        NA: 0x2001390
      description: |-
        The implementation for MemAlloc.
        
        At a high level, memory is allocated by choosing a memory arena, looking through blocks in the memory arena until a free one that's large enough is found, then splitting off a new memory block of the needed size.
        
        This function is not fallible, i.e., it hangs the whole program on failure, so callers can assume it never fails.
        
        The name for this function comes from the error message logged on failure, and it reflects what the function does: locate an available block of memory and set it up for the caller.
        
        r0: desired memory arena for allocation, or null (MemAlloc passes null)
        r1: length in bytes
        r2: flags (see MemAlloc)
        return: pointer to allocated memory
    - name: MemLocateUnset
      address:
        NA: 0x2001638
      description: |-
        The implementation for MemFree.
        
        At a high level, memory is freed by locating the pointer in its memory arena (searching block-by-block) and emptying the block so it's available for future allocations, and merging it with neighboring blocks if they're available.
        
        r0: desired memory arena for freeing, or null (MemFree passes null)
        r1: pointer to free
    - name: RoundUpDiv256
      address:
        NA: 0x2001894
      description: |-
        Divide a number by 256 and round up to the nearest integer.
        
        r0: number
        return: number // 256
    - name: MultiplyByFixedPoint
      address:
        NA: 0x2001A54
      description: |-
        Multiply a signed integer x by a signed fixed point multiplier (in Q24.8 format: 24 integer bits + 8 fractional bits).
        
        r0: x
        r1: multiplier
        return: x * multiplier
    - name: UMultiplyByFixedPoint
      address:
        NA: 0x2001B0C
      description: |-
        Multiplies an unsigned integer x by an unsigned fixed point multiplier (in Q24.8 format: 24 integer bits + 8 fractional bits).
        
        r0: x
        r1: multiplier
        return: x * multiplier
    - name: WaitForever
      address:
        NA: 0x2002438
      description: |-
        Sets some program state and calls WaitForInterrupt in an infinite loop.
        
        This is called on fatal errors to hang the program indefinitely.
        
        No params.
    - name: InitMemAllocTableVeneer
      address:
        NA: 0x200321C
      description: |-
        Likely a linker-generated veneer for InitMemAllocTable.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: MemZero
      address:
        NA: 0x2003250
      description: |-
        Zeroes a buffer.
        
        r0: ptr
        r1: len
    - name: TaskProcBoot
      address:
        NA: 0x2003328
      description: |-
        Probably related to booting the game?
        
        This function prints the debug message "task proc boot".
        
        No params.
    - name: SoundResume
      address:
        NA: 0x2003CC4
      description: |-
        Probably resumes the sound player if paused?
        
        This function prints the debug string "sound resume".
    - name: CardPullOutWithStatus
      address:
        NA: 0x2003D2C
      description: |-
        Probably aborts the program with some status code? It seems to serve a similar purpose to the exit(3) function.
        
        This function prints the debug string "card pull out %d" with the status code.
        
        r0: status code
    - name: CardPullOut
      address:
        NA: 0x2003D70
      description: |-
        Sets some global flag that probably triggers system exit?
        
        This function prints the debug string "card pull out".
        
        No params.
    - name: CardBackupError
      address:
        NA: 0x2003D94
      description: |-
        Sets some global flag that maybe indicates a save error?
        
        This function prints the debug string "card backup error".
        
        No params.
    - name: HaltProcessDisp
      address:
        NA: 0x2003DB8
      description: |-
        Maybe halts the process display?
        
        This function prints the debug string "halt process disp %d" with the status code.
        
        r0: status code
    - name: OverlayIsLoaded
      address:
        NA: 0x2003ED0
        EU: 0x2003ED0
      description: |-
        Checks if an overlay with a certain group ID is currently loaded.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to check. A group ID of 0 denotes no overlay, and the return value will always be true in this case.
        return: bool
    - name: LoadOverlay
      address:
        NA: 0x20040AC
        EU: 0x20040AC
      description: |-
        Loads an overlay from ROM by its group ID.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to load
    - name: UnloadOverlay
      address:
        NA: 0x2004868
        EU: 0x2004868
      description: |-
        Unloads an overlay from ROM by its group ID.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to unload
        others: ?
    - name: KeyWaitInit
      address:
        NA: 0x2006DA4
      description: |-
        Implements (most of?) SPECIAL_PROC_KEY_WAIT_INIT (see ScriptSpecialProcessCall).
        
        No params.
    - name: DataTransferInit
      address:
        NA: 0x2008168
        EU: 0x2008168
      description: |-
        Initializes data transfer mode to get data from the ROM cartridge.
        
        No params.
    - name: DataTransferStop
      address:
        NA: 0x2008194
        EU: 0x2008194
      description: |-
        Finalizes data transfer from the ROM cartridge.
        
        This function must always be called if DataTransferInit was called, or the game will crash.
        
        No params.
    - name: FileInitVeneer
      address:
        NA: 0x2008204
        EU: 0x2008204
      description: |-
        Likely a linker-generated veneer for FileInit.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: file_stream pointer
    - name: FileOpen
      address:
        NA: 0x2008210
        EU: 0x2008210
      description: |-
        Opens a file from the ROM file system at the given path, sort of like C's fopen(3) library function.
        
        r0: file_stream pointer
        r1: file path string
    - name: FileGetSize
      address:
        NA: 0x2008244
        EU: 0x2008244
      description: |-
        Gets the size of an open file.
        
        r0: file_stream pointer
        return: file size
    - name: FileRead
      address:
        NA: 0x2008254
        EU: 0x2008254
      description: |-
        Reads the contents of a file into the given buffer, and moves the file cursor accordingly.
        
        Data transfer mode must have been initialized (with DataTransferInit) prior to calling this function. This function looks like it's doing something akin to calling read(2) or fread(3) in a loop until all the bytes have been successfully read.
        
        r0: file_stream pointer
        r1: [output] buffer
        r2: number of bytes to read
        return: number of bytes read
    - name: FileSeek
      address:
        NA: 0x20082A8
        EU: 0x20082A8
      description: |-
        Sets a file stream's position indicator.
        
        This function has the a similar API to the fseek(3) library function from C, including using the same codes for the `whence` parameter:
        - SEEK_SET=0
        - SEEK_CUR=1
        - SEEK_END=2 (maybe not implemented?).
        
        r0: file_stream pointer
        r1: offset
        r2: whence
    - name: FileClose
      address:
        NA: 0x20082C4
        EU: 0x20082C4
      description: |-
        Closes a file.
        
        Data transfer mode must have been initialized (with DataTransferInit) prior to calling this function.
        
        Note: It is possible to keep a file stream open even if data transfer mode has been stopped, in which case the file stream can be used again if data transfer mode is reinitialized.
        
        r0: file_stream pointer
    - name: LoadFileFromRom
      address:
        NA: 0x2008C3C
      description: |-
        Loads a file from ROM by filepath into a heap-allocated buffer.
        
        r0: [output] pointer to an IO struct {ptr, len}
        r1: file path string pointer
        r2: flags
    - name: GetDebugFlag1
      address:
        NA: 0x200C110
        EU: 0x200C198
      description: Just returns 0 in the final binary.
    - name: SetDebugFlag1
      address:
        NA: 0x200C118
        EU: 0x200C1A0
      description: A no-op in the final binary.
    - name: AppendProgPos
      address:
        NA: 0x200C120
      description: |-
        Write a base message into a string and append the file name and line number to the end in the format "file = '%s'  line = %5d\n".
        
        If no program position info is given, "ProgPos info NULL\n" is appended instead.
        
        r0: [output] str
        r1: program position info
        r2: base message
        return: number of characters printed, excluding the null-terminator
    - name: DebugPrintTrace
      address:
        NA: 0x200C16C
      description: |-
        Would log a printf format string tagged with the file name and line number in the debug binary.
        
        This still constructs the string, but doesn't actually do anything with it in the final binary.
        
        If message is a null pointer, the string "  Print  " is used instead.
        
        r0: message
        r1: program position info (can be null)
    - name: DebugPrint0
      address:
        NA:
          - 0x200C1C8
          - 0x200C1FC
        EU: 0x200C284
      description: |-
        Would log a printf format string in the debug binary.
        
        This still constructs the string with Vsprintf, but doesn't actually do anything with it in the final binary.
        
        r0: format
        ...: variadic
    - name: GetDebugFlag2
      address:
        NA: 0x200C234
        EU: 0x200C2BC
      description: Just returns 0 in the final binary.
    - name: SetDebugFlag2
      address:
        NA: 0x200C23C
        EU: 0x200C2C4
      description: A no-op in the final binary.
    - name: DebugPrint
      address:
        NA: 0x200C240
        EU: 0x200C2C8
      description: |-
        Would log a printf format string in the debug binary. A no-op in the final binary.
        
        r0: log level
        r1: format
        ...: variadic
    - name: FatalError
      address:
        NA: 0x200C25C
      description: |-
        Logs some debug messages, then hangs the process.
        
        This function is called in lots of places to bail on a fatal error. Looking at the static data callers use to fill in the program position info is informative, as it tells you the original file name (probably from the standard __FILE__ macro) and line number (probably from the standard __LINE__ macro) in the source code.
        
        r0: program position info
        r1: format
        ...: variadic
    - name: IsAuraBow
      address:
        NA: 0x200CC14
      description: |-
        Checks if an item is one of the aura bows received at the start of the game.
        
        r0: item ID
        return: bool
    - name: SprintfStatic
      address:
        NA:
          - 0x200D634
          - 0x200E990
          - 0x2013758
          - 0x20176E4
          - 0x2017A40
          - 0x2023590
          - 0x202378C
          - 0x2037F30
          - 0x2039438
          - 0x203CFA4
          - 0x2042A84
          - 0x2052418
          - 0x2054A60
          - 0x20609E8
        EU: 0x200D6BC
      description: |-
        Functionally the same as Sprintf, just defined statically in many different places.
        
        Since this is essentially just a wrapper around vsprintf(3), this function was probably statically defined in a header somewhere and included in a bunch of different places. See the actual Sprintf for the one in libc.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: IsBagFull
      address:
        NA: 0x200EDC0
      description: |-
        Implements SPECIAL_PROC_IS_BAG_FULL (see ScriptSpecialProcessCall).
        
        return: bool
    - name: CountItemTypeInBag
      address:
        NA: 0x200EE88
      description: |-
        Implements SPECIAL_PROC_COUNT_ITEM_TYPE_IN_BAG (see ScriptSpecialProcessCall).
        
        r0: item ID
        return: number of items of the specified ID in the bag
    - name: AddItemToBag
      address:
        NA: 0x200F84C
      description: |-
        Implements SPECIAL_PROC_ADD_ITEM_TO_BAG (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: ScriptSpecialProcess0x39
      address:
        NA: 0x200FD54
      description: |-
        Implements SPECIAL_PROC_0x39 (see ScriptSpecialProcessCall).
        
        return: bool
    - name: CountItemTypeInStorage
      address:
        NA: 0x200FEE4
      description: |-
        Implements SPECIAL_PROC_COUNT_ITEM_TYPE_IN_STORAGE (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: number of items of the specified ID in storage
    - name: RemoveItemsTypeInStorage
      address:
        NA: 0x20101E4
      description: |-
        Probably? Implements SPECIAL_PROC_0x2A (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: AddItemToStorage
      address:
        NA: 0x201031C
      description: |-
        Implements SPECIAL_PROC_ADD_ITEM_TO_STORAGE (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: GetExclusiveItemOffset
      address:
        NA: 0x2010E40
      description: |-
        Gets the exclusive item offset, which is the item ID relative to that of the first exclusive item, the Prism Ruff.
        
        r0: item ID
        return: offset
    - name: ApplyExclusiveItemStatBoosts
      address:
        NA: 0x2010E64
      description: |-
        Applies stat boosts from an exclusive item.
        
        r0: item ID
        r1: pointer to attack stat to modify
        r2: pointer to special attack stat to modify
        r3: pointer to defense stat to modify
        stack[0]: pointer to special defense stat to modify
    - name: SetExclusiveItemEffect
      address:
        NA: 0x2010F80
      description: |-
        Sets the bit for an exclusive item effect.
        
        r0: pointer to the effects bitvector to modify
        r1: exclusive item effect ID
    - name: ExclusiveItemEffectFlagTest
      address:
        NA: 0x2010FA4
      description: |-
        Tests the exclusive item bitvector for a specific exclusive item effect.
        
        r0: the effects bitvector to test
        r1: exclusive item effect ID
        return: bool
    - name: GetMoveTargetAndRange
      address:
        NA: 0x2013840
      description: |-
        Gets the move target-and-range field. See struct move_target_and_range in the C headers.
        
        r0: move pointer
        r1: AI flag (every move has two target-and-range fields, one for players and one for AI)
        return: move target and range
    - name: GetMoveBasePower
      address:
        NA: 0x20139CC
      description: |-
        Gets the base power of a move from the move data table.
        
        r0: move pointer
        return: base power
    - name: GetMaxPp
      address:
        NA: 0x2013A50
      description: |-
        Gets the maximum PP for a given move.
        
        r0: move pointer
        return: max PP for the given move, capped at 99
    - name: GetMoveCritChance
      address:
        NA: 0x2013B10
      description: |-
        Gets the critical hit chance of a move.
        
        r0: move pointer
        return: base power
    - name: IsRecoilMove
      address:
        NA: 0x2013E14
      description: |-
        Checks if the given move is a recoil move (affected by Reckless).
        
        r0: move ID
        return: bool
    - name: IsPunchMove
      address:
        NA: 0x2014D18
      description: |-
        Checks if the given move is a punch move (affected by Iron Fist).
        
        r0: move ID
        return: bool
    - name: GetMoveCategory
      address:
        NA: 0x20151C8
      description: |-
        Gets a move's category (physical, special, status).
        
        r0: move ID
        return: move category enum
    - name: LoadWteFromRom
      address:
        NA: 0x201DE4C
      description: |-
        Loads a SIR0-wrapped WTE file from ROM, and returns a handle to it
        
        r0: [output] pointer to wte handle
        r1: file path string
        r2: load file flags
    - name: LoadWteFromFileDirectory
      address:
        NA: 0x201DEC4
      description: |-
        Loads a SIR0-wrapped WTE file from a file directory, and returns a handle to it
        
        r0: [output] pointer to wte handle
        r1: file directory id
        r2: file index
        r3: malloc flags
    - name: UnloadWte
      address:
        NA: 0x201DF18
      description: |-
        Frees the buffer used to store the WTE data in the handle, and sets both pointers to null
        
        r0: pointer to wte handle
    - name: HandleSir0Translation
      address:
        NA: 0x201F4B4
      description: |-
        Translates the offsets in a SIR0 file into NDS memory addresses, changes the magic number to SirO (opened), and returns a pointer to the first pointer specified in the SIR0 header (beginning of the data).
        
        r0: [output] double pointer to beginning of data
        r1: pointer to source file buffer
    - name: HandleSir0TranslationVeneer
      address:
        NA: 0x201F58C
      description: |-
        Likely a linker-generated veneer for HandleSir0Translation.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: [output] double pointer to beginning of data
        r1: pointer to source file buffer
    - name: GetLanguage
      address:
        NA: 0x20205B0
        EU: 0x20206B0
      description: |-
        Gets the single-byte language ID of the current program.
        
        The language ID appears to be used to index some global tables.
        
        return: language ID
    - name: PreprocessString
      address:
        NA: 0x20223F0
        EU: 0x20225EC
      description: |-
        An enhanced sprintf, which recognizes certain tags and replaces them with appropiate game values.
        This function can also be used to simply insert values passed within the preprocessor args
        
        The tags utilized for this function are lowercase, it might produce uppercase tags
        that only are used when the text is being typewrited into a message box
        
        r0: [output] formatted string
        r1: maximum capacity of the output buffer
        r2: input format string
        r3: preprocessor flags
        stack[0]: pointer to preprocessor args
    - name: StrcpySimple
      address:
        NA: 0x2025100
        EU: 0x20253CC
      description: |-
        A simple implementation of the strcpy(3) C library function.
        
        This function was probably manually implemented by the developers. See Strcpy for what's probably the real libc function.
        
        r0: dest
        r1: src
    - name: StrncpySimple
      address:
        NA: 0x202511C
        EU: 0x20253E8
      description: |-
        A simple implementation of the strncpy(3) C library function.
        
        This function was probably manually implemented by the developers. See Strncpy for what's probably the real libc function.
        
        r0: dest
        r1: src
        r2: n
    - name: StringFromMessageId
      address:
        NA: 0x20258C4
      description: |-
        Gets the string corresponding to a given message ID.
        
        r0: message ID
        return: string from the string files with the given message ID
    - name: SetScreenWindowsColor
      address:
        NA: 0x2027A68
      description: |-
        Sets the palette of the frames of windows in the specified screen
        
        r0: palette index
        r1: is upper screen
    - name: SetBothScreensWindowsColor
      address:
        NA: 0x2027A80
      description: |-
        Sets the palette of the frames of windows in both screens
        
        r0: palette index
    - name: InitMainTeamAfterQuiz
      address:
        NA: 0x20487C4
      description: |-
        Implements SPECIAL_PROC_INIT_MAIN_TEAM_AFTER_QUIZ (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x3
      address:
        NA: 0x2048A0C
      description: |-
        Implements SPECIAL_PROC_0x3 (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x4
      address:
        NA: 0x2048A84
      description: |-
        Implements SPECIAL_PROC_0x4 (see ScriptSpecialProcessCall).
        
        No params.
    - name: SaveScriptVariableValue
      address:
        NA: 0x204B820
        EU: 0x204BB58
    - name: SaveScriptVariableValueWithOffset
      address:
        NA: 0x204B988
        EU: 0x204BCC0
    - name: ScriptSpecialProcess0x3A
      address:
        NA: 0x204FC28
      description: |-
        Implements SPECIAL_PROC_0x3A (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x3B
      address:
        NA: 0x204FEC8
      description: |-
        Implements SPECIAL_PROC_0x3B (see ScriptSpecialProcessCall).
        
        No params.
    - name: SendSkyGiftToGuildmaster
      address:
        NA: 0x204FF80
      description: |-
        Implements SPECIAL_PROC_SEND_SKY_GIFT_TO_GUILDMASTER (see ScriptSpecialProcessCall).
        
        No params.
    - name: SubFixedPoint
      address:
        NA: 0x2050F10
      description: |-
        Compute the subtraction of two decimal fixed point floats.
        
        Floats are in the format {16-bit integer part, 16-bit thousandths}, where the integer part is the lower word. Probably used primarily for belly.
        
        r0: float
        r1: decrement
        return: max(float - decrement, 0)
    - name: BinToDecFixedPoint
      address:
        NA: 0x2051020
      description: |-
        Convert a Q16.16 binary fixed-point float to the decimal fixed-point float used for belly calculations. Thousandths are floored.
        
        If <data> holds the raw binary data, a Q16.16 binary fixed-point float has the value ((unsigned)data) * 2^-16), and the decimal fixed-point float used for belly has the value (data & 0xffff) + (data >> 16)/1000.
        
        r0: pointer p, where ((const unsigned *)p)[1] is the float in Q16.16 format to convert
        return: float in decimal fixed-point format
    - name: CeilFixedPoint
      address:
        NA: 0x2051064
      description: |-
        Compute the ceiling of a decimal fixed point float.
        
        Floats are in the format {16-bit integer part, 16-bit thousandths}, where the integer part is the lower word. Probably used primarily for belly.
        
        r0: float
        return: ceil(float)
    - name: DungeonGoesUp
      address:
        NA: 0x2051288
      description: |-
        Returns whether the specified dungeon is considered as going upward or not
        
        r0: dungeon id
        return: bool
    - name: IsUnown
      address:
        NA: 0x2054A88
      description: |-
        Checks if a monster ID is an Unown.
        
        r0: monster ID
        return: bool
    - name: IsShaymin
      address:
        NA: 0x2054AA4
      description: |-
        Checks if a monster ID is a Shaymin form.
        
        r0: monster ID
        return: bool
    - name: IsCastform
      address:
        NA: 0x2054AD4
      description: |-
        Checks if a monster ID is a Castform form.
        
        r0: monster ID
        return: bool
    - name: IsCherrim
      address:
        NA: 0x2054B2C
      description: |-
        Checks if a monster ID is a Cherrim form.
        
        r0: monster ID
        return: bool
    - name: IsDeoxys
      address:
        NA: 0x2054B74
      description: |-
        Checks if a monster ID is a Deoxys form.
        
        r0: monster ID
        return: bool
    - name: IsMonsterOnTeam
      address:
        NA: 0x2055148
      description: |-
        Checks if a given monster is on the exploration team (not necessarily the active party)?
        
        r0: monster ID
        r1: ?
        return: bool
    - name: SetTeamSetupHeroAndPartnerOnly
      address:
        NA: 0x20569CC
      description: |-
        Implements SPECIAL_PROC_SET_TEAM_SETUP_HERO_AND_PARTNER_ONLY (see ScriptSpecialProcessCall).
        
        No params.
    - name: SetTeamSetupHeroOnly
      address:
        NA: 0x2056AB0
      description: |-
        Implements SPECIAL_PROC_SET_TEAM_SETUP_HERO_ONLY (see ScriptSpecialProcessCall).
        
        No params.
    - name: GetPartyMembers
      address:
        NA: 0x2056C20
      description: |-
        Appears to get the team's active party members. Implements most of SPECIAL_PROC_IS_TEAM_SETUP_SOLO (see ScriptSpecialProcessCall).
        
        r0: [output] Array of 4 2-byte values (they seem to be indexes of some sort) describing each party member, which will be filled in by the function. The input can be a null pointer if the party members aren't needed
        return: Number of party members
    - name: IqSkillFlagTest
      address:
        NA: 0x2058F04
      description: |-
        Tests whether an IQ skill with a given ID is active.
        
        r0: IQ skill bitvector to test
        r1: IQ skill ID
        return: bool
    - name: GetSosMailCount
      address:
        NA: 0x205B97C
      description: |-
        Implements SPECIAL_PROC_GET_SOS_MAIL_COUNT (see ScriptSpecialProcessCall).
        
        r0: ?
        r1: some flag?
        return: SOS mail count
    - name: DungeonRequestsDone
      address:
        NA: 0x205EDA4
      description: |-
        Seems to return the number of missions completed.
        
        Part of the implementation for SPECIAL_PROC_DUNGEON_HAD_REQUEST_DONE (see ScriptSpecialProcessCall).
        
        r0: ?
        r1: some flag?
        return: number of missions completed
    - name: DungeonRequestsDoneWrapper
      address:
        NA: 0x205EE10
      description: |-
        Calls DungeonRequestsDone with the second argument set to false.
        
        r0: ?
        return: number of mission completed
    - name: AnyDungeonRequestsDone
      address:
        NA: 0x205EE20
      description: |-
        Calls DungeonRequestsDone with the second argument set to true, and converts the integer output to a boolean.
        
        r0: ?
        return: bool: whether the number of missions completed is greater than 0
    - name: ScriptSpecialProcess0x3D
      address:
        NA: 0x2065B50
      description: |-
        Implements SPECIAL_PROC_0x3D (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x3E
      address:
        NA: 0x2065B60
      description: |-
        Implements SPECIAL_PROC_0x3E (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x17
      address:
        NA: 0x2065C48
      description: |-
        Implements SPECIAL_PROC_0x17 (see ScriptSpecialProcessCall).
        
        No params.
    - name: ItemAtTableIdx
      address:
        NA: 0x2065CF8
      description: |-
        Gets info about the item at a given item table (not sure what this table is...) index.
        
        Used by SPECIAL_PROC_COUNT_TABLE_ITEM_TYPE_IN_BAG and friends (see ScriptSpecialProcessCall).
        
        r0: table index
        r1: [output] pointer to an owned_item
    - name: WaitForInterrupt
      address:
        NA: 0x207BC30
      description: |-
        Presumably blocks until the program receives an interrupt.
        
        This just calls (in Ghidra terminology) coproc_moveto_Wait_for_interrupt(0). See https://en.wikipedia.org/wiki/ARM_architecture_family#Coprocessors.
        
        No params.
    - name: FileInit
      address:
        NA: 0x207F3E4
      description: |-
        Initializes a file_stream structure for file I/O.
        
        This function must always be called before opening a file.
        
        r0: file_stream pointer
    - name: Abs
      address:
        NA: 0x208655C
      description: |-
        Takes the absolute value of an integer.
        
        r0: x
        return: abs(x)
    - name: Mbtowc
      address:
        NA: 0x20871BC
      description: |-
        The mbtowc(3) C library function.
        
        r0: pwc
        r1: s
        r2: n
        return: number of consumed bytes, or -1 on failure
    - name: TryAssignByte
      address:
        NA: 0x20871F4
      description: |-
        Assign a byte to the target of a pointer if the pointer is non-null.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: TryAssignByteWrapper
      address:
        NA: 0x2087208
      description: |-
        Wrapper around TryAssignByte.
        
        Accesses the TryAssignByte function with a weird chain of pointer dereferences.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: Wcstombs
      address:
        NA: 0x2087224
      description: |-
        The wcstombs(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: characters converted
    - name: Memcpy
      address:
        NA: 0x208729C
      description: |-
        The memcpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Memmove
      address:
        NA: 0x20872BC
      description: |-
        The memmove(3) C library function.
        
        The implementation is nearly the same as Memcpy, but it copies bytes from back to front if src < dst.
        
        r0: dest
        r1: src
        r2: n
    - name: Memset
      address:
        NA: 0x2087308
      description: |-
        The memset(3) C library function.
        
        This is just a wrapper around MemsetInternal that returns the pointer at the end.
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
        return: s
    - name: Memchr
      address:
        NA: 0x208731C
      description: |-
        The memchr(3) C library function.
        
        r0: s
        r1: c
        r2: n
        return: pointer to first occurrence of c in s, or a null pointer if no match
    - name: Memcmp
      address:
        NA: 0x2087348
      description: |-
        The memcmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: MemsetInternal
      address:
        NA: 0x2087388
      description: |-
        The actual memory-setting implementation for the memset(3) C library function.
        
        This function is optimized to set bytes in 4-byte chunks for n >= 32, correctly handling any unaligned bytes at the front/back. In this case, it also further optimizes by unrolling a for loop to set 8 4-byte values at once (effectively a 32-byte chunk).
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
    - name: VsprintfInternalSlice
      address:
        NA: 0x2088C74
      description: |-
        This is what implements the bulk of VsprintfInternal.
        
        The __vsprintf_internal in the modern-day version of glibc relies on __vfprintf_internal; this function has a slightly different interface, but it serves a similar role.
        
        r0: function pointer to append to the string being built (VsprintfInternal uses TryAppendToSlice)
        r1: string buffer slice
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: TryAppendToSlice
      address:
        NA: 0x2089498
      description: |-
        Best-effort append the given data to a slice. If the slice's capacity is reached, any remaining data will be truncated.
        
        r0: slice pointer
        r1: buffer of data to append
        r2: number of bytes in the data buffer
        return: true
    - name: VsprintfInternal
      address:
        NA: 0x20894DC
      description: |-
        This is what implements Vsprintf. It's akin to __vsprintf_internal in the modern-day version of glibc (in fact, it's probably an older version of this).
        
        r0: str
        r1: maxlen (Vsprintf passes UINT32_MAX for this)
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: Vsprintf
      address:
        NA: 0x2089544
      description: |-
        The vsprintf(3) C library function.
        
        r0: str
        r1: format
        r2: ap
        return: number of characters printed, excluding the null-terminator
    - name: Snprintf
      address:
        NA: 0x208955C
      description: |-
        The snprintf(3) C library function.
        
        This calls VsprintfInternal directly, so it's presumably the real snprintf.
        
        r0: str
        r1: n
        r2: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: Sprintf
      address:
        NA: 0x2089584
      description: |-
        The sprintf(3) C library function.
        
        This calls VsprintfInternal directly, so it's presumably the real sprintf.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: Strlen
      address:
        NA: 0x2089678
      description: |-
        The strlen(3) C library function.
        
        r0: s
        return: length of s
    - name: Strcpy
      address:
        NA: 0x2089694
      description: |-
        The strcpy(3) C library function.
        
        This function is optimized to copy characters in aligned 4-byte chunks if possible, correctly handling any unaligned bytes at the front/back.
        
        r0: dest
        r1: src
    - name: Strncpy
      address:
        NA: 0x208975C
      description: |-
        The strncpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Strcat
      address:
        NA: 0x20897AC
      description: |-
        The strcat(3) C library function.
        
        r0: dest
        r1: src
    - name: Strncat
      address:
        NA: 0x20897DC
      description: |-
        The strncat(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Strcmp
      address:
        NA: 0x208982C
      description: |-
        The strcmp(3) C library function.
        
        Similarly to Strcpy, this function is optimized to compare characters in aligned 4-byte chunks if possible.
        
        r0: s1
        r1: s2
        return: comparison value
    - name: Strncmp
      address:
        NA: 0x2089940
      description: |-
        The strncmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: Strchr
      address:
        NA: 0x2089974
      description: |-
        The strchr(3) C library function.
        
        r0: string
        r1: c
        return: pointer to the located byte c, or null pointer if no match
    - name: Strcspn
      address:
        NA: 0x20899B0
      description: |-
        The strcspn(3) C library function.
        
        r0: string
        r1: stopset
        return: offset of the first character in string within stopset
    - name: Strstr
      address:
        NA: 0x2089A70
      description: |-
        The strstr(3) C library function.
        
        r0: haystack
        r1: needle
        return: pointer into haystack where needle starts, or null pointer if no match
    - name: Wcslen
      address:
        NA: 0x208B3E8
      description: |-
        The wcslen(3) C library function.
        
        r0: ws
        return: length of ws
    - name: DivideInt
      address:
        NA: 0x208FEA4
        EU: 0x209023C
      description: |-
        This appears to be the libgcc implementation of __divsi3 (not sure which gcc version), which implements the division operator for signed ints.
        
        r0: dividend
        r1: divisor
        return: dividend / divisor
    - name: DivideUInt
      address:
        NA: 0x20900B0
      description: |-
        This appears to be the libgcc implementation of __udivsi3 (not sure which gcc version), which implements the division operator for unsigned ints.
        
        Note: This function falls through to DivideUIntNoZeroCheck.
        
        r0: dividend
        r1: divisor
        return: dividend / divisor
    - name: DivideUIntNoZeroCheck
      address:
        NA: 0x20900B8
      description: |-
        Subsidiary function to DivideUInt. Skips the initial check for divisor == 0.
        
        This function appears to only be called internally.
        
        r0: dividend
        r1: divisor
        return: dividend / divisor
  data:
    - name: DEFAULT_MEMORY_ARENA_SIZE
      address:
        NA: 0x2000E58
      length:
        NA: 0x4
      description: "Length in bytes of the default memory allocation arena, 1991680."
    - name: AURA_BOW_ID_LAST
      address:
        NA: 0x200CC34
      length:
        NA: 0x4
      description: Highest item ID of the aura bows.
    - name: NUMBER_OF_ITEMS
      address:
        NA: 0x200E860
      length:
        NA: 0x4
      description: Number of items in the game.
    - name: MAX_RECRUITABLE_TEAM_MEMBERS
      address:
        NA:
          - 0x2055238
          - 0x205564C
      description: "555, appears to be the maximum number of members recruited to an exploration team, at least for the purposes of some checks that need to iterate over all team members."
    - name: CART_REMOVED_IMG_DATA
      address:
        NA: 0x2092AE8
        EU: 0x2092EE4
      length:
        NA: 0x4000
        EU: 0x2000
    - name: EXCLUSIVE_ITEM_STAT_BOOST_DATA
      address:
        NA: 0x20980E8
      length:
        NA: 0x3C
      description: |-
        Contains stat boost effects for different exclusive item classes.
        
        Each 4-byte entry contains the boost data for (attack, special attack, defense, special defense), 1 byte each, for a specific exclusive item class, indexed according to the stat boost data index list.
    - name: EXCLUSIVE_ITEM_ATTACK_BOOSTS
      address:
        NA: 0x20980E8
      length:
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 0"
    - name: EXCLUSIVE_ITEM_SPECIAL_ATTACK_BOOSTS
      address:
        NA: 0x20980E9
      length:
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 1"
    - name: EXCLUSIVE_ITEM_DEFENSE_BOOSTS
      address:
        NA: 0x20980EA
      length:
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 2"
    - name: EXCLUSIVE_ITEM_SPECIAL_DEFENSE_BOOSTS
      address:
        NA: 0x20980EB
      length:
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 3"
    - name: EXCLUSIVE_ITEM_EFFECT_DATA
      address:
        NA: 0x2098124
      length:
        NA: 0x778
      description: |-
        Contains special effects for each exclusive item.
        
        Each entry is 2 bytes, with the first entry corresponding to the first exclusive item (Prism Ruff). The first byte is the exclusive item effect ID, and the second byte is an index into other data tables (related to the more generic stat boosting effects for specific monsters).
    - name: EXCLUSIVE_ITEM_STAT_BOOST_DATA_INDEXES
      address:
        NA: 0x2098125
      length:
        NA: 0x777
      description: "EXCLUSIVE_ITEM_EFFECT_DATA, offset by 1"
    - name: RECOIL_MOVE_LIST
      address:
        NA: 0x2098D74
      length:
        NA: 0x16
      description: |-
        Null-terminated list of all the recoil moves, as 2-byte move IDs.
        
        type: struct move_id_16[11]
    - name: PUNCH_MOVE_LIST
      address:
        NA: 0x2098D8A
      length:
        NA: 0x20
      description: |-
        Null-terminated list of all the punch moves, as 2-byte move IDs.
        
        type: struct move_id_16[16]
    - name: SCRIPT_VARS_LOCALS
      address:
        NA: 0x209CECC
      length:
        NA: 0x40
      description: |-
        List of special "local" variables available to the script engine. There are 4 16-byte entries.
        
        Each entry has the same structure as an entry in SCRIPT_VARS.
        
        type: struct script_local_var_table
    - name: SCRIPT_VARS
      address:
        NA: 0x209D870
        JP: 0x209EC44
      length:
        NA: 0x730
        JP: 0x730
      description: |-
        List of predefined global variables that track game state, which are available to the script engine. There are 115 16-byte entries.
        
        These variables underpin the various ExplorerScript global variables you can use in the SkyTemple SSB debugger.
        
        type: struct script_var_table
    - name: DUNGEON_DATA_LIST
      address:
        NA: 0x209E3A0
        EU: 0x209E924
      length:
        NA: 0x2D0
        EU: 0x2D0
      description: |-
        Data about every dungeon in the game.
        
        This is an array of 180 dungeon data list entry structs. Each entry is 4 bytes, and contains floor count information along with an index into the bulk of the dungeon's data in mappa_s.bin.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct dungeon_data_list_entry[180]
    - name: DUNGEON_RESTRICTIONS
      address:
        NA: 0x20A0C64
        EU: 0x20A11E8
      length:
        NA: 0xC00
        EU: 0xC00
      description: |-
        Data related to dungeon restrictions for every dungeon in the game.
        
        This is an array of 256 dungeon restriction structs. Each entry is 12 bytes, and contains information about restrictions within the given dungeon.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct dungeon_restriction[256]
    - name: SPECIAL_BAND_STAT_BOOST
      address:
        NA: 0x20A186C
      length:
        NA: 0x2
      description: Stat boost value for the Special Band.
    - name: MUNCH_BELT_STAT_BOOST
      address:
        NA: 0x20A187C
      length:
        NA: 0x2
      description: Stat boost value for the Munch Belt.
    - name: GUMMI_STAT_BOOST
      address:
        NA: 0x20A1888
      length:
        NA: 0x2
      description: Stat boost value if a stat boost occurs when eating normal Gummis.
    - name: MIN_IQ_EXCLUSIVE_MOVE_USER
      address:
        NA: 0x20A188C
        EU: 0x20A1E10
      length:
        NA: 0x4
        EU: 0x4
    - name: WONDER_GUMMI_IQ_GAIN
      address:
        NA: 0x20A1890
        EU: 0x20A1E14
      length:
        NA: 0x2
        EU: 0x2
      description: IQ gain when ingesting wonder gummis.
    - name: AURA_BOW_STAT_BOOST
      address:
        NA: 0x20A1898
      length:
        NA: 0x2
      description: Stat boost value for the aura bows.
    - name: MIN_IQ_ITEM_MASTER
      address:
        NA: 0x20A18A4
        EU: 0x20A1E28
      length:
        NA: 0x4
        EU: 0x4
    - name: DEF_SCARF_STAT_BOOST
      address:
        NA: 0x20A18A8
      length:
        NA: 0x2
      description: Stat boost value for the Defense Scarf.
    - name: POWER_BAND_STAT_BOOST
      address:
        NA: 0x20A18AC
      length:
        NA: 0x2
      description: Stat boost value for the Power Band.
    - name: WONDER_GUMMI_STAT_BOOST
      address:
        NA: 0x20A18B0
      length:
        NA: 0x2
      description: Stat boost value if a stat boost occurs when eating Wonder Gummis.
    - name: ZINC_BAND_STAT_BOOST
      address:
        NA: 0x20A18B4
      length:
        NA: 0x2
      description: Stat boost value for the Zinc Band.
    - name: TACTICS_UNLOCK_LEVEL_TABLE
      address:
        NA: 0x20A1940
        EU: 0x20A1EC4
      length:
        NA: 0x18
        EU: 0x18
    - name: OUTLAW_LEVEL_TABLE
      address:
        NA: 0x20A1998
        EU: 0x20A1F1C
      length:
        NA: 0x20
        EU: 0x20
      description: "Table of 2-byte outlaw levels for outlaw missions, indexed by mission rank."
    - name: OUTLAW_MINION_LEVEL_TABLE
      address:
        NA: 0x20A19B8
        EU: 0x20A1F3C
      length:
        NA: 0x20
        EU: 0x20
      description: "Table of 2-byte outlaw minion levels for outlaw hideout missions, indexed by mission rank."
    - name: IQ_SKILL_RESTRICTIONS
      address:
        NA: 0x20A1A5C
        EU: 0x20A1FE0
      length:
        NA: 0x8A
        EU: 0x8A
      description: Table of 2-byte values for each IQ skill that represent a group. IQ skills in the same group can not be enabled at the same time.
    - name: SECONDARY_TERRAIN_TYPES
      address:
        NA: 0x20A1AE8
        EU: 0x20A206C
      length:
        NA: 0xC8
        EU: 0xC8
      description: |-
        The type of secondary terrain for each dungeon in the game.
        
        This is an array of 200 bytes. Each byte is an enum corresponding to one dungeon.
        
        type: struct secondary_terrain_type_8[200]
    - name: SENTRY_MINIGAME_DATA
      address:
        NA: 0x20A1BB0
    - name: IQ_SKILLS
      address:
        NA: 0x20A1C7C
        EU: 0x20A2200
      length:
        NA: 0x114
        EU: 0x114
      description: Table of 4-byte values for each IQ skill that represent the required IQ value to unlock a skill.
    - name: IQ_GROUP_SKILLS
      address:
        NA: 0x20A1D90
        EU: 0x20A2314
      length:
        NA: 0x190
        EU: 0x190
    - name: IQ_GUMMI_GAIN_TABLE
      address:
        NA: 0x20A22B0
        EU: 0x20A2834
      length:
        NA: 0x288
        EU: 0x288
    - name: GUMMI_BELLY_RESTORE_TABLE
      address:
        NA: 0x20A2538
        EU: 0x20A2ABC
      length:
        NA: 0x288
        EU: 0x288
    - name: BAG_CAPACITY_TABLE
      address:
        NA: 0x20A27D4
      length:
        NA: 0x20
      description: Array of 4-byte integers containing the bag capacity for each bag level.
    - name: SPECIAL_EPISODE_MAIN_CHARACTERS
      address:
        NA: 0x20A27F4
        EU: 0x20A2D78
      length:
        NA: 0xC8
        EU: 0xC8
    - name: GUEST_MONSTER_DATA
      address:
        NA: 0x20A28BC
        EU: 0x20A2E40
      length:
        NA: 0x288
        EU: 0x288
      description: |-
        Data for guest monsters that join you during certain story dungeons.
        
        Array of 18 36-byte entries.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct guest_monster[18]
    - name: RANK_UP_TABLE
      address:
        NA: 0x20A2B44
        EU: 0x20A30C8
      length:
        NA: 0xD0
        EU: 0xD0
    - name: MONSTER_SPRITE_DATA
      address:
        NA: 0x20A2D08
        EU: 0x20A332C
      length:
        NA: 0x4B0
        EU: 0x4B0
    - name: MISSION_DUNGEON_UNLOCK_TABLE
      address:
        NA: 0x20A3CAC
    - name: EVENTS
      address:
        NA: 0x20A5488
        EU: 0x20A5BD8
        JP: 0x20A6894
      length:
        NA: 0x1434
        EU: 0x1584
        JP: 0x1470
      description: |-
        Table of levels for the script engine, in which scenes can take place. There are a version-dependent number of 12-byte entries.
        
        type: struct script_level[length / 12]
    - name: ENTITIES
      address:
        NA: 0x20A7FF0
        EU: 0x20A8890
        JP: 0x20A9438
      length:
        NA: 0x1218
        EU: 0x1218
        JP: 0x1218
      description: |-
        Table of entities for the script engine, which can move around and do things within a scene. There are 386 12-byte entries.
        
        type: struct script_entity[386]
    - name: MAP_MARKER_PLACEMENTS
      address:
        NA: 0x20A94D0
        EU: 0x20A9D70
      length:
        NA: 0x9B0
        EU: 0x9B0
      description: |-
        The map marker position of each dungeon on the Wonder Map.
        
        This is an array of 310 map marker structs. Each entry is 8 bytes, and contains positional information about a dungeon on the map.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct map_marker[310]
    - name: MEMORY_ALLOCATION_ARENA_GETTERS
      address:
        NA: 0x20AEF00
      length:
        NA: 0x8
      description: |-
        Functions to get the desired memory arena for allocating and freeing heap memory.
        
        type: struct mem_arena_getters
    - name: LOADED_OVERLAY_GROUP_0
      address:
        NA: 0x20AF230
        EU: 0x20AFAD0
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 0. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 0:
        - 0x06 (overlay 3)
        - 0x07 (overlay 6)
        - 0x08 (overlay 4)
        - 0x09 (overlay 5)
        - 0x0A (overlay 7)
        - 0x0B (overlay 8)
        - 0x0C (overlay 9)
        - 0x10 (overlay 12)
        - 0x11 (overlay 13)
        - 0x12 (overlay 14)
        - 0x13 (overlay 15)
        - 0x14 (overlay 16)
        - 0x15 (overlay 17)
        - 0x16 (overlay 18)
        - 0x17 (overlay 19)
        - 0x18 (overlay 20)
        - 0x19 (overlay 21)
        - 0x1A (overlay 22)
        - 0x1B (overlay 23)
        - 0x1C (overlay 24)
        - 0x1D (overlay 25)
        - 0x1E (overlay 26)
        - 0x1F (overlay 27)
        - 0x20 (overlay 28)
        - 0x21 (overlay 30)
        - 0x22 (overlay 31)
        - 0x23 (overlay 32)
        - 0x24 (overlay 33)
        
        type: enum overlay_group_id
    - name: LOADED_OVERLAY_GROUP_1
      address:
        NA: 0x20AF234
        EU: 0x20AFAD4
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 1. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 1:
        - 0x4 (overlay 1)
        - 0x5 (overlay 2)
        - 0xD (overlay 11)
        - 0xE (overlay 29)
        - 0xF (overlay 34)
        
        type: enum overlay_group_id
    - name: LOADED_OVERLAY_GROUP_2
      address:
        NA: 0x20AF238
        EU: 0x20AFAD8
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 2. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 2:
        - 0x1 (overlay 0)
        - 0x2 (overlay 10)
        - 0x3 (overlay 35)
        
        type: enum overlay_group_id
    - name: PACK_FILE_PATHS_TABLE
      address:
        NA: 0x20AF6A0
      length:
        NA: 0x18
      description: |-
        List of pointers to path strings to all known pack files.
        The game uses this table to load its resources when launching dungeon mode.
    - name: GAME_STATE_VALUES
      address:
        NA: 0x20AF6B8
        EU: 0x20AFF70
      description: "[Runtime]"
    - name: DUNGEON_MOVE_TABLES
      address:
        NA: 0x20AF6DC
      description: "[Runtime] Seems to be some sort of region (a table of tables?) that holds pointers to various important tables related to moves."
    - name: MOVE_DATA_TABLE_PTR
      address:
        NA: 0x20AF6E4
      length:
        NA: 0x4
      description: |-
        [Runtime] Points to the contents of the move data table loaded from waza_p.bin
        
        type: struct move_data_table*
    - name: LANGUAGE_INFO_DATA
      address:
        NA: 0x20AFCE8
        EU: 0x20B05A8
      description: "[Runtime]"
    - name: NOTIFY_NOTE
      address:
        NA: 0x20AFEF8
        EU: 0x20B0814
      description: "[Runtime]"
    - name: DEFAULT_HERO_ID
      address:
        NA: 0x20AFEFC
        EU: 0x20B0818
      length:
        NA: 0x2
        EU: 0x2
      description: |-
        The default monster ID for the hero (0x4: Charmander)
        
        type: struct monster_id_16
    - name: DEFAULT_PARTNER_ID
      address:
        NA: 0x20AFEFE
        EU: 0x20B081A
      length:
        NA: 0x2
        EU: 0x2
      description: |-
        The default monster ID for the partner (0x1: Bulbasaur)
        
        type: struct monster_id_16
    - name: GAME_MODE
      address:
        NA: 0x20AFF70
        EU: 0x20B088C
      description: "[Runtime]"
    - name: ITEM_TABLES_PTRS_1
      address:
        NA: 0x20B0948
      length:
        NA: 0x68
    - name: SMD_EVENTS_FUN_TABLE
      address:
        NA: 0x20B0B90
      length:
        NA: 0x1FC
    - name: MEMORY_ALLOCATION_TABLE
      address:
        NA: 0x20B3380
        EU: 0x20B3CC0
      length:
        NA: 0x40
        EU: 0x40
      description: |-
        [Runtime] Keeps track of all active heap allocations.
        
        The memory allocator in the ARM9 binary uses region-based memory management (see https://en.wikipedia.org/wiki/Region-based_memory_management). The heap is broken up into smaller contiguous chunks called arenas (struct mem_arena), which are in turn broken up into chunks referred to as blocks (struct mem_block). Most of the time, an allocation results in a block being split off from a free part of an existing memory arena.
        
        Note: There seems to be some other static data at this address in the ARM9 binary itself. It gets overwritten at runtime when the allocator sets up.
        
        type: struct mem_alloc_table
    - name: DEFAULT_MEMORY_ARENA
      address:
        NA: 0x20B3384
      length:
        NA: 0x1C
      description: |-
        [Runtime] The default memory allocation arena. This is part of MEMORY_ALLOCATION_TABLE, but is also referenced on its own by various functions.
        
        type: struct mem_arena
    - name: DEFAULT_MEMORY_ARENA_BLOCKS
      address:
        NA: 0x20B33C0
      length:
        NA: 0x1800
      description: |-
        [Runtime] The block array for DEFAULT_MEMORY_ARENA.
        
        type: struct mem_block[256]
