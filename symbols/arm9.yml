arm9:
  versions:
    - EU
    - NA
    - JP
    - EU-ITCM
    - NA-ITCM
    - JP-ITCM
  address:
    EU: 0x2000000
    NA: 0x2000000
    JP: 0x2000000
    EU-ITCM: 0x1FF8000
    NA-ITCM: 0x1FF8000
    JP-ITCM: 0x1FF8000
  length:
    EU: 0xB7D38
    NA: 0xB73F8
    JP: 0xB8CB8
    EU-ITCM: 0x4000
    NA-ITCM: 0x4000
    JP-ITCM: 0x4060
  description: |-
    The main ARM9 binary.
    
    This is the main binary that gets loaded when the game is launched, and contains the core code that runs the game, low level facilities such as memory allocation, compression, other external dependencies (such as linked functions from libc and libgcc), and the functions and tables necessary to load overlays and dispatch execution to them.
    
    Speaking generally, this is the program run by the Nintendo DS's main ARM946E-S CPU, which handles all gameplay mechanisms and graphics rendering.
  subregions:
    - itcm.yml
  functions:
    - name: EntryArm9
      address:
        EU: 0x2000800
        NA: 0x2000800
        JP: 0x2000800
      description: |-
        The entrypoint for the ARM9 CPU. This is like the "main" function for the ARM9 subsystem.
        
        No params.
    - name: InitMemAllocTable
      address:
        EU: 0x2000DE0
        NA: 0x2000DE0
        JP: 0x2000DE0
      description: |-
        Initializes MEMORY_ALLOCATION_TABLE.
        
        Sets up the default memory arena, sets the default memory allocator parameters (calls SetMemAllocatorParams(0, 0)), and does some other stuff.
        
        No params.
    - name: SetMemAllocatorParams
      address:
        EU: 0x2000E70
        NA: 0x2000E70
        JP: 0x2000E70
      description: |-
        Sets global parameters for the memory allocator.
        
        This includes MEMORY_ALLOCATION_ARENA_GETTERS and some other stuff.
        
        Dungeon mode uses the default arena getters. Ground mode uses its own arena getters, which are defined in overlay 11 and set (by calling this function) at the start of GroundMainLoop.
        
        r0: GetAllocArena function pointer (GetAllocArenaDefault is used if null)
        r1: GetFreeArena function pointer (GetFreeArenaDefault is used if null)
    - name: GetAllocArenaDefault
      address:
        EU: 0x2000EC0
        NA: 0x2000EC0
        JP: 0x2000EC0
      description: |-
        The default function for retrieving the arena for memory allocations. This function always just returns the initial arena pointer.
        
        r0: initial memory arena pointer, or null
        r1: flags (see MemAlloc)
        return: memory arena pointer, or null
    - name: GetFreeArenaDefault
      address:
        EU: 0x2000EC4
        NA: 0x2000EC4
        JP: 0x2000EC4
      description: |-
        The default function for retrieving the arena for memory freeing. This function always just returns the initial arena pointer.
        
        r0: initial memory arena pointer, or null
        r1: pointer to free
        return: memory arena pointer, or null
    - name: InitMemArena
      address:
        EU: 0x2000EC8
        NA: 0x2000EC8
        JP: 0x2000EC8
      description: |-
        Initializes a new memory arena with the given specifications, and records it in the global MEMORY_ALLOCATION_TABLE.
        
        r0: arena struct to be initialized
        r1: memory region to be owned by the arena, as {pointer, length}
        r2: pointer to block metadata array for the arena to use
        r3: maximum number of blocks that the arena can hold
    - name: MemAllocFlagsToBlockType
      address:
        EU: 0x2000F44
        NA: 0x2000F44
        JP: 0x2000F44
      description: |-
        Converts the internal alloc flags bitfield (struct mem_block field 0x4) to the block type bitfield (struct mem_block field 0x0).
        
        r0: internal alloc flags
        return: block type flags
    - name: FindAvailableMemBlock
      address:
        EU: 0x2000F88
        NA: 0x2000F88
        JP: 0x2000F88
      description: |-
        Searches through the given memory arena for a block with enough free space.
        
        Blocks are searched in reverse order. For object allocations (i.e., not arenas), the block with the smallest amount of free space that still suffices is returned. For arena allocations, the first satisfactory block found is returned.
        
        r0: memory arena to search
        r1: internal alloc flags
        r2: amount of space needed, in bytes
        return: index of the located block in the arena's block array, or -1 if nothing is available
    - name: SplitMemBlock
      address:
        EU: 0x2001070
        NA: 0x2001070
        JP: 0x2001070
      description: |-
        Given a memory block at a given index, splits off another memory block of the specified size from the end.
        
        Since blocks are stored in an array on the memory arena struct, this is essentially an insertion operation, plus some processing on the block being split and its child.
        
        r0: memory arena
        r1: block index
        r2: internal alloc flags
        r3: number of bytes to split off
        stack[0]: user alloc flags (to assign to the new block)
        return: the newly split-off memory block
    - name: MemAlloc
      address:
        EU: 0x2001170
        NA: 0x2001170
        JP: 0x2001170
      description: |-
        Allocates some memory on the heap, returning a pointer to the starting address.
        
        Memory allocation is done with region-based memory management. See MEMORY_ALLOCATION_TABLE for more information.
        
        This function is just a wrapper around MemLocateSet.
        
        r0: length in bytes
        r1: flags (see the comment on struct mem_block::user_flags)
        return: pointer
    - name: MemFree
      address:
        EU: 0x2001188
        NA: 0x2001188
        JP: 0x2001188
      description: |-
        Frees heap-allocated memory.
        
        This function is just a wrapper around MemLocateUnset.
        
        r0: pointer
    - name: MemArenaAlloc
      address:
        EU: 0x200119C
        NA: 0x200119C
        JP: 0x200119C
      description: |-
        Allocates some memory on the heap and creates a new global memory arena with it.
        
        The actual allocation part works similarly to the normal MemAlloc.
        
        r0: desired parent memory arena, or null
        r1: length of the arena in bytes
        r2: maximum number of blocks that the arena can hold
        r3: flags (see MemAlloc)
        return: memory arena pointer
    - name: CreateMemArena
      address:
        EU: 0x2001280
        NA: 0x2001280
        JP: 0x2001280
      description: |-
        Creates a new memory arena within a given block of memory.
        
        This is essentially a wrapper around InitMemArena, accounting for the space needed by the arena metadata.
        
        r0: memory region in which to create the arena, as {pointer, length}
        r1: maximum number of blocks that the arena can hold
        return: memory arena pointer
    - name: MemLocateSet
      address:
        EU: 0x2001390
        NA: 0x2001390
        JP: 0x2001390
      description: |-
        The implementation for MemAlloc.
        
        At a high level, memory is allocated by choosing a memory arena, looking through blocks in the memory arena until a free one that's large enough is found, then splitting off a new memory block of the needed size.
        
        This function is not fallible, i.e., it hangs the whole program on failure, so callers can assume it never fails.
        
        The name for this function comes from the error message logged on failure, and it reflects what the function does: locate an available block of memory and set it up for the caller.
        
        r0: desired memory arena for allocation, or null (MemAlloc passes null)
        r1: length in bytes
        r2: flags (see MemAlloc)
        return: pointer to allocated memory
    - name: MemLocateUnset
      address:
        EU: 0x2001638
        NA: 0x2001638
        JP: 0x2001638
      description: |-
        The implementation for MemFree.
        
        At a high level, memory is freed by locating the pointer in its memory arena (searching block-by-block) and emptying the block so it's available for future allocations, and merging it with neighboring blocks if they're available.
        
        r0: desired memory arena for freeing, or null (MemFree passes null)
        r1: pointer to free
    - name: RoundUpDiv256
      address:
        EU: 0x2001894
        NA: 0x2001894
        JP: 0x2001894
      description: |-
        Divide a number by 256 and round up to the nearest integer.
        
        r0: number
        return: number // 256
    - name: MultiplyByFixedPoint
      address:
        EU: 0x2001A54
        NA: 0x2001A54
        JP: 0x2001A54
      description: |-
        Multiply a signed integer x by a signed binary fixed-point multiplier (8 fraction bits).
        
        r0: x
        r1: multiplier
        return: x * multiplier
    - name: UMultiplyByFixedPoint
      address:
        EU: 0x2001B0C
        NA: 0x2001B0C
        JP: 0x2001B0C
      description: |-
        Multiplies an unsigned integer x by an unsigned binary fixed-point multiplier (8 fraction bits).
        
        r0: x
        r1: multiplier
        return: x * multiplier
    - name: GetRngSeed
      address:
        EU: 0x200222C
        NA: 0x200222C
      description: Get the current value of PRNG_SEQUENCE_NUM.
    - name: SetRngSeed
      address:
        EU: 0x200223C
        NA: 0x200223C
      description: |-
        Seed PRNG_SEQUENCE_NUM to a given value.
        
        r0: seed
    - name: Rand16Bit
      address:
        EU: 0x200224C
        NA: 0x200224C
        JP: 0x200224C
      description: |-
        Computes a pseudorandom 16-bit integer using the general-purpose PRNG.
        
        Note that much of dungeon mode uses its own (slightly higher-quality) PRNG within overlay 29. See overlay29.yml for more information.
        
        Random numbers are generated with a linear congruential generator (LCG), using a modulus of 2^16, a multiplier of 109, and an increment of 1021. I.e., the recurrence relation is `x = (109*x_prev + 1021) % 2^16`.
        
        The LCG has a hard-coded seed of 13452 (0x348C), but can be seeded with a call to SetRngSeed.
        
        return: pseudorandom int on the interval [0, 65535]
    - name: RandInt
      address:
        EU: 0x2002274
        NA: 0x2002274
        JP: 0x2002274
      description: |-
        Compute a pseudorandom integer under a given maximum value using the general-purpose PRNG.
        
        This function relies on a single call to Rand16Bit. Even though it takes a 32-bit integer as input, the number of unique outcomes is capped at 2^16.
        
        r0: high
        return: pseudorandom integer on the interval [0, high - 1]
    - name: RandRange
      address:
        EU: 0x200228C
        NA: 0x200228C
        JP: 0x200228C
      description: |-
        Compute a pseudorandom value between two integers using the general-purpose PRNG.
        
        This function relies on a single call to Rand16Bit. Even though it takes 32-bit integers as input, the number of unique outcomes is capped at 2^16.
        
        r0: x
        r1: y
        return: pseudorandom integer on the interval [x, y - 1]
    - name: Rand32Bit
      address:
        EU: 0x20022AC
        NA: 0x20022AC
        JP: 0x20022AC
      description: |-
        Computes a random 32-bit integer using the general-purpose PRNG. The upper and lower 16 bits are each generated with a separate call to Rand16Bit (so this function advances the PRNG twice).
        
        return: pseudorandom int on the interval [0, 4294967295]
    - name: RandIntSafe
      address:
        EU: 0x20022F8
        NA: 0x20022F8
        JP: 0x20022F8
      description: |-
        Same as RandInt, except explicitly masking out the upper 16 bits of the output from Rand16Bit (which should be zero anyway).
        
        r0: high
        return: pseudorandom integer on the interval [0, high - 1]
    - name: RandRangeSafe
      address:
        EU: 0x2002318
        NA: 0x2002318
        JP: 0x2002318
      description: |-
        Like RandRange, except reordering the inputs as needed, and explicitly masking out the upper 16 bits of the output from Rand16Bit (which should be zero anyway).
        
        r0: x
        r1: y
        return: pseudorandom integer on the interval [min(x, y), max(x, y) - 1]
    - name: WaitForever
      address:
        EU: 0x2002438
        NA: 0x2002438
        JP: 0x2002438
      description: |-
        Sets some program state and calls WaitForInterrupt in an infinite loop.
        
        This is called on fatal errors to hang the program indefinitely.
        
        No params.
    - name: InitMemAllocTableVeneer
      address:
        EU: 0x200321C
        NA: 0x200321C
        JP: 0x200321C
      description: |-
        Likely a linker-generated veneer for InitMemAllocTable.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: MemZero
      address:
        EU: 0x2003250
        NA: 0x2003250
        JP: 0x2003250
      description: |-
        Zeroes a buffer.
        
        r0: ptr
        r1: len
    - name: MemcpySimple
      address:
        EU: 0x20032E4
        NA: 0x20032E4
        JP: 0x20032E4
      description: |-
        A simple implementation of the memcpy(3) C library function.
        
        This function was probably manually implemented by the developers. See Memcpy for what's probably the real libc function.
        
        This function copies from src to dst in backwards byte order, so this is safe to call for overlapping src and dst if src <= dst.
        
        r0: dest
        r1: src
        r2: n
    - name: TaskProcBoot
      address:
        EU: 0x2003328
        NA: 0x2003328
        JP: 0x2003328
      description: |-
        Probably related to booting the game?
        
        This function prints the debug message "task proc boot".
        
        No params.
    - name: EnableAllInterrupts
      address:
        EU: 0x2003608
        NA: 0x2003608
        JP: 0x2003608
      description: |-
        Sets the Interrupt Master Enable (IME) register to 1, which enables all CPU interrupts (if enabled in the Interrupt Enable (IE) register).
        
        See https://problemkaputt.de/gbatek.htm#dsiomaps.
        
        return: old value in the IME register
    - name: GetTime
      address:
        EU: 0x20037B4
        NA: 0x20037B4
        JP: 0x20037B4
      description: |-
        Seems to get the current (system?) time as an IEEE 754 floating-point number.
        
        return: current time (maybe in seconds?)
    - name: DisableAllInterrupts
      address:
        EU: 0x2003824
        NA: 0x2003824
        JP: 0x2003824
      description: |-
        Sets the Interrupt Master Enable (IME) register to 0, which disables all CPU interrupts (even if enabled in the Interrupt Enable (IE) register).
        
        See https://problemkaputt.de/gbatek.htm#dsiomaps.
        
        return: old value in the IME register
    - name: SoundResume
      address:
        EU: 0x2003CC4
        NA: 0x2003CC4
        JP: 0x2003CC4
      description: |-
        Probably resumes the sound player if paused?
        
        This function prints the debug string "sound resume".
    - name: CardPullOutWithStatus
      address:
        EU: 0x2003D2C
        NA: 0x2003D2C
        JP: 0x2003D2C
      description: |-
        Probably aborts the program with some status code? It seems to serve a similar purpose to the exit(3) function.
        
        This function prints the debug string "card pull out %d" with the status code.
        
        r0: status code
    - name: CardPullOut
      address:
        EU: 0x2003D70
        NA: 0x2003D70
        JP: 0x2003D70
      description: |-
        Sets some global flag that probably triggers system exit?
        
        This function prints the debug string "card pull out".
        
        No params.
    - name: CardBackupError
      address:
        EU: 0x2003D94
        NA: 0x2003D94
        JP: 0x2003D94
      description: |-
        Sets some global flag that maybe indicates a save error?
        
        This function prints the debug string "card backup error".
        
        No params.
    - name: HaltProcessDisp
      address:
        EU: 0x2003DB8
        NA: 0x2003DB8
        JP: 0x2003DB8
      description: |-
        Maybe halts the process display?
        
        This function prints the debug string "halt process disp %d" with the status code.
        
        r0: status code
    - name: OverlayIsLoaded
      address:
        EU: 0x2003ED0
        NA: 0x2003ED0
        JP: 0x2003ED0
      description: |-
        Checks if an overlay with a certain group ID is currently loaded.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to check. A group ID of 0 denotes no overlay, and the return value will always be true in this case.
        return: bool
    - name: LoadOverlay
      address:
        EU: 0x20040AC
        NA: 0x20040AC
        JP: 0x20040AC
      description: |-
        Loads an overlay from ROM by its group ID.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to load
    - name: UnloadOverlay
      address:
        EU: 0x2004868
        NA: 0x2004868
        JP: 0x2004868
      description: |-
        Unloads an overlay from ROM by its group ID.
        
        See the LOADED_OVERLAY_GROUP_* data symbols or enum overlay_group_id in the C headers for a mapping between group ID and overlay number.
        
        r0: group ID of the overlay to unload
        others: ?
    - name: EuclideanNorm
      address:
        EU:
          - 0x2005050
          - 0x20050B0
        NA:
          - 0x2005050
          - 0x20050B0
      description: |-
        Computes the Euclidean norm of a two-component integer array, sort of like hypotf(3).
        
        r0: integer array [x, y]
        return: sqrt(x*x + y*y)
    - name: ClampComponentAbs
      address:
        EU: 0x2005110
        NA: 0x2005110
        JP: 0x2005110
      description: |-
        Clamps the absolute values in a two-component integer array.
        
        Given an integer array [x, y] and a maximum absolute value M, clamps each element of the array to M such that the output array is [min(max(x, -M), M), min(max(y, -M), M)].
        
        r0: 2-element integer array, will be mutated
        r1: max absolute value
    - name: KeyWaitInit
      address:
        EU: 0x2006DA4
        NA: 0x2006DA4
        JP: 0x2006DA4
      description: |-
        Implements (most of?) SPECIAL_PROC_KEY_WAIT_INIT (see ScriptSpecialProcessCall).
        
        No params.
    - name: DataTransferInit
      address:
        EU: 0x2008168
        NA: 0x2008168
        JP: 0x2008168
      description: |-
        Initializes data transfer mode to get data from the ROM cartridge.
        
        No params.
    - name: DataTransferStop
      address:
        EU: 0x2008194
        NA: 0x2008194
        JP: 0x2008194
      description: |-
        Finalizes data transfer from the ROM cartridge.
        
        This function must always be called if DataTransferInit was called, or the game will crash.
        
        No params.
    - name: FileInitVeneer
      address:
        EU: 0x2008204
        NA: 0x2008204
      description: |-
        Likely a linker-generated veneer for FileInit.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: file_stream pointer
    - name: FileOpen
      address:
        EU: 0x2008210
        NA: 0x2008210
        JP: 0x2008210
      description: |-
        Opens a file from the ROM file system at the given path, sort of like C's fopen(3) library function.
        
        r0: file_stream pointer
        r1: file path string
    - name: FileGetSize
      address:
        EU: 0x2008244
        NA: 0x2008244
        JP: 0x2008244
      description: |-
        Gets the size of an open file.
        
        r0: file_stream pointer
        return: file size
    - name: FileRead
      address:
        EU: 0x2008254
        NA: 0x2008254
        JP: 0x2008254
      description: |-
        Reads the contents of a file into the given buffer, and moves the file cursor accordingly.
        
        Data transfer mode must have been initialized (with DataTransferInit) prior to calling this function. This function looks like it's doing something akin to calling read(2) or fread(3) in a loop until all the bytes have been successfully read.
        
        r0: file_stream pointer
        r1: [output] buffer
        r2: number of bytes to read
        return: number of bytes read
    - name: FileSeek
      address:
        EU: 0x20082A8
        NA: 0x20082A8
        JP: 0x20082A8
      description: |-
        Sets a file stream's position indicator.
        
        This function has the a similar API to the fseek(3) library function from C, including using the same codes for the `whence` parameter:
        - SEEK_SET=0
        - SEEK_CUR=1
        - SEEK_END=2
        
        r0: file_stream pointer
        r1: offset
        r2: whence
    - name: FileClose
      address:
        EU: 0x20082C4
        NA: 0x20082C4
        JP: 0x20082C4
      description: |-
        Closes a file.
        
        Data transfer mode must have been initialized (with DataTransferInit) prior to calling this function.
        
        Note: It is possible to keep a file stream open even if data transfer mode has been stopped, in which case the file stream can be used again if data transfer mode is reinitialized.
        
        r0: file_stream pointer
    - name: LoadFileFromRom
      address:
        EU: 0x2008C3C
        NA: 0x2008C3C
        JP: 0x2008C3C
      description: |-
        Loads a file from ROM by filepath into a heap-allocated buffer.
        
        r0: [output] pointer to an IO struct {ptr, len}
        r1: file path string pointer
        r2: flags
    - name: GetDebugFlag1
      address:
        EU: 0x200C198
        NA: 0x200C110
        JP: 0x200C110
      description: Just returns 0 in the final binary.
    - name: SetDebugFlag1
      address:
        EU: 0x200C1A0
        NA: 0x200C118
        JP: 0x200C118
      description: A no-op in the final binary.
    - name: AppendProgPos
      address:
        EU: 0x200C1A8
        NA: 0x200C120
        JP: 0x200C120
      description: |-
        Write a base message into a string and append the file name and line number to the end in the format "file = '%s'  line = %5d\n".
        
        If no program position info is given, "ProgPos info NULL\n" is appended instead.
        
        r0: [output] str
        r1: program position info
        r2: base message
        return: number of characters printed, excluding the null-terminator
    - name: DebugPrintTrace
      address:
        EU: 0x200C1F4
        NA: 0x200C16C
        JP: 0x200C16C
      description: |-
        Would log a printf format string tagged with the file name and line number in the debug binary.
        
        This still constructs the string, but doesn't actually do anything with it in the final binary.
        
        If message is a null pointer, the string "  Print  " is used instead.
        
        r0: message
        r1: program position info (can be null)
    - name: DebugPrint0
      address:
        EU:
          - 0x200C250
          - 0x200C284
        NA:
          - 0x200C1C8
          - 0x200C1FC
      description: |-
        Would log a printf format string in the debug binary.
        
        This still constructs the string with Vsprintf, but doesn't actually do anything with it in the final binary.
        
        r0: format
        ...: variadic
    - name: GetDebugFlag2
      address:
        EU: 0x200C2BC
        NA: 0x200C234
        JP: 0x200C234
      description: Just returns 0 in the final binary.
    - name: SetDebugFlag2
      address:
        EU: 0x200C2C4
        NA: 0x200C23C
        JP: 0x200C23C
      description: A no-op in the final binary.
    - name: DebugPrint
      address:
        EU: 0x200C2C8
        NA: 0x200C240
        JP: 0x200C240
      description: |-
        Would log a printf format string in the debug binary. A no-op in the final binary.
        
        r0: log level
        r1: format
        ...: variadic
    - name: FatalError
      address:
        EU: 0x200C2E4
        NA: 0x200C25C
        JP: 0x200C25C
      description: |-
        Logs some debug messages, then hangs the process.
        
        This function is called in lots of places to bail on a fatal error. Looking at the static data callers use to fill in the program position info is informative, as it tells you the original file name (probably from the standard __FILE__ macro) and line number (probably from the standard __LINE__ macro) in the source code.
        
        r0: program position info
        r1: format
        ...: variadic
    - name: OpenAllPackFiles
      address:
        EU: 0x200C364
        NA: 0x200C2DC
        JP: 0x200C2DC
      description: |-
        Open the 6 files at PACK_FILE_PATHS_TABLE into PACK_FILE_OPENED. Called during game initialisation.
        
        No params.
    - name: GetFileLengthInPackWithPackNb
      address:
        EU: 0x200C3C4
        NA: 0x200C33C
        JP: 0x200C33C
      description: |-
        Call GetFileLengthInPack after looking up the global Pack archive by its number
        
        r0: pack file number
        r1: file number
        return: size of the file in bytes from the Pack Table of Content
    - name: LoadFileInPackWithPackId
      address:
        EU: 0x200C3E4
        NA: 0x200C35C
        JP: 0x200C35C
      description: |-
        Call LoadFileInPack after looking up the global Pack archive by its identifier
        
        r0: pack file identifier
        r1: [output] target buffer
        r2: file index
        return: number of read bytes (identical to the length of the pack from the Table of Content)
    - name: AllocAndLoadFileInPack
      address:
        EU: 0x200C410
        NA: 0x200C388
        JP: 0x200C388
      description: |-
        Allocate a file and load a file from the pack archive inside.
        The data pointed by the pointer in the output need to be freed once is not needed anymore.
        
        r0: pack file identifier
        r1: file index
        r2: [output] result struct (will contain length and pointer)
        r3: allocation flags
    - name: OpenPackFile
      address:
        EU: 0x200C468
        NA: 0x200C3E0
        JP: 0x200C3E0
      description: |-
        Open a Pack file, to be read later. Initialise the output structure.
        
        r0: [output] pack file struct
        r1: file name
    - name: GetFileLengthInPack
      address:
        EU: 0x200C4FC
        NA: 0x200C474
        JP: 0x200C474
      description: |-
        Get the length of a file entry from a Pack archive
        
        r0: pack file struct
        r1: file index
        return: size of the file in bytes from the Pack Table of Content
    - name: LoadFileInPack
      address:
        EU: 0x200C50C
        NA: 0x200C484
        JP: 0x200C484
      description: |-
        Load the indexed file from the Pack archive, itself loaded from the ROM.
        
        r0: pack file struct
        r1: [output] target buffer
        r2: file index
        return: number of read bytes (identical to the length of the pack from the Table of Content)
    - name: GetItemCategoryVeneer
      address:
        EU: 0x200CB78
        NA: 0x200CAF0
      description: |-
        Likely a linker-generated veneer for GetItemCategory.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: Item ID
        return: Category ID
    - name: IsThrownItem
      address:
        EU: 0x200CB98
        NA: 0x200CB10
        JP: 0x200CB10
      description: |-
        Checks if a given item ID is a thrown item (CATEGORY_THROWN_LINE or CATEGORY_THROWN_ARC).
        
        r0: item ID
        return: bool
    - name: IsNotMoney
      address:
        EU: 0x200CBB4
        NA: 0x200CB2C
        JP: 0x200CB2C
      description: |-
        Checks if an item ID is not ITEM_POKE.
        
        r0: item ID
        return: bool
    - name: IsAuraBow
      address:
        EU: 0x200CC9C
        NA: 0x200CC14
        JP: 0x200CC14
      description: |-
        Checks if an item is one of the aura bows received at the start of the game.
        
        r0: item ID
        return: bool
    - name: InitItem
      address:
        EU: 0x200CF24
        NA: 0x200CE9C
        JP: 0x200CE9C
      description: |-
        Initialize an item struct with the given information.
        
        This will resolve the quantity based on the item type. For Poké, the quantity code will always be set to 1. For thrown items, the quantity code will be randomly generated on the range of valid quantities for that item type. For non-stackable items, the quantity code will always be set to 0. Otherwise, the quantity will be assigned from the quantity argument.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: quantity
        r3: sticky flag
    - name: InitStandardItem
      address:
        EU: 0x200CFE0
        NA: 0x200CF58
        JP: 0x200CF58
      description: |-
        Wrapper around InitItem with quantity set to 0.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: sticky flag
    - name: SprintfStatic
      address:
        EU:
          - 0x200D6BC
          - 0x200E808
          - 0x2013800
          - 0x20177C4
          - 0x2017ADC
          - 0x202378C
          - 0x20239B0
          - 0x203822C
          - 0x2039734
          - 0x203AC6C
          - 0x203D2A0
          - 0x2041A48
          - 0x2042DA0
          - 0x2052750
          - 0x2054DDC
          - 0x2060D64
        NA:
          - 0x200D634
          - 0x200E990
          - 0x2013758
          - 0x20176E4
          - 0x2017A40
          - 0x2023590
          - 0x202378C
          - 0x2037F30
          - 0x2039438
          - 0x203CFA4
          - 0x2042A84
          - 0x2052418
          - 0x2054A60
          - 0x20609E8
      description: |-
        Functionally the same as Sprintf, just defined statically in many different places.
        
        Since this is essentially just a wrapper around vsprintf(3), this function was probably statically defined in a header somewhere and included in a bunch of different places. See the actual Sprintf for the one in libc.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: GetExclusiveItemOffsetEnsureValid
      address:
        EU: 0x200E84C
        NA: 0x200E77C
        JP: 0x200E7AC
      description: |-
        Gets the exclusive item offset, which is the item ID relative to that of the first exclusive item, the Prism Ruff.
        
        If the given item ID is not a valid item ID, ITEM_PLAIN_SEED (0x55) is returned. This is a bug, since 0x55 is the valid exclusive item offset for the Icy Globe.
        
        r0: item ID
        return: offset
    - name: IsItemValid
      address:
        EU: 0x200E890
        NA: 0x200E7C0
        JP: 0x200E7F0
      description: |-
        Checks if an item ID is valid(?).
        
        r0: item ID
        return: bool
    - name: GetItemCategory
      address:
        EU: 0x200E8D8
        NA: 0x200E808
        JP: 0x200E838
      description: |-
        Returns the category of the specified item
        
        r0: Item ID
        return: Item category
    - name: EnsureValidItem
      address:
        EU: 0x200E8F8
        NA: 0x200E828
        JP: 0x200E858
      description: |-
        Checks if the given item ID is valid (using IsItemValid). If so, return the given item ID. Otherwise, return ITEM_PLAIN_SEED.
        
        r0: item ID
        return: valid item ID
    - name: GetThrownItemQuantityLimit
      address:
        EU: 0x200EB00
        NA: 0x200EA58
        JP: 0x200EA88
      description: |-
        Get the minimum or maximum quantity for a given thrown item ID.
        
        r0: item ID
        r1: 0 for minimum, 1 for maximum
        return: minimum/maximum quantity for the given item ID
    - name: SetMoneyCarried
      address:
        EU: 0x200EDC4
        NA: 0x200ED1C
        JP: 0x200ED4C
      description: |-
        Sets the amount of money the player is carrying, clamping the value to the range [0, MAX_MONEY_CARRIED].
        
        r0: new value
    - name: IsBagFull
      address:
        EU: 0x200EE68
        NA: 0x200EDC0
        JP: 0x200EDF0
      description: |-
        Implements SPECIAL_PROC_IS_BAG_FULL (see ScriptSpecialProcessCall).
        
        return: bool
    - name: CountItemTypeInBag
      address:
        EU: 0x200EF30
        NA: 0x200EE88
        JP: 0x200EEB8
      description: |-
        Implements SPECIAL_PROC_COUNT_ITEM_TYPE_IN_BAG (see ScriptSpecialProcessCall).
        
        r0: item ID
        return: number of items of the specified ID in the bag
    - name: IsItemInBag
      address:
        EU: 0x200EF88
        NA: 0x200EEE0
        JP: 0x200EF10
      description: |-
        Checks if an item is in the player's bag.
        
        r0: item ID
        return: bool
    - name: AddItemToBag
      address:
        EU: 0x200F8F4
        NA: 0x200F84C
        JP: 0x200F81C
      description: |-
        Implements SPECIAL_PROC_ADD_ITEM_TO_BAG (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: ScriptSpecialProcess0x39
      address:
        EU: 0x200FDFC
        NA: 0x200FD54
        JP: 0x200FD24
      description: |-
        Implements SPECIAL_PROC_0x39 (see ScriptSpecialProcessCall).
        
        return: bool
    - name: CountItemTypeInStorage
      address:
        EU: 0x200FF8C
        NA: 0x200FEE4
        JP: 0x200FEB4
      description: |-
        Implements SPECIAL_PROC_COUNT_ITEM_TYPE_IN_STORAGE (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: number of items of the specified ID in storage
    - name: RemoveItemsTypeInStorage
      address:
        EU: 0x201028C
        NA: 0x20101E4
        JP: 0x20101B4
      description: |-
        Probably? Implements SPECIAL_PROC_0x2A (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: AddItemToStorage
      address:
        EU: 0x20103C4
        NA: 0x201031C
        JP: 0x20102EC
      description: |-
        Implements SPECIAL_PROC_ADD_ITEM_TO_STORAGE (see ScriptSpecialProcessCall).
        
        r0: pointer to an owned_item
        return: bool
    - name: SetMoneyStored
      address:
        EU: 0x20107CC
        NA: 0x2010724
        JP: 0x20106F4
      description: |-
        Sets the amount of money the player has stored in the Duskull Bank, clamping the value to the range [0, MAX_MONEY_STORED].
        
        r0: new value
    - name: GetExclusiveItemOffset
      address:
        EU: 0x2010EE8
        NA: 0x2010E40
        JP: 0x2010E10
      description: |-
        Gets the exclusive item offset, which is the item ID relative to that of the first exclusive item, the Prism Ruff.
        
        r0: item ID
        return: offset
    - name: ApplyExclusiveItemStatBoosts
      address:
        EU: 0x2010F0C
        NA: 0x2010E64
        JP: 0x2010E34
      description: |-
        Applies stat boosts from an exclusive item.
        
        r0: item ID
        r1: pointer to attack stat to modify
        r2: pointer to special attack stat to modify
        r3: pointer to defense stat to modify
        stack[0]: pointer to special defense stat to modify
    - name: SetExclusiveItemEffect
      address:
        EU: 0x2011028
        NA: 0x2010F80
        JP: 0x2010F50
      description: |-
        Sets the bit for an exclusive item effect.
        
        r0: pointer to the effects bitvector to modify
        r1: exclusive item effect ID
    - name: ExclusiveItemEffectFlagTest
      address:
        EU: 0x201104C
        NA: 0x2010FA4
        JP: 0x2010F74
      description: |-
        Tests the exclusive item bitvector for a specific exclusive item effect.
        
        r0: the effects bitvector to test
        r1: exclusive item effect ID
        return: bool
    - name: ApplyGummiBoostsGroundMode
      address:
        EU: 0x2011944
        NA: 0x201189C
        JP: 0x201186C
      description: |-
        Applies the IQ boosts from eating a Gummi to the target monster.
        
        r0: Pointer to something
        r1: Pointer to something
        r2: Pointer to something
        r3: Pointer to something
        stack[0]: ?
        stack[1]: ?
        stack[2]: Pointer to a buffer to store some result into
    - name: GetMoveTargetAndRange
      address:
        EU: 0x20138E8
        NA: 0x2013840
        JP: 0x2013810
      description: |-
        Gets the move target-and-range field. See struct move_target_and_range in the C headers.
        
        r0: move pointer
        r1: AI flag (every move has two target-and-range fields, one for players and one for AI)
        return: move target and range
    - name: GetMoveType
      address:
        EU: 0x201390C
        NA: 0x2013864
        JP: 0x2013834
      description: |-
        Gets the type of a move
        
        r0: Pointer to move data
        return: Type of the move
    - name: GetMoveAiWeight
      address:
        EU: 0x2013A34
        NA: 0x201398C
        JP: 0x201395C
      description: |-
        Gets the AI weight of a move
        
        r0: Pointer to move data
        return: AI weight of the move
    - name: GetMoveBasePower
      address:
        EU: 0x2013A74
        NA: 0x20139CC
        JP: 0x201399C
      description: |-
        Gets the base power of a move from the move data table.
        
        r0: move pointer
        return: base power
    - name: GetMoveAccuracyOrAiChance
      address:
        EU: 0x2013AB4
        NA: 0x2013A0C
        JP: 0x20139DC
      description: |-
        Gets one of the two accuracy values of a move or its ai_condition_random_chance field.
        
        r0: Move pointer
        r1: 0 to get the move's first accuracy1 field, 1 to get its accuracy2, 2 to get its ai_condition_random_chance.
        return: Move's accuracy1, accuracy2 or ai_condition_random_chance
    - name: GetMaxPp
      address:
        EU: 0x2013AF8
        NA: 0x2013A50
        JP: 0x2013A20
      description: |-
        Gets the maximum PP for a given move.
        
        r0: move pointer
        return: max PP for the given move, capped at 99
    - name: GetMoveCritChance
      address:
        EU: 0x2013BB8
        NA: 0x2013B10
        JP: 0x2013AE0
      description: |-
        Gets the critical hit chance of a move.
        
        r0: move pointer
        return: base power
    - name: IsMoveRangeString19
      address:
        EU: 0x2013CAC
        NA: 0x2013C04
        JP: 0x2013BD4
      description: |-
        Returns whether a move's range string is 19 ("User").
        
        r0: Move pointer
        return: True if the move's range string field has a value of 19.
    - name: IsRecoilMove
      address:
        EU: 0x2013EBC
        NA: 0x2013E14
      description: |-
        Checks if the given move is a recoil move (affected by Reckless).
        
        r0: move ID
        return: bool
    - name: IsPunchMove
      address:
        EU: 0x2014DC0
        NA: 0x2014D18
      description: |-
        Checks if the given move is a punch move (affected by Iron Fist).
        
        r0: move ID
        return: bool
    - name: GetMoveCategory
      address:
        EU: 0x2015270
        NA: 0x20151C8
        JP: 0x2015198
      description: |-
        Gets a move's category (physical, special, status).
        
        r0: move ID
        return: move category enum
    - name: LoadWteFromRom
      address:
        EU: 0x201DEE8
        NA: 0x201DE4C
        JP: 0x201DEA4
      description: |-
        Loads a SIR0-wrapped WTE file from ROM, and returns a handle to it
        
        r0: [output] pointer to wte handle
        r1: file path string
        r2: load file flags
    - name: LoadWteFromFileDirectory
      address:
        EU: 0x201DF60
        NA: 0x201DEC4
        JP: 0x201DF1C
      description: |-
        Loads a SIR0-wrapped WTE file from a file directory, and returns a handle to it
        
        r0: [output] pointer to wte handle
        r1: file directory id
        r2: file index
        r3: malloc flags
    - name: UnloadWte
      address:
        EU: 0x201DFB4
        NA: 0x201DF18
        JP: 0x201DF70
      description: |-
        Frees the buffer used to store the WTE data in the handle, and sets both pointers to null
        
        r0: pointer to wte handle
    - name: HandleSir0Translation
      address:
        EU: 0x201F550
        NA: 0x201F4B4
        JP: 0x201F50C
      description: |-
        Translates the offsets in a SIR0 file into NDS memory addresses, changes the magic number to SirO (opened), and returns a pointer to the first pointer specified in the SIR0 header (beginning of the data).
        
        r0: [output] double pointer to beginning of data
        r1: pointer to source file buffer
    - name: HandleSir0TranslationVeneer
      address:
        EU: 0x201F628
        NA: 0x201F58C
      description: |-
        Likely a linker-generated veneer for HandleSir0Translation.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: [output] double pointer to beginning of data
        r1: pointer to source file buffer
    - name: GetLanguageType
      address:
        EU: 0x2020688
        NA: 0x20205A0
        JP: 0x20205F8
      description: |-
        Gets the language type.
        
        This is the value backing the special LANGUAGE_TYPE script variable.
        
        return: language type
    - name: GetLanguage
      address:
        EU: 0x20206B0
        NA: 0x20205B0
        JP: 0x2020608
      description: |-
        Gets the single-byte language ID of the current program.
        
        The language ID appears to be used to index some global tables.
        
        return: language ID
    - name: PreprocessString
      address:
        EU: 0x20225EC
        NA: 0x20223F0
        JP: 0x2022440
      description: |-
        An enhanced sprintf, which recognizes certain tags and replaces them with appropiate game values.
        This function can also be used to simply insert values passed within the preprocessor args
        
        The tags utilized for this function are lowercase, it might produce uppercase tags
        that only are used when the text is being typewrited into a message box
        
        r0: [output] formatted string
        r1: maximum capacity of the output buffer
        r2: input format string
        r3: preprocessor flags
        stack[0]: pointer to preprocessor args
    - name: StrcpySimple
      address:
        EU: 0x20253CC
        NA: 0x2025100
        JP: 0x2025150
      description: |-
        A simple implementation of the strcpy(3) C library function.
        
        This function was probably manually implemented by the developers. See Strcpy for what's probably the real libc function.
        
        r0: dest
        r1: src
    - name: StrncpySimple
      address:
        EU: 0x20253E8
        NA: 0x202511C
        JP: 0x202516C
      description: |-
        A simple implementation of the strncpy(3) C library function.
        
        This function was probably manually implemented by the developers. See Strncpy for what's probably the real libc function.
        
        r0: dest
        r1: src
        r2: n
    - name: StringFromMessageId
      address:
        EU: 0x2025B90
        NA: 0x20258C4
        JP: 0x20258A4
      description: |-
        Gets the string corresponding to a given message ID.
        
        r0: message ID
        return: string from the string files with the given message ID
    - name: SetScreenWindowsColor
      address:
        EU: 0x2027D5C
        NA: 0x2027A68
        JP: 0x2027DC8
      description: |-
        Sets the palette of the frames of windows in the specified screen
        
        r0: palette index
        r1: is upper screen
    - name: SetBothScreensWindowsColor
      address:
        EU: 0x2027D74
        NA: 0x2027A80
        JP: 0x2027DE0
      description: |-
        Sets the palette of the frames of windows in both screens
        
        r0: palette index
    - name: GetNotifyNote
      address:
        EU: 0x20487BC
        NA: 0x20484A0
      description: |-
        Returns the current value of NOTIFY_NOTE.
        
        return: bool
    - name: SetNotifyNote
      address:
        EU: 0x20487CC
        NA: 0x20484B0
      description: |-
        Sets NOTIFY_NOTE to the given value.
        
        r0: bool
    - name: InitMainTeamAfterQuiz
      address:
        EU: 0x2048AE0
        NA: 0x20487C4
        JP: 0x2048B30
      description: |-
        Implements SPECIAL_PROC_INIT_MAIN_TEAM_AFTER_QUIZ (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x3
      address:
        EU: 0x2048D28
        NA: 0x2048A0C
        JP: 0x2048D78
      description: |-
        Implements SPECIAL_PROC_0x3 (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x4
      address:
        EU: 0x2048DA0
        NA: 0x2048A84
        JP: 0x2048DF0
      description: |-
        Implements SPECIAL_PROC_0x4 (see ScriptSpecialProcessCall).
        
        No params.
    - name: NoteSaveBase
      address:
        EU: 0x20492A0
        NA: 0x2048F84
        JP: 0x20492F0
      description: |-
        Probably related to saving or quicksaving?
        
        This function prints the debug message "NoteSave Base %d %d" with some values. It's also the only place where GetRngSeed is called.
        
        r0: possibly a flag/code that controls the type of save file to generate?
        others: ?
        return: status code
    - name: NoteLoadBase
      address:
        EU: 0x20496A8
        NA: 0x2049370
        JP: 0x20496DC
      description: |-
        Probably related to loading a save file or quicksave?
        
        This function prints the debug message "NoteLoad Base %d" with some value. It's also the only place where SetRngSeed is called.
        
        return: status code
    - name: GetGameMode
      address:
        EU: 0x204B2F8
        NA: 0x204AFC0
      description: |-
        Gets the value of GAME_MODE.
        
        return: game mode
    - name: InitScriptVariableValues
      address:
        EU: 0x204B384
        NA: 0x204B04C
        JP: 0x204B3B4
      description: |-
        Initialize the script variable values table (SCRIPT_VARS_VALUES).
        
        The whole table is first zero-initialized. Then, all script variable values are first initialized to their defaults, after which some of them are overwritten with other hard-coded values.
        
        No params.
    - name: InitEventFlagScriptVars
      address:
        EU: 0x204B63C
        NA: 0x204B304
      description: |-
        Initializes an assortment of event flag script variables (see the code for an exhaustive list).
        
        No params.
    - name: ZinitScriptVariable
      address:
        EU: 0x204B76C
        NA: 0x204B434
        JP: 0x204B794
      description: |-
        Zero-initialize the values of the given script variable.
        
        r0: pointer to the local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
    - name: LoadScriptVariableRaw
      address:
        EU: 0x204B7D4
        NA: 0x204B49C
        JP: 0x204B7FC
      description: |-
        Loads a script variable descriptor for a given ID.
        
        r0: [output] script variable descriptor pointer
        r1: pointer to the local variable table (doesn't need to be valid; just controls the output value pointer)
        r2: script variable ID
    - name: LoadScriptVariableValue
      address:
        EU: 0x204B824
        NA: 0x204B4EC
        JP: 0x204B84C
      description: |-
        Loads the value of a script variable.
        
        r0: pointer to the local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
        return: value
    - name: LoadScriptVariableValueAtIndex
      address:
        EU: 0x204B9B0
        NA: 0x204B678
        JP: 0x204B9D8
      description: |-
        Loads the value of a script variable at some index (for script variables that are arrays).
        
        r0: pointer to the local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
        r2: value index for the given script var
        return: value
    - name: SaveScriptVariableValue
      address:
        EU: 0x204BB58
        NA: 0x204B820
        JP: 0x204BB80
      description: |-
        Saves the given value to a script variable.
        
        r0: pointer to local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
        r2: value to save
    - name: SaveScriptVariableValueAtIndex
      address:
        EU: 0x204BCC0
        NA: 0x204B988
        JP: 0x204BCE8
      description: |-
        Saves the given value to a script variable at some index (for script variables that are arrays).
        
        r0: pointer to local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
        r2: value index for the given script var
        r3: value to save
    - name: LoadScriptVariableValueSum
      address:
        EU: 0x204BE38
        NA: 0x204BB00
        JP: 0x204BE60
      description: |-
        Loads the sum of all values of a given script variable (for script variables that are arrays).
        
        r0: pointer to the local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID
        return: sum of values
    - name: LoadScriptVariableValueBytes
      address:
        EU: 0x204BE9C
        NA: 0x204BB64
        JP: 0x204BEC4
      description: |-
        Loads some number of bytes from the value of a given script variable.
        
        r0: script variable ID
        r1: [output] script variable value bytes
        r2: number of bytes to load
    - name: SaveScriptVariableValueBytes
      address:
        EU: 0x204BF04
        NA: 0x204BBCC
        JP: 0x204BF2C
      description: |-
        Saves some number of bytes to the given script variable.
        
        r0: script variable ID
        r1: bytes to save
        r2: number of bytes
    - name: ScriptVariablesEqual
      address:
        EU: 0x204BF50
        NA: 0x204BC18
        JP: 0x204BF78
      description: |-
        Checks if two script variables have equal values. For arrays, compares elementwise for the length of the first variable.
        
        r0: pointer to the local variable table (only needed if id >= VAR_LOCAL0)
        r1: script variable ID 1
        r2: script variable ID 2
        return: true if values are equal, false otherwise
    - name: EventFlagBackup
      address:
        EU: 0x204C51C
        NA: 0x204C1E4
        JP: 0x204C544
      description: |-
        Saves event flag script variables (see the code for an exhaustive list) to their respective BACKUP script variables, but only in certain game modes.
        
        This function prints the debug string "EventFlag BackupGameMode %d" with the game mode.
        
        No params.
    - name: DumpScriptVariableValues
      address:
        EU: 0x204C740
        NA: 0x204C408
        JP: 0x204C768
      description: |-
        Runs EventFlagBackup, then copies the script variable values table (SCRIPT_VARS_VALUES) to the given pointer.
        
        r0: destination pointer for the data dump
        return: always 1
    - name: RestoreScriptVariableValues
      address:
        EU: 0x204C768
        NA: 0x204C430
        JP: 0x204C790
      description: |-
        Restores the script variable values table (SCRIPT_VARS_VALUES) with the given data. The source data is assumed to be exactly 1024 bytes in length.
        
        r0: raw data to copy to the values table
        return: whether the restored value for VAR_VERSION is equal to its default value
    - name: InitScenarioScriptVars
      address:
        EU: 0x204C7C0
        NA: 0x204C488
        JP: 0x204C7E8
      description: |-
        Initializes most of the SCENARIO_* script variables (except SCENARIO_TALK_BIT_FLAG for some reason). Also initializes the PLAY_OLD_GAME variable.
        
        No params.
    - name: SetScenarioScriptVar
      address:
        EU: 0x204C950
        NA: 0x204C618
        JP: 0x204C978
      description: |-
        Sets the given SCENARIO_* script variable with a given pair of values [val0, val1].
        
        In the special case when the ID is VAR_SCENARIO_MAIN, and the set value is different from the old one, the REQUEST_CLEAR_COUNT script variable will be set to 0.
        
        r0: script variable ID
        r1: val0
        r2: val1
    - name: GetSpecialEpisodeType
      address:
        EU: 0x204CC24
        NA: 0x204C8EC
        JP: 0x204CC4C
      description: |-
        Gets the special episode type from the SPECIAL_EPISODE_TYPE script variable.
        
        return: special episode type
    - name: ScenarioFlagBackup
      address:
        EU: 0x204CFF0
        NA: 0x204CCB8
        JP: 0x204D018
      description: |-
        Saves scenario flag script variables (SCENARIO_SELECT, SCENARIO_MAIN_BIT_FLAG) to their respective BACKUP script variables, but only in certain game modes.
        
        This function prints the debug string "ScenarioFlag BackupGameMode %d" with the game mode.
        
        No params.
    - name: InitWorldMapScriptVars
      address:
        EU: 0x204D0C0
        NA: 0x204CD88
        JP: 0x204D0E8
      description: |-
        Initializes the WORLD_MAP_* script variable values (IDs 0x55-0x57).
        
        No params.
    - name: InitDungeonListScriptVars
      address:
        EU: 0x204D1C8
        NA: 0x204CE90
        JP: 0x204D1F0
      description: |-
        Initializes the DUNGEON_*_LIST script variable values (IDs 0x4f-0x54).
        
        No params.
    - name: GlobalProgressAlloc
      address:
        EU: 0x204D440
        NA: 0x204D108
        JP: 0x204D468
      description: |-
        Allocates a new global progress struct.
        
        This updates the global pointer and returns a copy of that pointer.
        
        return: pointer to a newly allocated global progress struct
    - name: ResetGlobalProgress
      address:
        EU: 0x204D468
        NA: 0x204D130
        JP: 0x204D490
      description: |-
        Zero-initializes the global progress struct.
        
        No params.
    - name: HasMonsterBeenAttackedInDungeons
      address:
        EU: 0x204D540
        NA: 0x204D208
        JP: 0x204D568
      description: |-
        Checks whether the specified monster has been attacked by the player at some point in their adventure during an exploration.
        
        The check is performed using the result of passing the ID to FemaleToMaleForm.
        
        r0: Monster ID
        return: True if the specified mosnter (after converting its ID through FemaleToMaleForm) has been attacked by the player before, false otherwise.
    - name: SetDungeonTipShown
      address:
        EU: 0x204D588
        NA: 0x204D250
        JP: 0x204D5B0
      description: |-
        Marks a dungeon tip as already shown to the player
        
        r0: Dungeon tip ID
    - name: GetDungeonTipShown
      address:
        EU: 0x204D5C8
        NA: 0x204D290
        JP: 0x204D5F0
      description: |-
        Checks if a dungeon tip has already been shown before or not.
        
        r0: Dungeon tip ID
        return: True if the tip has been shown before, false otherwise.
    - name: MonsterSpawnsEnabled
      address:
        EU: 0x204D698
        NA: 0x204D360
        JP: 0x204D6C0
      description: |-
        Always returns true.
        
        This function seems to be a debug switch that the developers may have used to disable the random enemy spawn. 
        If it returned false, the call to SpawnMonster inside TrySpawnMonsterAndTickSpawnCounter would not be executed.
        
        return: bool (always true)
    - name: GetNbFloors
      address:
        EU: 0x204F8B4
        NA: 0x204F57C
        JP: 0x204F8D4
      description: |-
        Returns the number of floors of the given dungeon.
        
        The result is hardcoded for certain dungeons, such as dojo mazes.
        
        r0: Dungeon ID
        return: Number of floors
    - name: GetNbFloorsPlusOne
      address:
        EU: 0x204F8EC
        NA: 0x204F5B4
        JP: 0x204F90C
      description: |-
        Returns the number of floors of the given dungeon + 1.
        
        r0: Dungeon ID
        return: Number of floors + 1
    - name: GetDungeonGroup
      address:
        EU: 0x204F900
        NA: 0x204F5C8
        JP: 0x204F920
      description: |-
        Returns the dungeon group associated to the given dungeon.
        
        For IDs greater or equal to dungeon_id::DUNGEON_NORMAL_FLY_MAZE, returns dungeon_group_id::DGROUP_MAROWAK_DOJO.
        
        r0: Dungeon ID
        return: Group ID
    - name: GetNbPrecedingFloors
      address:
        EU: 0x204F918
        NA: 0x204F5E0
      description: |-
        Given a dungeon ID, returns the total amount of floors summed by all the previous dungeons in its group.
        
        The value is normally pulled from dungeon_data_list_entry::n_preceding_floors_group, except for dungeons with an ID >= dungeon_id::DUNGEON_NORMAL_FLY_MAZE, for which this function always returns 0.
        
        r0: Dungeon ID
        return: Number of preceding floors of the dungeon
    - name: GetNbFloorsDungeonGroup
      address:
        EU: 0x204F930
        NA: 0x204F5F8
      description: |-
        Returns the total amount of floors among all the dungeons in the dungeon group of the specified dungeon.
        
        r0: Dungeon ID
        return: Total number of floors in the group of the specified dungeon
    - name: DungeonFloorToGroupFloor
      address:
        EU: 0x204F984
        NA: 0x204F64C
        JP: 0x204F9A4
      description: |-
        Given a dungeon ID and a floor number, returns a struct with the corresponding dungeon group and floor number in that group.
        
        The function normally uses the data in mappa_s.bin to calculate the result, but there's some dungeons (such as dojo mazes) that have hardcoded return values.
        
        r0: (output) Struct containing the dungeon group and floor group
        r1: Struct containing the dungeon ID and floor number
    - name: SetAdventureLogStructLocation
      address:
        EU: 0x204FD5C
        NA: 0x204FA24
        JP: 0x204FD70
      description: |-
        Sets the location of the adventure log struct in memory.
        
        Sets it in a static memory location (At 0x22AB69C [US], 0x22ABFDC [EU], 0x22ACE58 [JP])
        
        No params.
    - name: SetAdventureLogDungeonFloor
      address:
        EU: 0x204FD74
        NA: 0x204FA3C
        JP: 0x204FD88
      description: |-
        Sets the current dungeon floor pair.
        
        r0: struct dungeon_floor_pair
    - name: GetAdventureLogDungeonFloor
      address:
        EU: 0x204FD94
        NA: 0x204FA5C
        JP: 0x204FDA8
      description: |-
        Gets the current dungeon floor pair.
        
        return: struct dungeon_floor_pair
    - name: ClearAdventureLogStruct
      address:
        EU: 0x204FDA8
        NA: 0x204FA70
        JP: 0x204FDBC
      description: |-
        Clears the adventure log structure.
        
        No params.
    - name: SetAdventureLogCompleted
      address:
        EU: 0x204FED4
        NA: 0x204FB9C
        JP: 0x204FEE8
      description: |-
        Marks one of the adventure log entry as completed.
        
        r0: entry ID
    - name: IsAdventureLogNotEmpty
      address:
        EU: 0x204FEFC
        NA: 0x204FBC4
        JP: 0x204FF10
      description: |-
        Checks if at least one of the adventure log entry is completed.
        
        return: bool
    - name: GetAdventureLogCompleted
      address:
        EU: 0x204FF34
        NA: 0x204FBFC
        JP: 0x204FF48
      description: |-
        Checks if one adventure log entry is completed.
        
        r0: entry ID
        return: bool
    - name: IncrementNbDungeonsCleared
      address:
        EU: 0x204FF60
        NA: 0x204FC28
        JP: 0x204FF74
      description: |-
        Increments by 1 the number of dungeons cleared.
        
        Implements SPECIAL_PROC_0x3A (see ScriptSpecialProcessCall).
        
        No params.
    - name: GetNbDungeonsCleared
      address:
        EU: 0x204FFA4
        NA: 0x204FC6C
        JP: 0x204FFB8
      description: |-
        Gets the number of dungeons cleared.
        
        return: the number of dungeons cleared
    - name: IncrementNbFriendRescues
      address:
        EU: 0x204FFB8
        NA: 0x204FC80
        JP: 0x204FFCC
      description: |-
        Increments by 1 the number of successful friend rescues.
        
        No params.
    - name: GetNbFriendRescues
      address:
        EU: 0x2050000
        NA: 0x204FCC8
        JP: 0x2050014
      description: |-
        Gets the number of successful friend rescues.
        
        return: the number of successful friend rescues
    - name: IncrementNbEvolutions
      address:
        EU: 0x2050014
        NA: 0x204FCDC
        JP: 0x2050028
      description: |-
        Increments by 1 the number of evolutions.
        
        No params.
    - name: GetNbEvolutions
      address:
        EU: 0x205005C
        NA: 0x204FD24
        JP: 0x2050070
      description: |-
        Gets the number of evolutions.
        
        return: the number of evolutions
    - name: IncrementNbSteals
      address:
        EU: 0x2050070
        NA: 0x204FD38
        JP: 0x2050084
      description: |-
        Leftover from Time & Darkness. Does not do anything.
        
        Calls to this matches the ones for incrementing the number of successful steals in Time & Darkness.
        
        No params.
    - name: IncrementNbEggsHatched
      address:
        EU: 0x2050074
        NA: 0x204FD3C
        JP: 0x2050088
      description: |-
        Increments by 1 the number of eggs hatched.
        
        No params.
    - name: GetNbEggsHatched
      address:
        EU: 0x20500B0
        NA: 0x204FD78
        JP: 0x20500C4
      description: |-
        Gets the number of eggs hatched.
        
        return: the number of eggs hatched
    - name: GetNbPokemonJoined
      address:
        EU: 0x20500C4
        NA: 0x204FD8C
        JP: 0x20500D8
      description: |-
        Gets the number of different pokémon that joined.
        
        return: the number of different pokémon that joined
    - name: GetNbMovesLearned
      address:
        EU: 0x20500D8
        NA: 0x204FDA0
        JP: 0x20500EC
      description: |-
        Gets the number of different moves learned.
        
        return: the number of different moves learned
    - name: SetVictoriesOnOneFloor
      address:
        EU: 0x20500EC
        NA: 0x204FDB4
        JP: 0x2050100
      description: |-
        Sets the record of victories on one floor.
        
        r0: the new record of victories
    - name: GetVictoriesOnOneFloor
      address:
        EU: 0x2050120
        NA: 0x204FDE8
        JP: 0x2050134
      description: |-
        Gets the record of victories on one floor.
        
        return: the record of victories
    - name: SetPokemonJoined
      address:
        EU: 0x2050134
        NA: 0x204FDFC
        JP: 0x2050148
      description: |-
        Marks one pokémon as joined.
        
        r0: monster ID
    - name: SetPokemonBattled
      address:
        EU: 0x2050190
        NA: 0x204FE58
        JP: 0x20501A4
      description: |-
        Marks one pokémon as battled.
        
        r0: monster ID
    - name: GetNbPokemonBattled
      address:
        EU: 0x20501EC
        NA: 0x204FEB4
        JP: 0x2050200
      description: |-
        Gets the number of different pokémon that battled against you.
        
        return: the number of different pokémon that battled against you
    - name: IncrementNbBigTreasureWins
      address:
        EU: 0x2050200
        NA: 0x204FEC8
        JP: 0x2050214
      description: |-
        Increments by 1 the number of big treasure wins.
        
        Implements SPECIAL_PROC_0x3B (see ScriptSpecialProcessCall).
        
        No params.
    - name: SetNbBigTreasureWins
      address:
        EU: 0x2050220
        NA: 0x204FEE8
        JP: 0x2050234
      description: |-
        Sets the number of big treasure wins.
        
        r0: the new number of big treasure wins
    - name: GetNbBigTreasureWins
      address:
        EU: 0x2050258
        NA: 0x204FF20
        JP: 0x205026C
      description: |-
        Gets the number of big treasure wins.
        
        return: the number of big treasure wins
    - name: SetNbRecycled
      address:
        EU: 0x205026C
        NA: 0x204FF34
        JP: 0x2050280
      description: |-
        Sets the number of items recycled.
        
        r0: the new number of items recycled
    - name: GetNbRecycled
      address:
        EU: 0x20502A4
        NA: 0x204FF6C
        JP: 0x20502B8
      description: |-
        Gets the number of items recycled.
        
        return: the number of items recycled
    - name: IncrementNbSkyGiftsSent
      address:
        EU: 0x20502B8
        NA: 0x204FF80
        JP: 0x20502CC
      description: |-
        Increments by 1 the number of sky gifts sent.
        
        Implements SPECIAL_PROC_SEND_SKY_GIFT_TO_GUILDMASTER (see ScriptSpecialProcessCall).
        
        No params.
    - name: SetNbSkyGiftsSent
      address:
        EU: 0x20502D8
        NA: 0x204FFA0
        JP: 0x20502EC
      description: |-
        Sets the number of Sky Gifts sent.
        
        return: the number of Sky Gifts sent
    - name: GetNbSkyGiftsSent
      address:
        EU: 0x2050310
        NA: 0x204FFD8
        JP: 0x2050324
      description: |-
        Gets the number of Sky Gifts sent.
        
        return: the number of Sky Gifts sent
    - name: ComputeSpecialCounters
      address:
        EU: 0x2050324
        NA: 0x204FFEC
        JP: 0x2050338
      description: |-
        Computes the counters from the bit fields in the adventure log, as they are not updated automatically when bit fields are altered.
        
        Affects GetNbPokemonJoined, GetNbMovesLearned, GetNbPokemonBattled and GetNbItemAcquired.
        
        No params.
    - name: RecruitSpecialPokemonLog
      address:
        EU: 0x205057C
        NA: 0x2050244
        JP: 0x2050590
      description: |-
        Marks a specified special pokémon as recruited in the adventure log.
        
        r0: monster ID
    - name: IncrementNbFainted
      address:
        EU: 0x20505E8
        NA: 0x20502B0
        JP: 0x20505FC
      description: |-
        Increments by 1 the number of times you fainted.
        
        No params.
    - name: GetNbFainted
      address:
        EU: 0x2050624
        NA: 0x20502EC
        JP: 0x2050638
      description: |-
        Gets the number of times you fainted.
        
        return: the number of times you fainted
    - name: SetItemAcquired
      address:
        EU: 0x2050638
        NA: 0x2050300
        JP: 0x205064C
      description: |-
        Marks one specific item as acquired.
        
        r0: item ID
    - name: GetNbItemAcquired
      address:
        EU: 0x2050704
        NA: 0x20503CC
        JP: 0x2050718
      description: |-
        Gets the number of items acquired.
        
        return: the number of items acquired
    - name: SetChallengeLetterCleared
      address:
        EU: 0x2050758
        NA: 0x2050420
        JP: 0x205076C
      description: |-
        Sets a challenge letter as cleared.
        
        r0: challenge ID
    - name: GetSentryDutyGamePoints
      address:
        EU: 0x20507DC
        NA: 0x20504A4
        JP: 0x20507F0
      description: |-
        Gets the points for the associated rank in the footprints minigame.
        
        r0: the rank (range 0-4, 1st to 5th)
        return: points
    - name: SetSentryDutyGamePoints
      address:
        EU: 0x20507F4
        NA: 0x20504BC
        JP: 0x2050808
      description: |-
        Sets a new record in the footprints minigame.
        
        r0: points
        return: the rank (range 0-4, 1st to 5th; -1 if out of ranking)
    - name: SubFixedPoint
      address:
        EU: 0x2051248
        NA: 0x2050F10
        JP: 0x2051260
      description: |-
        Compute the subtraction of two decimal fixed-point numbers (16 fraction bits).
        
        Numbers are in the format {16-bit integer part, 16-bit thousandths}, where the integer part is the lower word. Probably used primarily for belly.
        
        r0: number
        r1: decrement
        return: max(number - decrement, 0)
    - name: BinToDecFixedPoint
      address:
        EU: 0x2051358
        NA: 0x2051020
        JP: 0x2051370
      description: |-
        Convert a binary fixed-point number (16 fraction bits) to the decimal fixed-point number (16 fraction bits) used for belly calculations. Thousandths are floored.
        
        If <data> holds the raw binary data, a binary fixed-point number (16 fraction bits) has the value ((unsigned)data) * 2^-16), and the decimal fixed-point number (16 fraction bits) used for belly has the value (data & 0xffff) + (data >> 16)/1000.
        
        r0: pointer p, where ((const unsigned *)p)[1] is the fractional number in binary fixed-point format to convert
        return: fractional number in decimal fixed-point format
    - name: CeilFixedPoint
      address:
        EU: 0x205139C
        NA: 0x2051064
        JP: 0x20513B4
      description: |-
        Compute the ceiling of a decimal fixed-point number (16 fraction bits).
        
        Numbers are in the format {16-bit integer part, 16-bit thousandths}, where the integer part is the lower word. Probably used primarily for belly.
        
        r0: number
        return: ceil(number)
    - name: DungeonGoesUp
      address:
        EU: 0x20515C0
        NA: 0x2051288
        JP: 0x20515D8
      description: |-
        Returns whether the specified dungeon is considered as going upward or not
        
        r0: dungeon id
        return: bool
    - name: GetMaxRescueAttempts
      address:
        EU: 0x20516B8
        NA: 0x2051380
        JP: 0x20516D0
      description: |-
        Returns the maximum rescue attempts allowed in the specified dungeon.
        
        r0: dungeon id
        return: Max rescue attempts, or -1 if rescues are disabled.
    - name: GetLeaderChangeFlag
      address:
        EU: 0x20516F8
        NA: 0x20513C0
        JP: 0x2051710
      description: |-
        Returns true if the flag that allows changing leaders is set in the restrictions of the specified dungeon
        
        r0: dungeon id
        return: True if the restrictions of the current dungeon allow changing leaders, false otherwise.
    - name: JoinedAtRangeCheck
      address:
        EU: 0x20517C8
        NA: 0x2051490
        JP: 0x20517E0
      description: |-
        Returns whether a certain joined_at field value is between dungeon_id::DUNGEON_JOINED_AT_BIDOOF and dungeon_id::DUNGEON_DUMMY_0xE3.
        
        r0: joined_at id
        return: bool
    - name: JoinedAtRangeCheck2
      address:
        EU: 0x2051A98
        NA: 0x2051760
        JP: 0x2051AB0
      description: |-
        Returns whether a certain joined_at field value is equal to dungeon_id::DUNGEON_BEACH or is between dungeon_id::DUNGEON_DUMMY_0xEC and dungeon_id::DUNGEON_DUMMY_0xF0.
        
        r0: joined_at id
        return: bool
    - name: GetRankUpEntry
      address:
        EU: 0x2051B2C
        NA: 0x20517F4
      description: |-
        Gets the rank up data for the specified rank.
        
        r0: rank index
        return: struct rankup_table_entry*
    - name: GetMonsterGender
      address:
        EU: 0x2052AE0
        NA: 0x20527A8
        JP: 0x2052AE0
      description: |-
        Returns the gender field of a monster given its ID.
        
        r0: monster id
        return: monster gender
    - name: GetSpriteSize
      address:
        EU: 0x2052B18
        NA: 0x20527E0
        JP: 0x2052B18
      description: |-
        Returns the sprite size of the specified monster. If the size is between 1 and 6, 6 will be returned.
        
        r0: monster id
        return: sprite size
    - name: GetSpriteFileSize
      address:
        EU: 0x2052B54
        NA: 0x205281C
        JP: 0x2052B54
      description: |-
        Returns the sprite file size of the specified monster.
        
        r0: monster id
        return: sprite file size
    - name: GetCanMoveFlag
      address:
        EU: 0x2052BEC
        NA: 0x20528B4
        JP: 0x2052BEC
      description: |-
        Returns the flag that determines if a monster can move in dungeons.
        
        r0: Monster ID
        return: "Can move" flag
    - name: GetMonsterPreEvolution
      address:
        EU: 0x2052CE0
        NA: 0x20529A8
        JP: 0x2052CE0
      description: |-
        Returns the pre-evolution id of a monster given its ID.
        
        r0: monster id
        return: ID of the monster that evolves into the one specified in r0
    - name: GetEvolutions
      address:
        EU: 0x2054204
        NA: 0x2053E88
        JP: 0x20541C0
      description: |-
        Returns a list of all the possible evolutions for a given monster id.
        
        r0: Monster id
        r1: [Output] Array that will hold the list of monster ids the specified monster can evolve into
        r2: True to skip the check that prevents returning monsters with a different sprite size than the current one
        r3: True to skip the check that prevents Shedinja from being counted as a potential evolution
        return: Number of possible evolutions for the specified monster id
    - name: GetBaseForm
      address:
        EU: 0x20543A0
        NA: 0x2054024
        JP: 0x205435C
      description: |-
        Checks if the specified monster ID corresponds to any of the pokémon that have multiple forms and returns the ID of the base form if so. If it doesn't, the same ID is returned.
        
        Some of the pokémon included in the check are Unown, Cherrim and Deoxys.
        
        r0: Monster ID
        return: ID of the base form of the specified monster, or the same if the specified monster doesn't have a base form.
    - name: GetMonsterIdFromSpawnEntry
      address:
        EU: 0x20547FC
        NA: 0x2054480
        JP: 0x20547B8
      description: |-
        Returns the monster ID of the specified monster spawn entry
        
        r0: Pointer to the monster spawn entry
        return: monster_spawn_entry::id
    - name: GetMonsterLevelFromSpawnEntry
      address:
        EU: 0x2054834
        NA: 0x20544B8
        JP: 0x20547F0
      description: |-
        Returns the level of the specified monster spawn entry.
        
        r0: pointer to the monster spawn entry
        return: uint8_t
    - name: GetMonsterGenderVeneer
      address:
        EU: 0x2054ADC
        NA: 0x2054760
      description: |-
        Likely a linker-generated veneer for GetMonsterGender.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: monster id
        return: monster gender
    - name: IsUnown
      address:
        EU: 0x2054E04
        NA: 0x2054A88
        JP: 0x2054DC0
      description: |-
        Checks if a monster ID is an Unown.
        
        r0: monster ID
        return: bool
    - name: IsShaymin
      address:
        EU: 0x2054E20
        NA: 0x2054AA4
        JP: 0x2054DDC
      description: |-
        Checks if a monster ID is a Shaymin form.
        
        r0: monster ID
        return: bool
    - name: IsCastform
      address:
        EU: 0x2054E50
        NA: 0x2054AD4
        JP: 0x2054E0C
      description: |-
        Checks if a monster ID is a Castform form.
        
        r0: monster ID
        return: bool
    - name: IsCherrim
      address:
        EU: 0x2054EA8
        NA: 0x2054B2C
        JP: 0x2054E64
      description: |-
        Checks if a monster ID is a Cherrim form.
        
        r0: monster ID
        return: bool
    - name: IsDeoxys
      address:
        EU: 0x2054EF0
        NA: 0x2054B74
        JP: 0x2054EAC
      description: |-
        Checks if a monster ID is a Deoxys form.
        
        r0: monster ID
        return: bool
    - name: FemaleToMaleForm
      address:
        EU: 0x2054F5C
        NA: 0x2054BE0
        JP: 0x2054F18
      description: |-
        Returns the ID of the first form of the specified monster if the specified ID corresponds to a secondary form with female gender and the first form has male gender. If those conditions don't meet, returns the same ID unchanged.
        
        r0: Monster ID
        return: ID of the male form of the monster if the requirements meet, same ID otherwise.
    - name: IsMonsterOnTeam
      address:
        EU: 0x20554C4
        NA: 0x2055148
        JP: 0x2055480
      description: |-
        Checks if a given monster is on the exploration team (not necessarily the active party)?
        
        r0: monster ID
        r1: ?
        return: bool
    - name: GetHeroData
      address:
        EU: 0x2055AEC
        NA: 0x2055770
        JP: 0x2055B0C
      description: |-
        Returns the ground monster data of the hero (first slot in Chimecho Assembly)
        
        return: Monster data
    - name: GetPartnerData
      address:
        EU: 0x2055B14
        NA: 0x2055798
        JP: 0x2055B34
      description: |-
        Returns the ground monster data of the partner (second slot in Chimecho Assembly)
        
        return: Monster data
    - name: CheckTeamMemberField8
      address:
        EU: 0x20565E0
        NA: 0x2056228
        JP: 0x20565C4
      description: |-
        Checks if a value obtained from team_member::field_0x8 is equal to certain values.
        
        This is known to return true for some or all of the guest monsters.
        
        r0: Value read from team_member::field_0x8
        return: True if the value is equal to 0x55AA or 0x5AA5
    - name: GetTeamMemberData
      address:
        EU: 0x2056708
        NA: 0x205638C
        JP: 0x2056728
      description: |-
        Returns a struct containing information about a team member.
        
        r0: Index
        return: Pointer to struct containing team member information
    - name: SetTeamSetupHeroAndPartnerOnly
      address:
        EU: 0x2056D48
        NA: 0x20569CC
        JP: 0x2056D68
      description: |-
        Implements SPECIAL_PROC_SET_TEAM_SETUP_HERO_AND_PARTNER_ONLY (see ScriptSpecialProcessCall).
        
        No params.
    - name: SetTeamSetupHeroOnly
      address:
        EU: 0x2056E2C
        NA: 0x2056AB0
        JP: 0x2056E48
      description: |-
        Implements SPECIAL_PROC_SET_TEAM_SETUP_HERO_ONLY (see ScriptSpecialProcessCall).
        
        No params.
    - name: GetPartyMembers
      address:
        EU: 0x2056F9C
        NA: 0x2056C20
        JP: 0x2056FB4
      description: |-
        Appears to get the team's active party members. Implements most of SPECIAL_PROC_IS_TEAM_SETUP_SOLO (see ScriptSpecialProcessCall).
        
        r0: [output] Array of 4 2-byte values (they seem to be indexes of some sort) describing each party member, which will be filled in by the function. The input can be a null pointer if the party members aren't needed
        return: Number of party members
    - name: IqSkillFlagTest
      address:
        EU: 0x2059280
        NA: 0x2058F04
        JP: 0x2059200
      description: |-
        Tests whether an IQ skill with a given ID is active.
        
        r0: IQ skill bitvector to test
        r1: IQ skill ID
        return: bool
    - name: GetExplorerMazeMonster
      address:
        EU: 0x2059474
        NA: 0x20590F8
        JP: 0x20593F4
      description: |-
        Returns the data of a monster sent into the Explorer Dojo using the "exchange teams" option.
        
        r0: Entry number (0-3)
        return: Ground monster data of the specified entry
    - name: GetSosMailCount
      address:
        EU: 0x205BCF8
        NA: 0x205B97C
        JP: 0x205BC7C
      description: |-
        Implements SPECIAL_PROC_GET_SOS_MAIL_COUNT (see ScriptSpecialProcessCall).
        
        r0: ?
        r1: some flag?
        return: SOS mail count
    - name: GenerateMission
      address:
        EU: 0x205D5A0
        NA: 0x205D224
        JP: 0x205D524
      description: |-
        Attempts to generate a random mission.
        
        r0: Pointer to something
        r1: Pointer to the struct where the data of the generated mission will be written to
        return: MISSION_GENERATION_SUCCESS if the mission was successfully generated, MISSION_GENERATION_FAILURE if it failed and MISSION_GENERATION_GLOBAL_FAILURE if it failed and the game shouldn't try to generate more.
    - name: GenerateDailyMissions
      address:
        EU: 0x205E94C
        NA: 0x205E5D0
        JP: 0x205E8D0
      description: |-
        Generates the missions displayed on the Job Bulletin Board and the Outlaw Notice Board.
        
        No params.
    - name: DungeonRequestsDone
      address:
        EU: 0x205F120
        NA: 0x205EDA4
        JP: 0x205F0A4
      description: |-
        Seems to return the number of missions completed.
        
        Part of the implementation for SPECIAL_PROC_DUNGEON_HAD_REQUEST_DONE (see ScriptSpecialProcessCall).
        
        r0: ?
        r1: some flag?
        return: number of missions completed
    - name: DungeonRequestsDoneWrapper
      address:
        EU: 0x205F18C
        NA: 0x205EE10
      description: |-
        Calls DungeonRequestsDone with the second argument set to false.
        
        r0: ?
        return: number of mission completed
    - name: AnyDungeonRequestsDone
      address:
        EU: 0x205F19C
        NA: 0x205EE20
        JP: 0x205F120
      description: |-
        Calls DungeonRequestsDone with the second argument set to true, and converts the integer output to a boolean.
        
        r0: ?
        return: bool: whether the number of missions completed is greater than 0
    - name: GetMissionByTypeAndDungeon
      address:
        EU: 0x205F728
        NA: 0x205F3AC
        JP: 0x205F69C
      description: |-
        Returns the position on the mission list of the first mission of the specified type that takes place in the specified dungeon.
        
        If the type of the mission has a subtype, the subtype of the checked mission must match the one in [r2] too for it to be returned.
        
        r0: Position on the mission list where the search should start. Missions before this position on the list will be ignored.
        r1: Mission type
        r2: Pointer to some struct that contains the subtype of the mission to check on its first byte
        r3: Dungeon ID
        return: Index of the first mission that meets the specified requirements, or -1 if there aren't any missions that do so.
    - name: CheckAcceptedMissionByTypeAndDungeon
      address:
        EU: 0x205F820
        NA: 0x205F4A4
        JP: 0x205F794
      description: |-
        Returns true if there are any accepted missions on the mission list that are of the specified type and take place in the specified dungeon.
        
        If the type of the mission has a subtype, the subtype of the checked mission must match the one in [r2] too for it to be returned.
        
        r0: Mission type
        r1: Pointer to some struct that contains the subtype of the mission to check on its first byte
        r2: Dungeon ID
        return: True if at least one mission meets the specified requirements, false otherwise.
    - name: ClearMissionData
      address:
        EU: 0x205FD34
        NA: 0x205F9B8
        JP: 0x205FCA8
      description: |-
        Given a mission struct, clears some of it fields.
        
        In particular, mission::status is set to mission_status::MISSION_STATUS_INVALID, mission::dungeon_id is set to -1, mission::floor is set to 0 and mission::reward_type is set to mission_reward_type::MISSION_REWARD_MONEY.
        
        r0: Pointer to the mission to clear
    - name: IsMonsterMissionAllowed
      address:
        EU: 0x2062D90
        NA: 0x2062A14
        JP: 0x2062CFC
      description: |-
        Checks if the specified monster is contained in the MISSION_BANNED_MONSTERS array.
        
        The function converts the ID by calling GetBaseForm and FemaleToMaleForm first.
        
        r0: Monster ID
        return: False if the monster ID (after converting it) is contained in MISSION_BANNED_MONSTERS, true if it isn't.
    - name: CanMonsterBeUsedForMissionWrapper
      address:
        EU: 0x2062DD4
        NA: 0x2062A58
      description: |-
        Calls CanMonsterBeUsedForMission with r1 = 1.
        
        r0: Monster ID
        return: Result of CanMonsterBeUsedForMission
    - name: CanMonsterBeUsedForMission
      address:
        EU: 0x2062DE4
        NA: 0x2062A68
        JP: 0x2062D50
      description: |-
        Returns whether a certain monster can be used (probably as the client or as the target) when generating a mission.
        
        Excluded monsters include those that haven't been fought in dungeons yet, the second form of certain monsters and, if PERFOMANCE_PROGRESS_FLAG[9] is 0, monsters in MISSION_BANNED_STORY_MONSTERS, the species of the player and the species of the partner.
        
        r0: Monster ID
        r1: True to exclude monsters in the MISSION_BANNED_MONSTERS array, false to allow them
        return: True if the specified monster can be part of a mission
    - name: IsMonsterMissionAllowedStory
      address:
        EU: 0x2062E60
        NA: 0x2062AE4
        JP: 0x2062DCC
      description: |-
        Checks if the specified monster should be allowed to be part of a mission (probably as the client or the target), accounting for the progress on the story.
        
        If PERFOMANCE_PROGRESS_FLAG[9] is true, the function returns true.
        If it isn't, the function checks if the specified monster is contained in the MISSION_BANNED_STORY_MONSTERS array, or if it corresponds to the ID of the player or the partner.
        
        The function converts the ID by calling GetBaseForm and FemaleToMaleForm first.
        
        r0: Monster ID
        return: True if PERFOMANCE_PROGRESS_FLAG[9] is true, false if it isn't and the monster ID (after converting it) is contained in MISSION_BANNED_STORY_MONSTERS or if it's the ID of the player or the partner, true otherwise.
    - name: ScriptSpecialProcess0x3D
      address:
        EU: 0x2065ECC
        NA: 0x2065B50
        JP: 0x2065E38
      description: |-
        Implements SPECIAL_PROC_0x3D (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x3E
      address:
        EU: 0x2065EDC
        NA: 0x2065B60
        JP: 0x2065E48
      description: |-
        Implements SPECIAL_PROC_0x3E (see ScriptSpecialProcessCall).
        
        No params.
    - name: ScriptSpecialProcess0x17
      address:
        EU: 0x2065FC4
        NA: 0x2065C48
        JP: 0x2065F30
      description: |-
        Implements SPECIAL_PROC_0x17 (see ScriptSpecialProcessCall).
        
        No params.
    - name: ItemAtTableIdx
      address:
        EU: 0x2066074
        NA: 0x2065CF8
        JP: 0x2065FE0
      description: |-
        Gets info about the item at a given item table (not sure what this table is...) index.
        
        Used by SPECIAL_PROC_COUNT_TABLE_ITEM_TYPE_IN_BAG and friends (see ScriptSpecialProcessCall).
        
        r0: table index
        r1: [output] pointer to an owned_item
    - name: WaitForInterrupt
      address:
        EU: 0x207BFC8
        NA: 0x207BC30
        JP: 0x207BF18
      description: |-
        Presumably blocks until the program receives an interrupt.
        
        This just calls (in Ghidra terminology) coproc_moveto_Wait_for_interrupt(0). See https://en.wikipedia.org/wiki/ARM_architecture_family#Coprocessors.
        
        No params.
    - name: FileInit
      address:
        EU: 0x207F77C
        NA: 0x207F3E4
        JP: 0x207F6CC
      description: |-
        Initializes a file_stream structure for file I/O.
        
        This function must always be called before opening a file.
        
        r0: file_stream pointer
    - name: Abs
      address:
        EU: 0x20868F4
        NA: 0x208655C
        JP: 0x2086844
      description: |-
        Takes the absolute value of an integer.
        
        r0: x
        return: abs(x)
    - name: Mbtowc
      address:
        EU: 0x2087554
        NA: 0x20871BC
        JP: 0x20874A4
      description: |-
        The mbtowc(3) C library function.
        
        r0: pwc
        r1: s
        r2: n
        return: number of consumed bytes, or -1 on failure
    - name: TryAssignByte
      address:
        EU: 0x208758C
        NA: 0x20871F4
        JP: 0x20874DC
      description: |-
        Assign a byte to the target of a pointer if the pointer is non-null.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: TryAssignByteWrapper
      address:
        EU: 0x20875A0
        NA: 0x2087208
        JP: 0x20874F0
      description: |-
        Wrapper around TryAssignByte.
        
        Accesses the TryAssignByte function with a weird chain of pointer dereferences.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: Wcstombs
      address:
        EU: 0x20875BC
        NA: 0x2087224
        JP: 0x208750C
      description: |-
        The wcstombs(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: characters converted
    - name: Memcpy
      address:
        EU: 0x2087634
        NA: 0x208729C
        JP: 0x2087584
      description: |-
        The memcpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Memmove
      address:
        EU: 0x2087654
        NA: 0x20872BC
        JP: 0x20875A4
      description: |-
        The memmove(3) C library function.
        
        The implementation is nearly the same as Memcpy, but it copies bytes from back to front if src < dst.
        
        r0: dest
        r1: src
        r2: n
    - name: Memset
      address:
        EU: 0x20876A0
        NA: 0x2087308
        JP: 0x20875F0
      description: |-
        The memset(3) C library function.
        
        This is just a wrapper around MemsetInternal that returns the pointer at the end.
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
        return: s
    - name: Memchr
      address:
        EU: 0x20876B4
        NA: 0x208731C
        JP: 0x2087604
      description: |-
        The memchr(3) C library function.
        
        r0: s
        r1: c
        r2: n
        return: pointer to first occurrence of c in s, or a null pointer if no match
    - name: Memcmp
      address:
        EU: 0x20876E0
        NA: 0x2087348
        JP: 0x2087630
      description: |-
        The memcmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: MemsetInternal
      address:
        EU: 0x2087720
        NA: 0x2087388
        JP: 0x2087670
      description: |-
        The actual memory-setting implementation for the memset(3) C library function.
        
        This function is optimized to set bytes in 4-byte chunks for n >= 32, correctly handling any unaligned bytes at the front/back. In this case, it also further optimizes by unrolling a for loop to set 8 4-byte values at once (effectively a 32-byte chunk).
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
    - name: VsprintfInternalSlice
      address:
        EU: 0x208900C
        NA: 0x2088C74
        JP: 0x2088F5C
      description: |-
        This is what implements the bulk of VsprintfInternal.
        
        The __vsprintf_internal in the modern-day version of glibc relies on __vfprintf_internal; this function has a slightly different interface, but it serves a similar role.
        
        r0: function pointer to append to the string being built (VsprintfInternal uses TryAppendToSlice)
        r1: string buffer slice
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: TryAppendToSlice
      address:
        EU: 0x2089830
        NA: 0x2089498
        JP: 0x2089780
      description: |-
        Best-effort append the given data to a slice. If the slice's capacity is reached, any remaining data will be truncated.
        
        r0: slice pointer
        r1: buffer of data to append
        r2: number of bytes in the data buffer
        return: true
    - name: VsprintfInternal
      address:
        EU: 0x2089874
        NA: 0x20894DC
        JP: 0x20897C4
      description: |-
        This is what implements Vsprintf. It's akin to __vsprintf_internal in the modern-day version of glibc (in fact, it's probably an older version of this).
        
        r0: str
        r1: maxlen (Vsprintf passes UINT32_MAX for this)
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: Vsprintf
      address:
        EU: 0x20898DC
        NA: 0x2089544
        JP: 0x208982C
      description: |-
        The vsprintf(3) C library function.
        
        r0: str
        r1: format
        r2: ap
        return: number of characters printed, excluding the null-terminator
    - name: Snprintf
      address:
        EU: 0x20898F4
        NA: 0x208955C
        JP: 0x2089844
      description: |-
        The snprintf(3) C library function.
        
        This calls VsprintfInternal directly, so it's presumably the real snprintf.
        
        r0: str
        r1: n
        r2: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: Sprintf
      address:
        EU: 0x208991C
        NA: 0x2089584
        JP: 0x208986C
      description: |-
        The sprintf(3) C library function.
        
        This calls VsprintfInternal directly, so it's presumably the real sprintf.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: Strlen
      address:
        EU: 0x2089A10
        NA: 0x2089678
        JP: 0x2089960
      description: |-
        The strlen(3) C library function.
        
        r0: s
        return: length of s
    - name: Strcpy
      address:
        EU: 0x2089A2C
        NA: 0x2089694
        JP: 0x208997C
      description: |-
        The strcpy(3) C library function.
        
        This function is optimized to copy characters in aligned 4-byte chunks if possible, correctly handling any unaligned bytes at the front/back.
        
        r0: dest
        r1: src
    - name: Strncpy
      address:
        EU: 0x2089AF4
        NA: 0x208975C
        JP: 0x2089A44
      description: |-
        The strncpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Strcat
      address:
        EU: 0x2089B44
        NA: 0x20897AC
        JP: 0x2089A94
      description: |-
        The strcat(3) C library function.
        
        r0: dest
        r1: src
    - name: Strncat
      address:
        EU: 0x2089B74
        NA: 0x20897DC
        JP: 0x2089AC4
      description: |-
        The strncat(3) C library function.
        
        r0: dest
        r1: src
        r2: n
    - name: Strcmp
      address:
        EU: 0x2089BC4
        NA: 0x208982C
        JP: 0x2089B14
      description: |-
        The strcmp(3) C library function.
        
        Similarly to Strcpy, this function is optimized to compare characters in aligned 4-byte chunks if possible.
        
        r0: s1
        r1: s2
        return: comparison value
    - name: Strncmp
      address:
        EU: 0x2089CD8
        NA: 0x2089940
        JP: 0x2089C28
      description: |-
        The strncmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: Strchr
      address:
        EU: 0x2089D0C
        NA: 0x2089974
        JP: 0x2089C5C
      description: |-
        The strchr(3) C library function.
        
        r0: string
        r1: c
        return: pointer to the located byte c, or null pointer if no match
    - name: Strcspn
      address:
        EU: 0x2089D48
        NA: 0x20899B0
        JP: 0x2089C98
      description: |-
        The strcspn(3) C library function.
        
        r0: string
        r1: stopset
        return: offset of the first character in string within stopset
    - name: Strstr
      address:
        EU: 0x2089E08
        NA: 0x2089A70
        JP: 0x2089D58
      description: |-
        The strstr(3) C library function.
        
        r0: haystack
        r1: needle
        return: pointer into haystack where needle starts, or null pointer if no match
    - name: Wcslen
      address:
        EU: 0x208B780
        NA: 0x208B3E8
        JP: 0x208B6D0
      description: |-
        The wcslen(3) C library function.
        
        r0: ws
        return: length of ws
    - name: AddFloat
      address:
        EU: 0x208F050
        NA: 0x208ECB8
        JP: 0x208EFA0
      description: |-
        This appears to be the libgcc implementation of __addsf3 (not sure which gcc version), which implements the addition operator for IEEE 754 floating-point numbers.
        
        r0: a
        r1: b
        return: a + b
    - name: DivideFloat
      address:
        EU: 0x208F5CC
        NA: 0x208F234
        JP: 0x208F51C
      description: |-
        This appears to be the libgcc implementation of __divsf3 (not sure which gcc version), which implements the division operator for IEEE 754 floating-point numbers.
        
        r0: dividend
        r1: divisor
        return: dividend / divisor
    - name: FloatToDouble
      address:
        EU: 0x208F984
        NA: 0x208F5EC
        JP: 0x208F8D4
      description: |-
        This appears to be the libgcc implementation of __extendsfdf2 (not sure which gcc version), which implements the float to double cast operation for IEEE 754 floating-point numbers.
        
        r0: float
        return: (double)float
    - name: FloatToInt
      address:
        EU: 0x208FA08
        NA: 0x208F670
        JP: 0x208F958
      description: |-
        This appears to be the libgcc implementation of __fixsfsi (not sure which gcc version), which implements the float to int cast operation for IEEE 754 floating-point numbers. The output saturates if the input is out of the representable range for the int type.
        
        r0: float
        return: (int)float
    - name: IntToFloat
      address:
        EU: 0x208FA3C
        NA: 0x208F6A4
        JP: 0x208F98C
      description: |-
        This appears to be the libgcc implementation of __floatsisf (not sure which gcc version), which implements the int to float cast operation for IEEE 754 floating-point numbers.
        
        r0: int
        return: (float)int
    - name: UIntToFloat
      address:
        EU: 0x208FA84
        NA: 0x208F6EC
        JP: 0x208F9D4
      description: |-
        This appears to be the libgcc implementation of __floatunsisf (not sure which gcc version), which implements the unsigned int to float cast operation for IEEE 754 floating-point numbers.
        
        r0: uint
        return: (float)uint
    - name: MultiplyFloat
      address:
        EU: 0x208FACC
        NA: 0x208F734
        JP: 0x208FA1C
      description: "This appears to be the libgcc implementation of __mulsf3 (not sure which gcc version), which implements the multiplication operator for IEEE 754 floating-point numbers."
    - name: Sqrtf
      address:
        EU: 0x208FCAC
        NA: 0x208F914
        JP: 0x208FBFC
      description: |-
        The sqrtf(3) C library function.
        
        r0: x
        return: sqrt(x)
    - name: SubtractFloat
      address:
        EU: 0x208FD9C
        NA: 0x208FA04
        JP: 0x208FCEC
      description: |-
        This appears to be the libgcc implementation of __subsf3 (not sure which gcc version), which implements the subtraction operator for IEEE 754 floating-point numbers.
        
        r0: a
        r1: b
        return: a - b
    - name: DivideInt
      address:
        EU: 0x209023C
        NA: 0x208FEA4
        JP: 0x209018C
      description: |-
        This appears to be the libgcc implementation of __divsi3 (not sure which gcc version), which implements the division operator for signed ints.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: DivideUInt
      address:
        EU: 0x2090448
        NA: 0x20900B0
        JP: 0x2090398
      description: |-
        This appears to be the libgcc implementation of __udivsi3 (not sure which gcc version), which implements the division operator for unsigned ints.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        Note: This function falls through to DivideUIntNoZeroCheck.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: DivideUIntNoZeroCheck
      address:
        EU: 0x2090450
        NA: 0x20900B8
        JP: 0x20903A0
      description: |-
        Subsidiary function to DivideUInt. Skips the initial check for divisor == 0.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        This function appears to only be called internally.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: GetFaintReason
      address:
        NA: 0x200CA54
      description: |-
        Gets the faint reason code (see HandleFaint) for a given move-item combination.
        
        If there's no item, the reason code is the move ID. If the item is an orb, return FAINT_REASON_ORB_ITEM. Otherwise, return FAINT_REASON_NON_ORB_ITEM.
        
        r0: move ID
        r1: item ID
        return: faint reason
    - name: InitMove
      address:
        NA: 0x20137B8
      description: |-
        Initializes a move info struct.
        
        This sets f_exists and f_enabled_for_ai on the flags, the ID to the given ID, the PP to the max PP for the move ID, and the ginseng boost to 0.
        
        r0: pointer to move to initialize
        r1: move ID
    - name: TreasureBoxDropsEnabled
      address:
        NA: 0x20512F0
      description: |-
        Checks if enemy Treasure Box drops are enabled in the dungeon.
        
        r0: dungeon ID
        return: bool
    - name: GetLowKickMultiplier
      address:
        NA: 0x20528FC
      description: |-
        Gets the Low Kick (and Grass Knot) damage multiplier for the given species.
        
        r0: monster ID
        return: multiplier as a binary fixed-point number with 8 fraction bits.
  data:
    - name: DEFAULT_MEMORY_ARENA_SIZE
      address:
        EU: 0x2000E58
        NA: 0x2000E58
      length:
        EU: 0x4
        NA: 0x4
      description: "Length in bytes of the default memory allocation arena, 1991680."
    - name: AURA_BOW_ID_LAST
      address:
        EU: 0x200CCBC
        NA: 0x200CC34
      length:
        EU: 0x4
        NA: 0x4
      description: Highest item ID of the aura bows.
    - name: NUMBER_OF_ITEMS
      address:
        EU:
          - 0x200E88C
          - 0x200E930
        NA:
          - 0x200E7BC
          - 0x200E860
      length:
        EU: 0x4
        NA: 0x4
      description: Number of items in the game.
    - name: MAX_MONEY_CARRIED
      address:
        EU: 0x200EDF8
        NA: 0x200ED50
      length:
        EU: 0x4
        NA: 0x4
      description: "Maximum amount of money the player can carry, 99999."
    - name: MAX_MONEY_STORED
      address:
        EU: 0x20107F8
        NA: 0x2010750
      length:
        EU: 0x4
        NA: 0x4
      description: "Maximum amount of money the player can store in the Duskull Bank, 9999999."
    - name: SCRIPT_VARS_VALUES_PTR
      address:
        EU:
          - 0x204B630
          - 0x204B81C
          - 0x204C764
          - 0x204C7BC
        NA:
          - 0x204B2F8
          - 0x204B4E4
          - 0x204C42C
          - 0x204C484
      length:
        EU: 0x4
        NA: 0x4
      description: Hard-coded pointer to SCRIPT_VARS_VALUES.
    - name: MONSTER_ID_LIMIT
      address:
        EU: 0x2054818
        NA: 0x205449C
      length:
        EU: 0x4
        NA: 0x4
      description: One more than the maximum valid monster ID (0x483).
    - name: MAX_RECRUITABLE_TEAM_MEMBERS
      address:
        EU:
          - 0x20555B4
          - 0x20559C8
        NA:
          - 0x2055238
          - 0x205564C
      length:
        EU: 0x4
        NA: 0x4
      description: "555, appears to be the maximum number of members recruited to an exploration team, at least for the purposes of some checks that need to iterate over all team members."
    - name: CART_REMOVED_IMG_DATA
      address:
        EU: 0x2092EE4
        NA: 0x2092AE8
      length:
        EU: 0x2000
        NA: 0x4000
    - name: EXCLUSIVE_ITEM_STAT_BOOST_DATA
      address:
        EU: 0x209852C
        NA: 0x20980E8
      length:
        EU: 0x3C
        NA: 0x3C
      description: |-
        Contains stat boost effects for different exclusive item classes.
        
        Each 4-byte entry contains the boost data for (attack, special attack, defense, special defense), 1 byte each, for a specific exclusive item class, indexed according to the stat boost data index list.
        
        type: struct exclusive_item_stat_boost_entry[15]
    - name: EXCLUSIVE_ITEM_ATTACK_BOOSTS
      address:
        EU: 0x209852C
        NA: 0x20980E8
      length:
        EU: 0x39
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 0"
    - name: EXCLUSIVE_ITEM_SPECIAL_ATTACK_BOOSTS
      address:
        EU: 0x209852D
        NA: 0x20980E9
      length:
        EU: 0x39
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 1"
    - name: EXCLUSIVE_ITEM_DEFENSE_BOOSTS
      address:
        EU: 0x209852E
        NA: 0x20980EA
      length:
        EU: 0x39
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 2"
    - name: EXCLUSIVE_ITEM_SPECIAL_DEFENSE_BOOSTS
      address:
        EU: 0x209852F
        NA: 0x20980EB
      length:
        EU: 0x39
        NA: 0x39
      description: "EXCLUSIVE_ITEM_STAT_BOOST_DATA, offset by 3"
    - name: EXCLUSIVE_ITEM_EFFECT_DATA
      address:
        EU: 0x2098568
        NA: 0x2098124
      length:
        EU: 0x778
        NA: 0x778
      description: |-
        Contains special effects for each exclusive item.
        
        Each entry is 2 bytes, with the first entry corresponding to the first exclusive item (Prism Ruff). The first byte is the exclusive item effect ID, and the second byte is an index into other data tables (related to the more generic stat boosting effects for specific monsters).
        
        type: struct exclusive_item_effect_entry[956]
    - name: EXCLUSIVE_ITEM_STAT_BOOST_DATA_INDEXES
      address:
        EU: 0x2098569
        NA: 0x2098125
      length:
        EU: 0x777
        NA: 0x777
      description: "EXCLUSIVE_ITEM_EFFECT_DATA, offset by 1"
    - name: RECOIL_MOVE_LIST
      address:
        EU: 0x20991B8
        NA: 0x2098D74
      length:
        EU: 0x16
        NA: 0x16
      description: |-
        Null-terminated list of all the recoil moves, as 2-byte move IDs.
        
        type: struct move_id_16[11]
    - name: PUNCH_MOVE_LIST
      address:
        EU: 0x20991CE
        NA: 0x2098D8A
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        Null-terminated list of all the punch moves, as 2-byte move IDs.
        
        type: struct move_id_16[16]
    - name: PARTNER_TALK_KIND_TABLE
      address:
        EU: 0x209D268
        NA: 0x209CCE4
        JP: 0x209E0B8
      length:
        EU: 0x58
        NA: 0x58
        JP: 0x58
      description: |-
        Table of values for the PARTNER_TALK_KIND script variable.
        
        type: struct partner_talk_kind_table_entry[11]
    - name: SCRIPT_VARS_LOCALS
      address:
        EU: 0x209D450
        NA: 0x209CECC
      length:
        EU: 0x40
        NA: 0x40
      description: |-
        List of special "local" variables available to the script engine. There are 4 16-byte entries.
        
        Each entry has the same structure as an entry in SCRIPT_VARS.
        
        type: struct script_local_var_table
    - name: SCRIPT_VARS
      address:
        EU: 0x209DDF4
        NA: 0x209D870
        JP: 0x209EC44
      length:
        EU: 0x730
        NA: 0x730
        JP: 0x730
      description: |-
        List of predefined global variables that track game state, which are available to the script engine. There are 115 16-byte entries.
        
        These variables underpin the various ExplorerScript global variables you can use in the SkyTemple SSB debugger.
        
        type: struct script_var_table
    - name: DUNGEON_DATA_LIST
      address:
        EU: 0x209E924
        NA: 0x209E3A0
      length:
        EU: 0x2D0
        NA: 0x2D0
      description: |-
        Data about every dungeon in the game.
        
        This is an array of 180 dungeon data list entry structs. Each entry is 4 bytes, and contains floor count information along with an index into the bulk of the dungeon's data in mappa_s.bin.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct dungeon_data_list_entry[180]
    - name: DUNGEON_RESTRICTIONS
      address:
        EU: 0x20A11E8
        NA: 0x20A0C64
      length:
        EU: 0xC00
        NA: 0xC00
      description: |-
        Data related to dungeon restrictions for every dungeon in the game.
        
        This is an array of 256 dungeon restriction structs. Each entry is 12 bytes, and contains information about restrictions within the given dungeon.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct dungeon_restriction[256]
    - name: SPECIAL_BAND_STAT_BOOST
      address:
        EU: 0x20A1DF0
        NA: 0x20A186C
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the Special Band.
    - name: MUNCH_BELT_STAT_BOOST
      address:
        EU: 0x20A1E00
        NA: 0x20A187C
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the Munch Belt.
    - name: GUMMI_STAT_BOOST
      address:
        EU: 0x20A1E0C
        NA: 0x20A1888
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value if a stat boost occurs when eating normal Gummis.
    - name: MIN_IQ_EXCLUSIVE_MOVE_USER
      address:
        EU: 0x20A1E10
        NA: 0x20A188C
      length:
        EU: 0x4
        NA: 0x4
    - name: WONDER_GUMMI_IQ_GAIN
      address:
        EU: 0x20A1E14
        NA: 0x20A1890
      length:
        EU: 0x2
        NA: 0x2
      description: IQ gain when ingesting wonder gummis.
    - name: AURA_BOW_STAT_BOOST
      address:
        EU: 0x20A1E1C
        NA: 0x20A1898
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the aura bows.
    - name: MIN_IQ_ITEM_MASTER
      address:
        EU: 0x20A1E28
        NA: 0x20A18A4
      length:
        EU: 0x4
        NA: 0x4
    - name: DEF_SCARF_STAT_BOOST
      address:
        EU: 0x20A1E2C
        NA: 0x20A18A8
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the Defense Scarf.
    - name: POWER_BAND_STAT_BOOST
      address:
        EU: 0x20A1E30
        NA: 0x20A18AC
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the Power Band.
    - name: WONDER_GUMMI_STAT_BOOST
      address:
        EU: 0x20A1E34
        NA: 0x20A18B0
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value if a stat boost occurs when eating Wonder Gummis.
    - name: ZINC_BAND_STAT_BOOST
      address:
        EU: 0x20A1E38
        NA: 0x20A18B4
      length:
        EU: 0x2
        NA: 0x2
      description: Stat boost value for the Zinc Band.
    - name: TACTICS_UNLOCK_LEVEL_TABLE
      address:
        EU: 0x20A1EC4
        NA: 0x20A1940
      length:
        EU: 0x18
        NA: 0x18
    - name: OUTLAW_LEVEL_TABLE
      address:
        EU: 0x20A1F1C
        NA: 0x20A1998
      length:
        EU: 0x20
        NA: 0x20
      description: "Table of 2-byte outlaw levels for outlaw missions, indexed by mission rank."
    - name: OUTLAW_MINION_LEVEL_TABLE
      address:
        EU: 0x20A1F3C
        NA: 0x20A19B8
      length:
        EU: 0x20
        NA: 0x20
      description: "Table of 2-byte outlaw minion levels for outlaw hideout missions, indexed by mission rank."
    - name: IQ_SKILL_RESTRICTIONS
      address:
        EU: 0x20A1FE0
        NA: 0x20A1A5C
      length:
        EU: 0x8A
        NA: 0x8A
      description: Table of 2-byte values for each IQ skill that represent a group. IQ skills in the same group can not be enabled at the same time.
    - name: SECONDARY_TERRAIN_TYPES
      address:
        EU: 0x20A206C
        NA: 0x20A1AE8
      length:
        EU: 0xC8
        NA: 0xC8
      description: |-
        The type of secondary terrain for each dungeon in the game.
        
        This is an array of 200 bytes. Each byte is an enum corresponding to one dungeon.
        
        type: struct secondary_terrain_type_8[200]
    - name: SENTRY_MINIGAME_DATA
      address:
        EU: 0x20A2134
        NA: 0x20A1BB0
    - name: IQ_SKILLS
      address:
        EU: 0x20A2200
        NA: 0x20A1C7C
      length:
        EU: 0x114
        NA: 0x114
      description: Table of 4-byte values for each IQ skill that represent the required IQ value to unlock a skill.
    - name: IQ_GROUP_SKILLS
      address:
        EU: 0x20A2314
        NA: 0x20A1D90
      length:
        EU: 0x190
        NA: 0x190
    - name: MONEY_QUANTITY_TABLE
      address:
        EU: 0x20A24A4
        NA: 0x20A1F20
      length:
        EU: 0x190
        NA: 0x190
      description: |-
        Table that maps money quantity codes (as recorded in, e.g., struct item) to actual amounts.
        
        type: int[100]
    - name: IQ_GUMMI_GAIN_TABLE
      address:
        EU: 0x20A2834
        NA: 0x20A22B0
      length:
        EU: 0x288
        NA: 0x288
    - name: GUMMI_BELLY_RESTORE_TABLE
      address:
        EU: 0x20A2ABC
        NA: 0x20A2538
      length:
        EU: 0x288
        NA: 0x288
    - name: BAG_CAPACITY_TABLE
      address:
        EU: 0x20A2D58
        NA: 0x20A27D4
      length:
        EU: 0x20
        NA: 0x20
      description: Array of 4-byte integers containing the bag capacity for each bag level.
    - name: SPECIAL_EPISODE_MAIN_CHARACTERS
      address:
        EU: 0x20A2D78
        NA: 0x20A27F4
      length:
        EU: 0xC8
        NA: 0xC8
    - name: GUEST_MONSTER_DATA
      address:
        EU: 0x20A2E40
        NA: 0x20A28BC
      length:
        EU: 0x288
        NA: 0x288
      description: |-
        Data for guest monsters that join you during certain story dungeons.
        
        Array of 18 36-byte entries.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct guest_monster[18]
    - name: RANK_UP_TABLE
      address:
        EU: 0x20A30C8
        NA: 0x20A2B44
      length:
        EU: 0xD0
        NA: 0xD0
    - name: MONSTER_SPRITE_DATA
      address:
        EU: 0x20A332C
        NA: 0x20A2D08
      length:
        EU: 0x4B0
        NA: 0x4B0
    - name: MISSION_DUNGEON_UNLOCK_TABLE
      address:
        EU: 0x20A42AC
        NA: 0x20A3CAC
    - name: MISSION_BANNED_STORY_MONSTERS
      address:
        EU: 0x20A4314
        NA: 0x20A3D24
      length:
        EU: 0x2A
        NA: 0x2A
      description: |-
        Null-terminated list of monster IDs that can't be used (probably as clients or targets) when generating missions before a certain point in the story.
        
        To be precise, PERFOMANCE_PROGRESS_FLAG[9] must be enabled so these monsters can appear as mission clients.
        
        type: struct monster_id_16[length / 2]
    - name: MISSION_BANNED_MONSTERS
      address:
        EU: 0x20A43AC
        NA: 0x20A3DAC
      length:
        EU: 0xF8
        NA: 0xF8
      description: |-
        Null-terminated list of monster IDs that can't be used (probably as clients or targets) when generating missions.
        
        type: struct monster_id_16[length / 2]
    - name: EVENTS
      address:
        EU: 0x20A5BD8
        NA: 0x20A5488
        JP: 0x20A6894
      length:
        EU: 0x1584
        NA: 0x1434
        JP: 0x1470
      description: |-
        Table of levels for the script engine, in which scenes can take place. There are a version-dependent number of 12-byte entries.
        
        type: struct script_level[length / 12]
    - name: ENTITIES
      address:
        EU: 0x20A8890
        NA: 0x20A7FF0
        JP: 0x20A9438
      length:
        EU: 0x1218
        NA: 0x1218
        JP: 0x1218
      description: |-
        Table of entities for the script engine, which can move around and do things within a scene. There are 386 12-byte entries.
        
        type: struct script_entity[386]
    - name: MAP_MARKER_PLACEMENTS
      address:
        EU: 0x20A9D70
        NA: 0x20A94D0
      length:
        EU: 0x9B0
        NA: 0x9B0
      description: |-
        The map marker position of each dungeon on the Wonder Map.
        
        This is an array of 310 map marker structs. Each entry is 8 bytes, and contains positional information about a dungeon on the map.
        
        See the struct definitions and End45's dungeon data document for more info.
        
        type: struct map_marker[310]
    - name: MEMORY_ALLOCATION_ARENA_GETTERS
      address:
        EU: 0x20AF7A0
        NA: 0x20AEF00
      length:
        EU: 0x8
        NA: 0x8
      description: |-
        Functions to get the desired memory arena for allocating and freeing heap memory.
        
        type: struct mem_arena_getters
    - name: PRNG_SEQUENCE_NUM
      address:
        EU: 0x20AF7CC
        NA: 0x20AEF2C
      length:
        EU: 0x2
        NA: 0x2
      description: "[Runtime] The current PRNG sequence number for the general-purpose PRNG. See Rand16Bit for more information on how the general-purpose PRNG works."
    - name: LOADED_OVERLAY_GROUP_0
      address:
        EU: 0x20AFAD0
        NA: 0x20AF230
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 0. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 0:
        - 0x06 (overlay 3)
        - 0x07 (overlay 6)
        - 0x08 (overlay 4)
        - 0x09 (overlay 5)
        - 0x0A (overlay 7)
        - 0x0B (overlay 8)
        - 0x0C (overlay 9)
        - 0x10 (overlay 12)
        - 0x11 (overlay 13)
        - 0x12 (overlay 14)
        - 0x13 (overlay 15)
        - 0x14 (overlay 16)
        - 0x15 (overlay 17)
        - 0x16 (overlay 18)
        - 0x17 (overlay 19)
        - 0x18 (overlay 20)
        - 0x19 (overlay 21)
        - 0x1A (overlay 22)
        - 0x1B (overlay 23)
        - 0x1C (overlay 24)
        - 0x1D (overlay 25)
        - 0x1E (overlay 26)
        - 0x1F (overlay 27)
        - 0x20 (overlay 28)
        - 0x21 (overlay 30)
        - 0x22 (overlay 31)
        - 0x23 (overlay 32)
        - 0x24 (overlay 33)
        
        type: enum overlay_group_id
    - name: LOADED_OVERLAY_GROUP_1
      address:
        EU: 0x20AFAD4
        NA: 0x20AF234
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 1. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 1:
        - 0x4 (overlay 1)
        - 0x5 (overlay 2)
        - 0xD (overlay 11)
        - 0xE (overlay 29)
        - 0xF (overlay 34)
        
        type: enum overlay_group_id
    - name: LOADED_OVERLAY_GROUP_2
      address:
        EU: 0x20AFAD8
        NA: 0x20AF238
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] The overlay group ID of the overlay currently loaded in slot 2. A group ID of 0 denotes no overlay.
        
        Overlay group IDs that can be loaded in slot 2:
        - 0x1 (overlay 0)
        - 0x2 (overlay 10)
        - 0x3 (overlay 35)
        
        type: enum overlay_group_id
    - name: PACK_FILE_OPENED
      address:
        EU: 0x20AFF54
      length:
        EU: 0x4
      description: |-
        [Runtime] A pointer to the 6 opened Pack files (listed at PACK_FILE_PATHS_TABLE)
        
        type: struct pack_file_opened*
    - name: PACK_FILE_PATHS_TABLE
      address:
        EU: 0x20AFF58
        NA: 0x20AF6A0
      length:
        EU: 0x18
        NA: 0x18
      description: |-
        List of pointers to path strings to all known pack files.
        The game uses this table to load its resources when launching dungeon mode.
        
        type: char*[6]
    - name: GAME_STATE_VALUES
      address:
        EU: 0x20AFF70
        NA: 0x20AF6B8
      description: "[Runtime]"
    - name: ITEM_DATA_TABLE_PTRS
      address:
        EU: 0x20AFF78
        NA: 0x20AF6C0
      length:
        EU: 0xC
        NA: 0xC
      description: |-
        [Runtime] List of pointers to various item data tables.
        
        The first two pointers are definitely item-related (although the order appears to be flipped between EU/NA?). Not sure about the third pointer.
    - name: DUNGEON_MOVE_TABLES
      address:
        EU: 0x20AFFA8
        NA: 0x20AF6DC
      description: "[Runtime] Seems to be some sort of region (a table of tables?) that holds pointers to various important tables related to moves."
    - name: MOVE_DATA_TABLE_PTR
      address:
        EU: 0x20AFFB0
        NA: 0x20AF6E4
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Points to the contents of the move data table loaded from waza_p.bin
        
        type: struct move_data_table*
    - name: LANGUAGE_INFO_DATA
      address:
        EU: 0x20B05A8
        NA: 0x20AFCE8
      description: "[Runtime]"
    - name: NOTIFY_NOTE
      address:
        EU: 0x20B0814
        NA: 0x20AFEF8
      length:
        EU: 0x1
        NA: 0x1
      description: |-
        [Runtime] Flag related to saving and loading state?
        
        type: bool
    - name: DEFAULT_HERO_ID
      address:
        EU: 0x20B0818
        NA: 0x20AFEFC
      length:
        EU: 0x2
        NA: 0x2
      description: |-
        The default monster ID for the hero (0x4: Charmander)
        
        type: struct monster_id_16
    - name: DEFAULT_PARTNER_ID
      address:
        EU: 0x20B081A
        NA: 0x20AFEFE
      length:
        EU: 0x2
        NA: 0x2
      description: |-
        The default monster ID for the partner (0x1: Bulbasaur)
        
        type: struct monster_id_16
    - name: GAME_MODE
      address:
        EU: 0x20B088C
        NA: 0x20AFF70
      description: |-
        [Runtime]
        
        type: uint8_t
    - name: GLOBAL_PROGRESS_PTR
      address:
        EU: 0x20B0890
        NA: 0x20AFF74
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime]
        
        type: struct global_progress*
    - name: ADVENTURE_LOG_PTR
      address:
        EU: 0x20B0894
        NA: 0x20AFF78
        JP: 0x20B17EC
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        [Runtime]
        
        type: struct adventure_log*
    - name: ITEM_TABLES_PTRS_1
      address:
        EU: 0x20B1264
        NA: 0x20B0948
      length:
        EU: 0x68
        NA: 0x68
    - name: SMD_EVENTS_FUN_TABLE
      address:
        EU: 0x20B14D4
        NA: 0x20B0B90
      length:
        EU: 0x1FC
        NA: 0x1FC
    - name: FAINT_REASON_CODE_ORB_ITEM
      address:
        NA: 0x200CA84
      description: "The faint reason code for any item in CATEGORY_ORBS, 0x262."
    - name: FAINT_REASON_CODE_NON_ORB_ITEM
      address:
        NA: 0x200CA88
      description: "The faint reason code for any item not in CATEGORY_ORBS, 0x263."
