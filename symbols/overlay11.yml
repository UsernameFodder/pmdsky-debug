overlay11:
  versions:
    - EU
    - NA
    - JP
  address:
    EU: 0x22DCB80
    NA: 0x22DC240
    JP: 0x22DD8E0
  length:
    EU: 0x48E40
    NA: 0x48C40
    JP: 0x48B00
  description: |-
    The script engine.
    
    This is the "main" overlay of ground mode. The script engine is what runs the ground mode scripts contained in the SCRIPT folder, which are written in a custom scripting language. These scripts encode things like cutscenes, screen transitions, ground mode events, and tons of other things related to ground mode.
  functions:
    - name: InitScriptRoutineState
      address:
        EU: 0x22DD170
        NA: 0x22DC830
        JP: 0x22DDED0
      description: |-
        Initializes the various fields of script_routine_state, a struct that seems relevant when handling script opcode operations.
        
        r0: script_routine_state pointer
    - name: InitScriptRoutine
      address:
        EU: 0x22DD228
        NA: 0x22DC8E8
        JP: 0x22DDF88
      description: |-
        Initializes the various fields of script_routine.
        
        r0: routine pointer
        r1: ground entity function table pointer
        r2: live entity pointer
    - name: LockRoutine
      address:
        EU: 0x22DD82C
        NA: 0x22DCEEC
        JP: 0x22DE58C
      description: |-
        Sets a routine to be locked via the Lock opcode.
        
        r0: script routine pointer
        r1: lock id
        return: Always 1, but this does seem to get checked in RunNextOpcode for some reason
    - name: UnlockRoutine
      address:
        EU: 0x22DDA2C
        NA: 0x22DD0EC
        JP: 0x22DE78C
      description: |-
        Attempts to unlock a script routine via the Unlock opcode.
        
        r0: script routine pointer
        r1: lock id
        return: True if the script routine was successfully unlocked
    - name: UnlockScriptingLock
      address:
        EU: 0x22DDA70
        NA: 0x22DD130
        JP: 0x22DE7D0
      description: |-
        Unlocks a scripting lock.
        
        Sets the corresponding byte to 1 on LOCK_NOTIFY_ARRAY to signal that the scripting engine should handle the unlock. Also sets a global unlock flag, used to tell the scripting engine that the state of locks have changed and they should be checked again.
        
        r0: ID of the lock to unlock
    - name: FuncThatCallsRunNextOpcode
      address:
        EU: 0x22DDAA4
        NA: 0x22DD164
        JP: 0x22DE804
      description: |-
        Called up to 16 times per frame. Exact purpose unknown.
        
        r0: script routine pointer
    - name: RunNextOpcode
      address:
        EU: 0x22DE6A4
        NA: 0x22DDD64
        JP: 0x22DF404
      description: |-
        Runs the next scripting opcode.
        
        Contains a switch statement based on the routine's next opcode to run.
        
        r0: script routine pointer
        return: status
    - name: GetSsbString
      address:
        EU: 0x22E4B88
        NA: 0x22E4248
        JP: 0x22E5874
      description: |-
        Returns a string from a given SSB runtime struct.
        
        r0: ssb runtime info pointer
        r1: idx
    - name: HandleUnlocks
      address:
        EU: 0x22E4C90
        NA: 0x22E4350
        JP: 0x22E597C
      description: |-
        Checks if a script unlock happened by reading entries from LOCK_NOTIFY_ARRAY and handles the ones that were set.
        
        If the global unlock flag is not set, returns immediately. If it is, the function loops LOCK_NOTIFY_ARRAY, checking for true values. If it finds one, resets it back to 0 and handles the unlock.
        
        No params.
    - name: LoadFileFromRomVeneer
      address:
        EU: 0x22E501C
        NA: 0x22E46DC
        JP: 0x22E5D08
      description: |-
        Likely a linker-generated veneer for LoadFileFromRom.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: [output] pointer to an IO struct {ptr, len}
        r1: file path string pointer
        r2: flags
    - name: SsbLoad2
      address:
        EU: 0x22E503C
        NA: 0x22E46FC
        JP: 0x22E5D28
    - name: ScriptParamToInt
      aliases:
        - ProcessScriptParam
      address:
        EU: 0x22E51EC
        NA: 0x22E48AC
        JP: 0x22E5ED8
      description: |-
        Converts the given opcode parameter to a signed integer.
        
        The parameter will be returned unchanged unless one of its two most significant bits (0x8000 and 0x4000) are set, in which case both bits will be cleared and the original value will be modified according to the following two rules:
        - If the 0x4000 bit is set (sign bit), the value will be set to -16384 + value.
        - If the 0x8000 bit is set (fixed-point flag), the value will be set to value / 256, rounded down.
        Both rules can be applied, in the same order as listed, if both conditions are met.
        
        r0: Parameter to convert
        return: The input parameter, as a signed integer
    - name: ScriptParamToFixedPoint16
      address:
        EU: 0x22E5220
        NA: 0x22E48E0
        JP: 0x22E5F0C
      description: |-
        Converts the given opcode parameter to a 16-bit signed fixed-point number with 8 fraction bits.
        
        The resulting number is encoded as (value) * 256, with the last byte acting as a fraction byte capable of representing multiples of 1/256.
        
        The parameter will either be returned unchanged or modified depending on which of its two most significant bits (0x8000 and 0x4000) are set. Both bits are unset before running the operations listed below:
        - If the 0x4000 bit is set (sign bit), the value will be set to -16384 + value.
        - If the 0x8000 bit is set (fixed-point flag), the raw value is interpreted as being fixed-point already, and nothing else happens. Otherwise, it's assumed to be a normal integer and is converted to fixed-point by left-shifting it by 8 (moving the integer part to its proper place).
        Both rules can be applied, in the same order as listed, if both conditions are met.
        
        r0: Parameter to convert
        return: The input parameter, as a 16-bit signed fixed-point number with 8 fraction bits
    - name: StationLoadHanger
      address:
        EU: 0x22E5514
        NA: 0x22E4BD4
        JP: 0x22E6200
    - name: ScriptStationLoadTalk
      address:
        EU: 0x22E5D24
        NA: 0x22E53E4
        JP: 0x22E6A10
    - name: SsbLoad1
      address:
        EU: 0x22E6690
        NA: 0x22E5D50
        JP: 0x22E737C
    - name: ScriptSpecialProcessCall
      address:
        EU: 0x22E7A58
        NA: 0x22E7118
        JP: 0x22E874C
      description: |-
        Processes calls to the OPCODE_PROCESS_SPECIAL script opcode.
        
        r0: some struct containing a callback of some sort, only used for special process ID 18
        r1: special process ID
        r2: first argument, if relevant? Probably corresponds to the second parameter of OPCODE_PROCESS_SPECIAL
        r3: second argument, if relevant? Probably corresponds to the third parameter of OPCODE_PROCESS_SPECIAL
        return: return value of the special process if it has one, otherwise 0
    - name: GetCoroutineInfo
      address:
        EU: 0x22E88F8
        NA: 0x22E7FB8
        JP: 0x22E95EC
      description: |-
        Returns information about a coroutine in unionall
        
        It's used by the CallCommon code to pull the data required to call the coroutine, so maybe the function returns data required to call a coroutine instead of info about the coroutine itself.
        
        r0: [output] Coroutine info
        r1: Coroutine ID
        return: True if the coroutine is valid? It's false only if the coroutine's offset is 0.
    - name: GetSpecialRecruitmentSpecies
      address:
        EU: 0x22E897C
        NA: 0x22E803C
        JP: 0x22E9670
      description: |-
        Returns an entry from RECRUITMENT_TABLE_SPECIES.
        
        Note: This indexes without doing bounds checking.
        
        r0: index into RECRUITMENT_TABLE_SPECIES
        return: enum monster_id
    - name: PrepareMenuAcceptTeamMember
      address:
        EU: 0x22E89C0
        NA: 0x22E8080
        JP: 0x22E96B4
      description: |-
        Implements SPECIAL_PROC_PREPARE_MENU_ACCEPT_TEAM_MEMBER (see ScriptSpecialProcessCall).
        
        r0: index into RECRUITMENT_TABLE_SPECIES
    - name: InitRandomNpcJobs
      address:
        EU: 0x22E8A64
        NA: 0x22E8124
        JP: 0x22E9758
      description: |-
        Implements SPECIAL_PROC_INIT_RANDOM_NPC_JOBS (see ScriptSpecialProcessCall).
        
        r0: job type? 0 is a random NPC job, 1 is a bottle mission
        r1: ?
    - name: GetRandomNpcJobType
      address:
        EU: 0x22E8AFC
        NA: 0x22E81BC
        JP: 0x22E97F0
      description: |-
        Implements SPECIAL_PROC_GET_RANDOM_NPC_JOB_TYPE (see ScriptSpecialProcessCall).
        
        return: job type?
    - name: GetRandomNpcJobSubtype
      address:
        EU: 0x22E8B14
        NA: 0x22E81D4
        JP: 0x22E9808
      description: |-
        Implements SPECIAL_PROC_GET_RANDOM_NPC_JOB_SUBTYPE (see ScriptSpecialProcessCall).
        
        return: job subtype?
    - name: GetRandomNpcJobStillAvailable
      address:
        EU: 0x22E8B30
        NA: 0x22E81F0
        JP: 0x22E9824
      description: |-
        Implements SPECIAL_PROC_GET_RANDOM_NPC_JOB_STILL_AVAILABLE (see ScriptSpecialProcessCall).
        
        return: bool
    - name: AcceptRandomNpcJob
      address:
        EU: 0x22E8B98
        NA: 0x22E8258
        JP: 0x22E988C
      description: |-
        Implements SPECIAL_PROC_ACCEPT_RANDOM_NPC_JOB (see ScriptSpecialProcessCall).
        
        return: bool
    - name: GroundMainLoop
      address:
        EU: 0x22E90B4
        NA: 0x22E8774
        JP: 0x22E9DA8
      description: |-
        Appears to be the main loop for ground mode.
        
        Based on debug print statements and general code structure, it seems contain a core loop, and dispatches to various functions in response to different events.
        
        r0: mode, which is stored globally and used in switch statements for dispatch
        return: return code
    - name: GetAllocArenaGround
      address:
        EU: 0x22E9C9C
        NA: 0x22E935C
        JP: 0x22EA990
      description: |-
        The GetAllocArena function used for ground mode. See SetMemAllocatorParams for more information.
        
        For (flags & 0xFF):
          8, 15, 16: GROUND_MEMORY_ARENA_1
          14: GROUND_MEMORY_ARENA_2
          other: null (default arena)
        
        r0: initial memory arena pointer, or null
        r1: flags (see MemAlloc)
        return: memory arena pointer, or null
    - name: GetFreeArenaGround
      address:
        EU: 0x22E9D00
        NA: 0x22E93C0
        JP: 0x22EA9F4
      description: |-
        The GetFreeArena function used for ground mode. See SetMemAllocatorParams for more information.
        
        r0: initial memory arena pointer, or null
        r1: pointer to free
        return: memory arena pointer, or null
    - name: GroundMainReturnDungeon
      address:
        EU: 0x22E9D54
        NA: 0x22E9414
        JP: 0x22EAA48
      description: |-
        Implements SPECIAL_PROC_RETURN_DUNGEON (see ScriptSpecialProcessCall).
        
        No params.
    - name: GroundMainNextDay
      address:
        EU: 0x22E9D78
        NA: 0x22E9438
        JP: 0x22EAA6C
      description: |-
        Implements SPECIAL_PROC_NEXT_DAY (see ScriptSpecialProcessCall).
        
        No params.
    - name: JumpToTitleScreen
      address:
        EU: 0x22E9F1C
        NA: 0x22E95DC
        JP: 0x22EAC10
      description: |-
        Implements SPECIAL_PROC_JUMP_TO_TITLE_SCREEN and SPECIAL_PROC_0x1A (see ScriptSpecialProcessCall).
        
        r0: int, argument value for SPECIAL_PROC_JUMP_TO_TITLE_SCREEN and -1 for SPECIAL_PROC_0x1A
        return: bool (but note that the special process ignores this and always returns 0)
    - name: ReturnToTitleScreen
      address:
        EU: 0x22E9FD4
        NA: 0x22E9694
        JP: 0x22EACC8
      description: |-
        Implements SPECIAL_PROC_RETURN_TO_TITLE_SCREEN (see ScriptSpecialProcessCall).
        
        r0: fade duration
        return: bool (but note that the special process ignores this and always returns 0)
    - name: ScriptSpecialProcess0x16
      address:
        EU: 0x22EA034
        NA: 0x22E96F4
        JP: 0x22EAD28
      description: |-
        Implements SPECIAL_PROC_0x16 (see ScriptSpecialProcessCall).
        
        r0: bool
    - name: IsScreenFadeInProgress
      address:
        EU: 0x22EA8B8
        NA: 0x22E9F78
        JP: 0x22EB5AC
      description: |-
        Used for example in the handler functions of the top screen types in ground mode to check whether the top screen fade is complete or not.
        
        return: True if the top screen is still fading, false if it's done fading.
    - name: LoadBackgroundAttributes
      address:
        EU: 0x22EC480
        NA: 0x22EBB40
        JP: 0x22ED174
      description: |-
        Open and read an entry from the MAP_BG/bg_list.dat
        
        Documentation on this format can be found here:
        https://github.com/SkyTemple/skytemple-files/tree/55b3017631a8a1b0f106111ef91a901dc394c6df/skytemple_files/graphics/bg_list_dat
        
        r0: [output] The entry
        r1: background ID
    - name: LoadMapType10
      address:
        EU: 0x22ED664
        NA: 0x22ECD24
        JP: 0x22EE358
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: [output] buffer_ptr
        r1: map_id
        r2: dungeon_info_str
        r3: additional_info
    - name: LoadMapType11
      address:
        EU: 0x22EDB84
        NA: 0x22ED244
        JP: 0x22EE878
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: [output] buffer_ptr
        r1: map_id
        r2: dungeon_info_str
        r3: additional_info
    - name: GetSpecialLayoutBackground
      address:
        EU: 0x22F1F00
        NA: 0x22F155C
        JP: 0x22F2BA8
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: bg_id
        r1: dungeon_info_str
        r2: additional_info
        r3: copy_fixed_room_layout
    - name: SetAnimDataFields
      address:
        EU: 0x22F51BC
        NA: 0x22F481C
        JP: 0x22F5E74
      description: |-
        Sets some fields on the animation struct?
        
        r0: animation pointer
        r1: ?
    - name: SetAnimDataFieldsWrapper
      address:
        EU: 0x22F52FC
        NA: 0x22F495C
        JP: 0x22F5FB4
      description: Calls SetAnimDataFields with the second argument right-shifted by 16.
    - name: InitAnimDataFromOtherAnimData
      address:
        EU: 0x22F5604
        NA: 0x22F4C64
        JP: 0x22F62E8
      description: |-
        Appears to partially copy some animation data into another animation struct, plus doing extra initialization on the destination struct.
        
        r0: dst
        r1: src
    - name: SetAnimDataFields2
      address:
        EU: 0x22F5C88
        NA: 0x22F52E8
        JP: 0x22F696C
      description: |-
        Sets some fields on the animation struct, based on the params?
        
        r0: animation pointer
        r1: flags
        r2: ?
    - name: GetIdleAnimationType
      address:
        EU: 0x22F66F0
        NA: 0x22F5D50
        JP: 0x22F73D4
      description: |-
        Given a monster species, returns the type of idle animation it should have.
        
        Possible values are "freeze animation #0" (0x300), "loop animation #7" (0x807) and "freeze animation #7" (0x307).
        
        r0: Monster ID
        r1: (?) Could contain data about the animation the monster is currently playing
        return: Animation data
    - name: LoadObjectAnimData
      address:
        EU: 0x22F7800
        NA: 0x22F6E60
        JP: 0x22F84E4
      description: |-
        Loads the animation (WAN) data for a given object index?
        
        r0: animation pointer
        r1: object index
        r2: flags
    - name: InitAnimDataFromOtherAnimDataVeneer
      address:
        EU: 0x22F78A8
        NA: 0x22F6F08
        JP: 0x22F858C
      description: |-
        Likely a linker-generated veneer for InitAnimDataFromOtherAnimData.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: dst
        r1: src
    - name: AnimRelatedFunction
      address:
        EU:
          - 0x22F78B4
          - 0x22F7A04
        NA:
          - 0x22F6F14
          - 0x22F7064
        JP:
          - 0x22F8598
          - 0x22F86E8
      description: |-
        Does more stuff related to animations...probably?
        
        r0: animation pointer?
        others: ?
    - name: UnlockMainRoutine
      address:
        EU: 0x22F7FF0
        NA: 0x22F7650
        JP: 0x22F8CD4
      description: |-
        Unlocks the main routine of the current script, as specified in GROUND_STATE_PTRS::main_routine.
        
        r0: lock id
        return: True if the script routine was successfully unlocked
    - name: AllocAndInitPartnerFollowDataAndLiveActorList
      address:
        EU: 0x22F865C
        NA: 0x22F7CBC
        JP: 0x22F9340
      description: |-
        Allocate and initialize the partner follow data and the live actor list (in GROUND_STATE_PTRS)
        
        No params.
    - name: InitPartnerFollowDataAndLiveActorList
      address:
        EU: 0x22F86B8
        NA: 0x22F7D18
        JP: 0x22F939C
      description: |-
        Initialize the partner follow data and the live actor list (in GROUND_STATE_PTRS, doesn't perform the allocation of the structures)
        
        No params.
    - name: GetLiveActorIdxFromScriptEntityId
      address:
        EU: 0x22F87B0
        NA: 0x22F7E10
        JP: 0x22F9494
      description: |-
        Searches through the live actor list to find the first matching actor who has an ID matching that of a script_entity_id.
        
        r0: script_entity_id
        return: index of the live actor, or -1 if the specified actor could not be found
    - name: DeleteLiveActor
      address:
        EU: 0x22F8F18
        NA: 0x22F8578
        JP: 0x22F9BFC
      description: |-
        Remove the actor from the actor list (in GROUND_STATE_PTRS)
        
        r0: the index of the actor in the live actor list
    - name: SetAttributeBitfieldLiveActor
      address:
        EU: 0x22F90CC
        NA: 0x22F872C
        JP: 0x22F9DB0
      description: |-
        Sets bits of the attribute bitfield of a currently loaded actor.
        
        r0: live actor id
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLiveActor
      address:
        EU: 0x22F9158
        NA: 0x22F87B8
        JP: 0x22F9E3C
      description: |-
        Clears bits of the attribute bitfield of a currently loaded actor.
        
        r0: live actor id
        r1: attribute bitfield
    - name: UnlockActorRoutines
      address:
        EU: 0x22F99B8
        NA: 0x22F9018
        JP: 0x22FA69C
      description: |-
        Attempts to unlock all live actor routines of the current script.
        
        r0: lock id
        return: True if any script routine was successfully unlocked
    - name: GetCollidingActorId
      address:
        EU: 0x22F9B20
        NA: 0x22F9180
        JP: 0x22FA804
      description: |-
        Returns the first colliding actor given a series of vector coordinates.
        
        r0: live actor id (used only to ignore an actor colliding with itself)
        r1: attribute bitfield to test actors against
        r2: pointer to coord_min
        r3: pointer to coord_max
        return: The first colliding actor's id, or -1 if no is collision detected
    - name: ChangeActorAnimation
      address:
        EU: 0x22F9D68
        NA: 0x22F93C8
        JP: 0x22FAA4C
      description: |-
        Used by the SetAnimation opcode to change the animation of an actor.
        
        It's responsible for breaking down the SetAnimation parameter and determining which animation to play and which flags to set.
        
        r0: live actor
        r1: SetAnimation parameter
    - name: SetPositionLiveActor
      address:
        EU: 0x22F9EC8
        NA: 0x22F9528
        JP: 0x22FABAC
      description: |-
        Sets the position for a currently loaded actor.
        
        r0: live actor
        r1: pointer to a position vector
    - name: GetIdLiveActor
      address:
        EU: 0x22FB3A4
        NA: 0x22FAA04
        JP: 0x22FC088
      description: |-
        Returns the ID of a currently loaded actor. This ID can then be used to index GROUND_STATE_PTRS::actors.
        
        r0: live actor
        return: id
    - name: GetCollisionBoxLiveActor
      address:
        EU: 0x22FB3AC
        NA: 0x22FAA0C
        JP: 0x22FC090
      description: |-
        Gets the collision box of a currently loaded actor.
        
        r0: live actor
        r1: [output] collision box buffer
    - name: SetPositionInitialLiveActor
      address:
        EU: 0x22FB3C0
        NA: 0x22FAA20
        JP: 0x22FC0A4
      description: |-
        Sets a currently loaded actor to return to its initial position.
        
        r0: live actor
        r1: pointer to an position vector; if null, actor will return to its initial position
    - name: SetMovementRangeLiveActor
      address:
        EU: 0x22FB47C
        NA: 0x22FAADC
        JP: 0x22FC160
      description: |-
        Sets a currently loaded actor's random movement range.
        
        r0: live actor
        r1: pointer to limit_min_pos
        r2: pointer to limit_max_pos
    - name: GetCollisionBoxCenterLiveActor
      address:
        EU: 0x22FB4A0
        NA: 0x22FAB00
        JP: 0x22FC184
      description: |-
        Gets the center of a collision box of a currently loaded actor.
        
        This simply adds the actor's minimum coordinates by half the size of the actor's collision box.
        
        r0: live actor
        r1: [output] collision box center buffer
    - name: SetPositionLiveActorVeneer
      address:
        EU: 0x22FB4C4
        NA: 0x22FAB24
        JP: 0x22FC1A8
      description: |-
        Likely a linker-generated veneer for SetPositionLiveActor.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: live actor
        r1: pointer to a position vector
    - name: GetHeightLiveActor
      address:
        EU: 0x22FB4D0
        NA: 0x22FAB30
        JP: 0x22FC1B4
      description: |-
        Gets the two height values of a currently loaded actor.
        
        r0: live actor
        r1: [output] pointer to first height value
        r2: [output] pointer to second height value, which is curiously not referenced by SetHeightLiveActor
    - name: SetHeightLiveActor
      address:
        EU: 0x22FB4E4
        NA: 0x22FAB44
        JP: 0x22FC1C8
      description: |-
        Sets the height of a currently loaded actor.
        
        r0: live actor
        r1: height
    - name: GetDirectionLiveActor
      address:
        EU: 0x22FB4EC
        NA: 0x22FAB4C
        JP: 0x22FC1D0
      description: |-
        Gets the direction of a currently loaded actor.
        
        r0: live actor
        r1: [output] pointer to direction
    - name: SetDirectionLiveActor
      address:
        EU: 0x22FB4FC
        NA: 0x22FAB5C
        JP: 0x22FC1E0
      description: |-
        Sets the direction of a currently loaded actor. Does nothing if the direction value passed is -1.
        
        r0: live actor
        r1: direction
    - name: SetAnimationLiveActor
      address:
        EU: 0x22FB524
        NA: 0x22FAB84
        JP: 0x22FC208
      description: |-
        Sets the animation of a currently loaded actor. Leads up to a final ChangeActorAnimation call.
        
        Includes a check for if live_actor::id is less than 3 and if live_actor::field_0xa is equal to 0x119, which ultimately may perform ((SetAnimation parameter) & 0x1f00 | 0x53).
        
        r0: live actor
        r1: SetAnimation parameter
    - name: SetEffectLiveActor
      address:
        EU: 0x22FB570
        NA: 0x22FABD0
        JP: 0x22FC254
      description: |-
        Sets the effect of a currently loaded actor.
        
        r0: live actor
        r1: flag (true if effect id is 0?)
        r2: effect id
        r3: effect position marker
    - name: GetAnimationStatusLiveActor
      address:
        EU: 0x22FB584
        NA: 0x22FABE4
        JP: 0x22FC268
      description: |-
        Gets the animation status of a currently loaded actor.
        
        Used to determine if the animation has finished via script opcodes like WaitAnimation and WaitEndAnimation.
        
        r0: live actor
        return: status
    - name: GetEffectStatusLiveActor
      address:
        EU: 0x22FB5A4
        NA: 0x22FAC04
        JP: 0x22FC288
      description: |-
        Gets the effect status of a currently loaded actor.
        
        Used to determine if an effect has finished via the script opcode WaitEffect.
        
        r0: live actor
        return: status
    - name: GetAttributeBitfieldLiveActor
      address:
        EU: 0x22FB5C8
        NA: 0x22FAC28
        JP: 0x22FC2AC
      description: |-
        Gets the attribute bitfield of a currently loaded actor.
        
        r0: live actor
        r1: [output] pointer to attribute bitfield
    - name: SetAttributeBitfieldLiveActorWrapper
      address:
        EU: 0x22FB5D4
        NA: 0x22FAC34
        JP: 0x22FC2B8
      description: |-
        Sets bits of the attribute bitfield of a currently loaded actor.
        
        Is a wrapper around SetAttributeBitfieldLiveActor, meaning this calls SetAttributeBitfieldLiveActor with a first parameter of live_actor::id.
        
        r0: live actor
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLiveActorWrapper
      address:
        EU: 0x22FB5E4
        NA: 0x22FAC44
        JP: 0x22FC2C8
      description: |-
        Clears bits of the attribute bitfield of a currently loaded actor.
        
        Is a wrapper around ResetAttributeBitfieldLiveActor, meaning this calls ResetAttributeBitfieldLiveActor with a first parameter of live_actor::id.
        
        r0: live actor
        r1: attribute bitfield
    - name: SetBlinkLiveActor
      address:
        EU: 0x22FB5F4
        NA: 0x22FAC54
        JP: 0x22FC2D8
      description: |-
        Sets the actor to blink in and out of sight at certain intervals.
        
        r0: live actor
        r1: frame interval for blinking in
        r2: frame interval for blinking out
    - name: SetPositionOffsetLiveActor
      address:
        EU: 0x22FB604
        NA: 0x22FAC64
        JP: 0x22FC2E8
      description: |-
        Offsets a currently loaded actor's position.
        
        r0: live actor
        r1: pointer to an position offset vector
    - name: InitPartnerFollowData
      address:
        EU: 0x22FC3C8
        NA: 0x22FBA28
        JP: 0x22FD0AC
      description: |-
        Initialize the partner follow data structure, without allocating it (in GROUND_STATE_PTRS)
        
        No params.
    - name: DeleteLiveObject
      address:
        EU: 0x22FCDEC
        NA: 0x22FC44C
        JP: 0x22FDAC4
      description: |-
        Remove the object from the object list (in GROUND_STATE_PTRS)
        
        r0: the index of the object in the live object list
    - name: SetAttributeBitfieldLiveObject
      address:
        EU: 0x22FCF98
        NA: 0x22FC5F8
        JP: 0x22FDC70
      description: |-
        Sets bits of the attribute bitfield of a currently loaded object.
        
        r0: live object id
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLiveObject
      address:
        EU: 0x22FCFD8
        NA: 0x22FC638
        JP: 0x22FDCB0
      description: |-
        Clears bits of the attribute bitfield of a currently loaded object.
        
        r0: live object id
        r1: attribute bitfield
    - name: UnlockObjectRoutines
      address:
        EU: 0x22FD5E4
        NA: 0x22FCC44
        JP: 0x22FE2BC
      description: |-
        Attempts to unlock all live object routines of the current script.
        
        r0: lock id
        return: True if any script routine was successfully unlocked
    - name: GetCollidingObjectId
      address:
        EU: 0x22FD6B8
        NA: 0x22FCD18
        JP: 0x22FE390
      description: |-
        Returns the first colliding object given a series of vector coordinates.
        
        r0: attribute bitfield to test objects against
        r1: pointer to coord_min
        r2: pointer to coord_max
        return: The first colliding object's id, or -1 if no is collision detected
    - name: SetPositionLiveObject
      address:
        EU: 0x22FD910
        NA: 0x22FCF70
        JP: 0x22FE5E8
      description: |-
        Sets the position for a currently loaded object.
        
        r0: live object
        r1: pointer to a position vector
    - name: GetIdLiveObject
      address:
        EU: 0x22FDA00
        NA: 0x22FD060
        JP: 0x22FE6D8
      description: |-
        Returns the ID of a currently loaded object. This ID can then be used to index GROUND_STATE_PTRS::objects.
        
        r0: live object
        return: id
    - name: GetCollisionBoxLiveObject
      address:
        EU: 0x22FDA08
        NA: 0x22FD068
        JP: 0x22FE6E0
      description: |-
        Gets the collision box of a currently loaded object.
        
        r0: live object
        r1: [output] collision box buffer
    - name: SetPositionInitialLiveObject
      address:
        EU: 0x22FDA1C
        NA: 0x22FD07C
        JP: 0x22FE6F4
      description: |-
        Sets a currently loaded object to return to its initial position.
        
        r0: live object
        r1: pointer to an position vector; if null, object will return to its initial position
    - name: SetMovementRangeLiveObject
      address:
        EU: 0x22FDAD8
        NA: 0x22FD138
        JP: 0x22FE7B0
      description: |-
        Sets a currently loaded object's random movement range.
        
        r0: live object
        r1: pointer to limit_min_pos
        r2: pointer to limit_max_pos
    - name: GetCollisionBoxCenterLiveObject
      address:
        EU: 0x22FDAFC
        NA: 0x22FD15C
        JP: 0x22FE7D4
      description: |-
        Gets the center of a collision box of a currently loaded object.
        
        This simply adds the object's minimum coordinates by half the size of the object's collision box.
        
        r0: live object
        r1: [output] collision box center buffer
    - name: SetPositionLiveObjectVeneer
      address:
        EU: 0x22FDB20
        NA: 0x22FD180
        JP: 0x22FE7F8
      description: |-
        Likely a linker-generated veneer for SetPositionLiveObject.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: live object
        r1: pointer to a position vector
    - name: GetHeightLiveObject
      address:
        EU: 0x22FDB2C
        NA: 0x22FD18C
        JP: 0x22FE804
      description: |-
        Gets the two height values of a currently loaded object.
        
        r0: live object
        r1: [output] pointer to first height value
        r2: [output] pointer to second height value, which is curiously not referenced by SetHeightLiveObject
    - name: SetHeightLiveObject
      address:
        EU: 0x22FDB40
        NA: 0x22FD1A0
        JP: 0x22FE818
      description: |-
        Sets the height of a currently loaded object.
        
        r0: live object
        r1: height
    - name: GetDirectionLiveObject
      address:
        EU: 0x22FDB48
        NA: 0x22FD1A8
        JP: 0x22FE820
      description: |-
        Gets the direction of a currently loaded object.
        
        r0: live object
        r1: [output] pointer to direction
    - name: SetDirectionLiveObject
      address:
        EU: 0x22FDB58
        NA: 0x22FD1B8
        JP: 0x22FE830
      description: |-
        Sets the direction of a currently loaded object. Does nothing if the direction value passed is -1.
        
        r0: live object
        r1: direction
    - name: SetAnimationLiveObject
      address:
        EU: 0x22FDB68
        NA: 0x22FD1C8
        JP: 0x22FE840
      description: |-
        Sets the animation of a currently loaded object.
        
        r0: live object
        r1: SetAnimation parameter
    - name: SetEffectLiveObject
      address:
        EU: 0x22FDC28
        NA: 0x22FD288
        JP: 0x22FE900
      description: |-
        Sets the effect of a currently loaded object.
        
        r0: live object
        r1: flag (true if effect id is 0?)
        r2: effect id
    - name: GetAnimationStatusLiveObject
      address:
        EU: 0x22FDC38
        NA: 0x22FD298
        JP: 0x22FE910
      description: |-
        Gets the animation status of a currently loaded object.
        
        Used to determine if the animation has finished via script opcodes like WaitAnimation and WaitEndAnimation.
        
        r0: live object
        return: status
    - name: GetEffectStatusLiveObject
      address:
        EU: 0x22FDC58
        NA: 0x22FD2B8
        JP: 0x22FE930
      description: |-
        Gets the effect status of a currently loaded object.
        
        Used to determine if an effect has finished via the script opcode WaitEffect.
        
        r0: live object
        return: status
    - name: GetAttributeBitfieldLiveObject
      address:
        EU: 0x22FDC7C
        NA: 0x22FD2DC
        JP: 0x22FE954
      description: |-
        Gets the attribute bitfield of a currently loaded object.
        
        r0: live object
        r1: [output] pointer to attribute bitfield
    - name: SetAttributeBitfieldLiveObjectWrapper
      address:
        EU: 0x22FDC88
        NA: 0x22FD2E8
        JP: 0x22FE960
      description: |-
        Sets bits of the attribute bitfield of a currently loaded object.
        
        Is a wrapper around SetAttributeBitfieldLiveObject, meaning this calls SetAttributeBitfieldLiveObject with a first parameter of live_object::id.
        
        r0: live object
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLiveObjectWrapper
      address:
        EU: 0x22FDC98
        NA: 0x22FD2F8
        JP: 0x22FE970
      description: |-
        Clears bits of the attribute bitfield of a currently loaded object.
        
        Is a wrapper around ResetAttributeBitfieldLiveObject, meaning this calls ResetAttributeBitfieldLiveObject with a first parameter of live_object::id.
        
        r0: live object
        r1: attribute bitfield
    - name: SetBlinkLiveObject
      address:
        EU: 0x22FDCA8
        NA: 0x22FD308
        JP: 0x22FE980
      description: |-
        Sets the object to blink in and out of sight at certain intervals.
        
        r0: live object
        r1: frame interval for blinking in
        r2: frame interval for blinking out
    - name: SetPositionOffsetLiveObject
      address:
        EU: 0x22FDCB8
        NA: 0x22FD318
        JP: 0x22FE990
      description: |-
        Offsets a currently loaded object's position.
        
        r0: live object
        r1: pointer to an position offset vector
    - name: DeleteLivePerformer
      address:
        EU: 0x22FE58C
        NA: 0x22FDBEC
        JP: 0x22FF25C
      description: |-
        Remove the performer from the performer list (in GROUND_STATE_PTRS)
        
        r0: the index of the performer in the live performer list
    - name: SetAttributeBitfieldLivePerformer
      address:
        EU: 0x22FE738
        NA: 0x22FDD98
        JP: 0x22FF408
      description: |-
        Sets bits of the attribute bitfield of a currently loaded performer.
        
        r0: live performer id
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLivePerformer
      address:
        EU: 0x22FE778
        NA: 0x22FDDD8
        JP: 0x22FF448
      description: |-
        Clears bits of the attribute bitfield of a currently loaded performer.
        
        r0: live performer id
        r1: attribute bitfield
    - name: UnlockPerformerRoutines
      address:
        EU: 0x22FECF4
        NA: 0x22FE354
        JP: 0x22FF9C4
      description: |-
        Attempts to unlock all live performer routines of the current script.
        
        r0: lock id
        return: True if any script routine was successfully unlocked
    - name: SetPositionLivePerformer
      address:
        EU: 0x22FEDA4
        NA: 0x22FE404
        JP: 0x22FFA74
      description: |-
        Sets the position for a currently loaded performer.
        
        r0: live performer
        r1: pointer to a position vector
    - name: GetIdLivePerformer
      address:
        EU: 0x22FEE30
        NA: 0x22FE490
        JP: 0x22FFB00
      description: |-
        Returns the ID of a currently loaded performer. This ID can then be used to index GROUND_STATE_PTRS::performers.
        
        r0: live performer
        return: id
    - name: GetCollisionBoxLivePerformer
      address:
        EU: 0x22FEE38
        NA: 0x22FE498
        JP: 0x22FFB08
      description: |-
        Gets the collision box of a currently loaded performer.
        
        r0: live performer
        r1: [output] collision box buffer
    - name: SetPositionInitialLivePerformer
      address:
        EU: 0x22FEE4C
        NA: 0x22FE4AC
        JP: 0x22FFB1C
      description: |-
        Sets a currently loaded performer to return to its initial position.
        
        r0: live performer
        r1: pointer to an position vector; if null, performer will return to its initial position
    - name: SetMovementRangeLivePerformer
      address:
        EU: 0x22FEF08
        NA: 0x22FE568
        JP: 0x22FFBD8
      description: |-
        Sets a currently loaded performer's random movement range.
        
        r0: live performer
        r1: pointer to limit_min_pos
        r2: pointer to limit_max_pos
    - name: GetCollisionBoxCenterLivePerformer
      address:
        EU: 0x22FEF2C
        NA: 0x22FE58C
        JP: 0x22FFBFC
      description: |-
        Gets the center of a collision box of a currently loaded performer.
        
        This simply adds the performer's minimum coordinates by half the size of the performer's collision box.
        
        r0: live performer
        r1: [output] collision box center buffer
    - name: SetPositionLivePerformerVeneer
      address:
        EU: 0x22FEF50
        NA: 0x22FE5B0
        JP: 0x22FFC20
      description: |-
        Likely a linker-generated veneer for SetPositionLivePerformer.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: live performer
        r1: pointer to a position vector
    - name: GetHeightLivePerformer
      address:
        EU: 0x22FEF5C
        NA: 0x22FE5BC
        JP: 0x22FFC2C
      description: |-
        Gets the two height values of a currently loaded performer.
        
        r0: live performer
        r1: [output] pointer to first height value
        r2: [output] pointer to second height value, which is curiously not referenced by SetHeightLivePerformer
    - name: SetHeightLivePerformer
      address:
        EU: 0x22FEF70
        NA: 0x22FE5D0
        JP: 0x22FFC40
      description: |-
        Sets the height of a currently loaded performer.
        
        r0: live performer
        r1: height
    - name: GetDirectionLivePerformer
      address:
        EU: 0x22FEF78
        NA: 0x22FE5D8
        JP: 0x22FFC48
      description: |-
        Gets the direction of a currently loaded performer.
        
        r0: live performer
        r1: [output] pointer to direction
    - name: SetDirectionLivePerformer
      address:
        EU: 0x22FEF88
        NA: 0x22FE5E8
        JP: 0x22FFC58
      description: |-
        Sets the direction of a currently loaded performer. Does nothing if the direction value passed is -1.
        
        r0: live performer
        r1: direction
    - name: SetAnimationLivePerformer
      address:
        EU: 0x22FEF98
        NA: 0x22FE5F8
        JP: 0x22FFC68
      description: |-
        Sets the animation of a currently loaded performer.
        
        r0: live performer
        r1: SetAnimation parameter
    - name: SetEffectLivePerformer
      address:
        EU: 0x22FF058
        NA: 0x22FE6B8
        JP: 0x22FFD28
      description: |-
        Sets the effect of a currently loaded performer.
        
        r0: live performer
        r1: flag (true if effect id is 0?)
        r2: effect id
    - name: GetAnimationStatusLivePerformer
      address:
        EU: 0x22FF068
        NA: 0x22FE6C8
        JP: 0x22FFD38
      description: |-
        Gets the animation status of a currently loaded performer.
        
        Used to determine if the animation has finished via script opcodes like WaitAnimation and WaitEndAnimation.
        
        r0: live performer
        return: status
    - name: GetEffectStatusLivePerformer
      address:
        EU: 0x22FF088
        NA: 0x22FE6E8
        JP: 0x22FFD58
      description: |-
        Gets the effect status of a currently loaded performer.
        
        Used to determine if an effect has finished via the script opcode WaitEffect.
        
        r0: live performer
        return: status
    - name: GetAttributeBitfieldLivePerformer
      address:
        EU: 0x22FF0C0
        NA: 0x22FE720
        JP: 0x22FFD90
      description: |-
        Gets the attribute bitfield of a currently loaded performer.
        
        r0: live performer
        r1: [output] pointer to attribute bitfield
    - name: SetAttributeBitfieldLivePerformerWrapper
      address:
        EU: 0x22FF0CC
        NA: 0x22FE72C
        JP: 0x22FFD9C
      description: |-
        Sets bits of the attribute bitfield of a currently loaded performer.
        
        Is a wrapper around SetAttributeBitfieldLivePerformer, meaning this calls SetAttributeBitfieldLivePerformer with a first parameter of live_performer::id.
        
        r0: live performer
        r1: attribute bitfield
    - name: ResetAttributeBitfieldLivePerformerWrapper
      address:
        EU: 0x22FF0DC
        NA: 0x22FE73C
        JP: 0x22FFDAC
      description: |-
        Clears bits of the attribute bitfield of a currently loaded performer.
        
        Is a wrapper around ResetAttributeBitfieldLivePerformer, meaning this calls ResetAttributeBitfieldLivePerformer with a first parameter of live_performer::id.
        
        r0: live performer
        r1: attribute bitfield
    - name: SetBlinkLivePerformer
      address:
        EU: 0x22FF0EC
        NA: 0x22FE74C
        JP: 0x22FFDBC
      description: |-
        Sets the performer to blink in and out of sight at certain intervals.
        
        r0: live performer
        r1: frame interval for blinking in
        r2: frame interval for blinking out
    - name: SetPositionOffsetLivePerformer
      address:
        EU: 0x22FF0FC
        NA: 0x22FE75C
        JP: 0x22FFDCC
      description: |-
        Offsets a currently loaded performer's position.
        
        r0: live performer
        r1: pointer to an position offset vector
    - name: DeleteLiveEvent
      address:
        EU: 0x22FF608
        NA: 0x22FEC68
        JP: 0x23002D0
      description: |-
        Remove the event from the event list (in GROUND_STATE_PTRS)
        
        r0: the index of the event in the live event list
    - name: GetCollidingEventId
      address:
        EU: 0x22FF798
        NA: 0x22FEDF8
        JP: 0x2300460
      description: |-
        Returns the first colliding event given a series of vector coordinates.
        
        r0: attribute bitfield to test events against
        r1: pointer to coord_min
        r2: pointer to coord_max
        return: The first colliding event's id, or -1 if no is collision detected
    - name: CreateTeamInfoBox
      address:
        EU: 0x22FF834
        NA: 0x22FEE94
        JP: 0x23004FC
      description: |-
        Creates a window containing team information (rank and money carried) for the top-level menu in ground mode. Also see struct team_info_box.
        
        The new window will always default to TEAM_INFO_BOX_DEFAULT_WINDOW_PARAMS.
        
        return: window_id
    - name: CloseTeamInfoBox
      address:
        EU: 0x22FF8EC
        NA: 0x22FEF4C
        JP: 0x23005B4
      description: |-
        Closes a window created with CreateTeamInfoBox.
        
        r0: window_id
    - name: IsTeamInfoBoxActive
      address:
        EU: 0x22FF924
        NA: 0x22FEF84
        JP: 0x23005EC
      description: |-
        This is a guess.
        
        Checks if the state of a team info box is not 5.
        
        r0: window_id
        return: bool
    - name: UpdateTeamInfoBox
      address:
        EU: 0x22FF944
        NA: 0x22FEFA4
        JP: 0x230060C
      description: |-
        Window update function for team info boxes.
        
        r0: window pointer
    - name: CreateTopGroundMenu
      address:
        EU: 0x2301724
        NA: 0x2300D88
        JP: 0x23023DC
      description: |-
        Creates a parent menu (containing Items, Team, etc.) and two other windows upon pressing X in the overworld.
        
        return: always 1
    - name: CloseTopGroundMenu
      address:
        EU: 0x2301890
        NA: 0x2300EF4
        JP: 0x2302548
      description: |-
        Closes the three windows created by CreateOverworldMenu.
        
        No params.
    - name: UpdateTopGroundMenu
      address:
        EU: 0x23018EC
        NA: 0x2300F50
        JP: 0x23025A4
      description: |-
        Window update function for the top-level ground mode menu.
        
        return: status code
    - name: IsBagNotEmpty
      address:
        EU: 0x2305460
        NA: 0x2304AC4
        JP: 0x2306128
      description: |-
        Checks if the bag has at least one valid item. Notably used in CreateTopGroundMenu to decide if the "Items" option should be enabled.
        
        return: bool
    - name: SprintfStatic
      address:
        EU: 0x2309868
        NA: 0x2308ECC
        JP: 0x230A478
      description: |-
        Statically defined copy of sprintf(3) in overlay 11. See arm9.yml for more information.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: GetExclusiveItemRequirements
      address:
        EU: 0x230B8D4
        NA: 0x230AF38
        JP: 0x230C4DC
      description: |-
        Used to calculate the items required to get a certain exclusive item in the swap shop.
        
        r0: ?
        r1: ?
    - name: HandleControlsTopScreenGround
      address:
        EU: 0x230EFB4
        NA: 0x230E618
        JP: 0x230FBC4
      description: |-
        Handles the controls top screen display in the overworld.
        
        For some reason the implementation seems considerably jankier in ground mode. In dungeon mode there's this structure for the top screen that has handlers for creating, updating and closing the various top screen layouts in a sort of polymorphic way. Here there's just a separate function for every layout that gets called every frame and seems to have a switch-case to handle everything about it.
        
        No params.
    - name: GetDungeonMapPos
      address:
        EU: 0x230F6E4
        NA: 0x230ED48
        JP: 0x23102F4
      description: |-
        Checks if a dungeon should be displayed on the map and the position where it should be displayed if so.
        
        r0: [Output] Buffer where the coordinates of the map marker will be stored. The coordinates are shifted 8 bits to the left, so they are probably fixed-point numbers instead of integers.
        r1: Dungeon ID
        return: True if the dungeon should be displayed on the map, false otherwise.
    - name: WorldMapSetMode
      address:
        EU: 0x230F9A0
        NA: 0x230F004
        JP: 0x23105B0
      description: |-
        Function called by the script function "worldmap_SetMode"
        Define the mode of the world map, which can among other things be used to decide if the player character should appear on the world map
        The mode is set even if no world map is set
        
        r0: world map mode
    - name: WorldMapSetCamera
      address:
        EU: 0x230FA60
        NA: 0x230F0C4
        JP: 0x2310670
      description: |-
        Function called with the script function "worldmap_SetCamera".
        Set the map marker the world map should try to center on (while still ensuring it doesn't go over the background border)
        Has no effect if no map is currently set
        
        r0: map marker id
    - name: StatusUpdate
      address:
        EU: 0x2314478
        NA: 0x2313A98
        JP: 0x2314FFC
      description: |-
        Implements SPECIAL_PROC_STATUS_UPDATE (see ScriptSpecialProcessCall).
        
        No params.
    - name: HandleTeamStatsGround
      address:
        EU: 0x23144BC
        NA: 0x2313ADC
        JP: 0x2315040
      description: |-
        Handles the team stats top screen display in the overworld.
        
        For some reason the implementation seems considerably jankier in ground mode. In dungeon mode there's this structure for the top screen that has handlers for creating, updating and closing the various top screen layouts in a sort of polymorphic way. Here there's just a separate function for every layout that gets called every frame and seems to have a switch-case to handle everything about it.
        
        No params.
  data:
    - name: OVERLAY11_UNKNOWN_TABLE__NA_2316A38
      address:
        NA: 0x2316A38
      length:
        NA: 0xA0
      description: |-
        Multiple entries are pointers to the string "script.c"
        
        Note: unverified, ported from Irdkwia's notes
        
        type: undefined4[40]
    - name: SCRIPT_COMMAND_PARSING_DATA
      address:
        EU: 0x23174B8
        NA: 0x2316AD8
        JP: 0x231803C
      length:
        NA: 0x20
      description: Used by ScriptCommandParsing somehow
    - name: SCRIPT_OP_CODE_NAMES
      address:
        EU: 0x23174D8
        NA: 0x2316AF8
        JP: 0x231805C
      length:
        NA: 0x1B18
      description: "Opcode name strings pointed to by entries in SCRIPT_OP_CODES (script_opcode::name)"
    - name: SCRIPT_OP_CODES
      address:
        EU: 0x2318FF0
        NA: 0x2318610
        JP: 0x2319B74
      length:
        EU: 0xBF8
        NA: 0xBF8
        JP: 0xBF8
      description: |-
        Table of opcodes for the script engine. There are 383 8-byte entries.
        
        These opcodes underpin the various ExplorerScript functions you can call in the SkyTemple SSB debugger.
        
        type: struct script_opcode_table
    - name: OVERLAY11_DEBUG_STRINGS
      address:
        EU: 0x2319BE8
        NA: 0x2319208
        JP: 0x231A76C
      length:
        NA: 0x8E4
      description: Strings used with various debug printing functions throughout the overlay
    - name: C_ROUTINE_NAMES
      address:
        EU: 0x231A4CC
        NA: 0x2319AEC
        JP: 0x231B050
      length:
        NA: 0x2D3C
      description: "Common routine name strings pointed to by entries in C_ROUTINES (common_routine::name)"
    - name: C_ROUTINES
      address:
        EU: 0x231D208
        NA: 0x231C828
        JP: 0x231DD8C
      length:
        NA: 0x15E8
        JP: 0x15E8
      description: |-
        Common routines used within the unionall.ssb script (the master script). There are 701 8-byte entries.
        
        These routines underpin the ExplorerScript coroutines you can call in the SkyTemple SSB debugger.
        
        type: struct common_routine_table
    - name: GROUND_WEATHER_TABLE
      address:
        EU: 0x231E7F0
        NA: 0x231DE10
        JP: 0x231F374
      length:
        NA: 0x30
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        type: struct ground_weather_entry[12]
    - name: GROUND_WAN_FILES_TABLE
      address:
        EU: 0x231E820
        NA: 0x231DE40
        JP: 0x231F3A4
      length:
        EU: 0x10BC
        NA: 0x1014
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        type: char[343][12]
    - name: OBJECTS
      address:
        EU: 0x231F8DC
        NA: 0x231EE54
        JP: 0x23203B8
      length:
        EU: 0x1AAC
        NA: 0x1A04
        JP: 0x1A04
      description: |-
        Table of objects for the script engine, which can be placed in scenes. There are a version-dependent number of 12-byte entries.
        
        type: struct script_object[length / 12]
    - name: RECRUITMENT_TABLE_LOCATIONS
      address:
        EU: 0x23213C4
        NA: 0x2320894
        JP: 0x2321DF8
      length:
        EU: 0x16
        NA: 0x16
        JP: 0x16
      description: |-
        Table of dungeon IDs corresponding to entries in RECRUITMENT_TABLE_SPECIES.
        
        type: struct dungeon_id_16[22]
    - name: RECRUITMENT_TABLE_LEVELS
      address:
        EU: 0x23213DC
        NA: 0x23208AC
        JP: 0x2321E10
      length:
        EU: 0x2C
        NA: 0x2C
        JP: 0x2C
      description: |-
        Table of levels for recruited Pokémon, corresponding to entries in RECRUITMENT_TABLE_SPECIES.
        
        type: int16_t[22]
    - name: RECRUITMENT_TABLE_SPECIES
      address:
        EU: 0x2321408
        NA: 0x23208D8
        JP: 0x2321E3C
      length:
        EU: 0x2C
        NA: 0x2C
        JP: 0x2C
      description: |-
        Table of Pokémon recruited at special locations, such as at the ends of certain dungeons (e.g., Dialga or the Seven Treasures legendaries) or during a cutscene (e.g., Cresselia and Manaphy).
        
        Interestingly, this includes both Heatran genders. It also includes Darkrai for some reason?
        
        type: struct monster_id_16[22]
    - name: LEVEL_TILEMAP_LIST
      address:
        EU: 0x232185C
        NA: 0x2320D2C
        JP: 0x2322290
      length:
        EU: 0x288
        NA: 0x288
        JP: 0x288
      description: |-
        Irdkwia's notes: FIXED_FLOOR_GROUND_ASSOCIATION
        
        type: struct level_tilemap_list_entry[81]
    - name: ACTOR_FUNCTION_TABLE
      address:
        EU: 0x23223F0
        NA: 0x232187C
        JP: 0x2322DE0
      length:
        EU: 0x50
        NA: 0x50
        JP: 0x50
      description: A function pointer table accessed when performing script opcodes on actors.
    - name: SETANIMATION_TABLE
      address:
        EU: 0x23223FC
        NA: 0x23218CC
        JP: 0x2322E30
      length:
        EU: 0xA8
        NA: 0xA8
      description: |-
        Table that associates the parameter of the SetAnimation scripting opcode to animation data.
        
        The first entry is unused and has a value of 0xFFFF.
    - name: OBJECT_FUNCTION_TABLE
      address:
        EU: 0x2322970
        NA: 0x2321DFC
        JP: 0x2323360
      length:
        EU: 0x50
        NA: 0x50
        JP: 0x50
      description: A function pointer table accessed when performing script opcodes on objects.
    - name: PERFORMER_FUNCTION_TABLE
      address:
        EU: 0x2322C78
        NA: 0x2322110
        JP: 0x2323674
      length:
        EU: 0x50
        NA: 0x50
        JP: 0x50
      description: A function pointer table accessed when performing script opcodes on performers.
    - name: TEAM_INFO_BOX_DEFAULT_WINDOW_PARAMS
      address:
        EU: 0x2322F8C
        NA: 0x232245C
        JP: 0x23239C0
      length:
        NA: 0x10
      description: Default window_params for a team_info_box.
    - name: OVERLAY11_OVERLAY_LOAD_TABLE
      address:
        EU: 0x2323B9C
        NA: 0x232306C
        JP: 0x23245E8
      length:
        EU: 0x150
        NA: 0x150
      description: |-
        The overlays that can be loaded while this one is loaded.
        
        Each entry is 16 bytes, consisting of:
        - overlay group ID (see arm9.yml or enum overlay_group_id in the C headers for a mapping between group ID and overlay number)
        - function pointer to entry point
        - function pointer to destructor
        - possibly function pointer to frame-update function?
        
        type: struct overlay_load_entry[21]
    - name: UNIONALL_RAM_ADDRESS
      address:
        EU: 0x23257E4
        NA: 0x2324CA4
        JP: 0x2326204
      description: "[Runtime]"
    - name: GROUND_STATE_MAP
      address:
        EU: 0x2325800
        NA: 0x2324CC0
        JP: 0x2326220
      description: "[Runtime]"
    - name: GROUND_STATE_WEATHER
      address:
        EU: 0x232580C
      description: "[Runtime] Same structure format as GROUND_STATE_MAP"
    - name: GROUND_STATE_PTRS
      address:
        EU: 0x2325834
        NA: 0x2324CF4
        JP: 0x2326254
      length:
        EU: 0x18
        NA: 0x18
        JP: 0x18
      description: |-
        Host pointers to multiple structure used for performing an overworld scene
        
        type: struct main_ground_data
    - name: WORLD_MAP_MODE
      address:
        EU: 0x2325924
        NA: 0x2324DE4
        JP: 0x2326344
      length:
        EU: 0x4
        NA: 0x4
      description: The current world map
