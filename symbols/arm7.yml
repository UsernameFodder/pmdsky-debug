arm7:
  versions:
    - EU
    - NA
    - JP
    - EU-WRAM
    - NA-WRAM
    - JP-WRAM
    - EU-RAM
    - NA-RAM
    - JP-RAM
  address:
    EU: 0x2380000
    NA: 0x2380000
    JP: 0x2380000
    EU-WRAM: 0x37F8000
    NA-WRAM: 0x37F8000
    JP-WRAM: 0x37F8000
    EU-RAM: 0x27E0000
    NA-RAM: 0x27E0000
    JP-RAM: 0x27E0000
  length:
    EU: 0x27080
    NA: 0x27080
    JP: 0x27080
    EU-WRAM: 0xF608
    NA-WRAM: 0xF608
    JP-WRAM: 0xF608
    EU-RAM: 0x17878
    NA-RAM: 0x17878
    JP-RAM: 0x17878
  description: |-
    The ARM7 binary.
    
    This is the secondary binary that gets loaded when the game is launched.
    
    Speaking generally, this is the program run by the Nintendo DS's secondary ARM7TDMI CPU, which handles the audio I/O, the touch screen, Wi-Fi functions, cryptography, and more.
    
    Memory map: (binary is initially loaded at 0x2380000)
    0x2380000-0x23801E8 => Contains EntryArm7 and two more methods, all related to memory mapping.
    0x23801E8-0x238F7F0 => Mapped to 0x37F8000, contains NitroSpMain and functions crucial to execution.
    0x238F7F0-0x23A7068 => Mapped to 0x27E0000, contains everything else that won't fit in the fast WRAM.
    
    Note that while the length for the main EU/NA/JP block is defined as 0x27080 above, after memory mappings, the block located at that address is only a 0x1E8 long ENTRY block, containing 3 functions solely used for the initial memory mapping. The memory following this block is reused and its purpose is undocumented at the moment.
  functions:
    - name: EntryArm7
      address:
        EU: 0x2380000
        NA: 0x2380000
        JP: 0x2380000
      description: |-
        The entrypoint for the ARM7 CPU.
        
        Handles mapping the ARM7 binary into the various memory areas that the program will be using.
        
        Once the memory mapping has been completed, a constant containing the address to NitroSpMain is loaded into a register (r1), and a `bx` branch will jump to NitroSpMain.
        
        No params.
    - name: NitroSpMain
      address:
        EU: 0x23801E8
        NA: 0x23801E8
        JP: 0x23801E8
        EU-WRAM: 0x37F8000
        NA-WRAM: 0x37F8000
        JP-WRAM: 0x37F8000
      description: |-
        This main function for the ARM7 subsystem. Contains the main event loop.
        
        No params.
    - name: ClearIrqFlag
      address:
        EU: 0x2385ED4
        NA: 0x2385ED4
        JP: 0x2385ED4
        EU-WRAM: 0x37FDCEC
        NA-WRAM: 0x37FDCEC
        JP-WRAM: 0x37FDCEC
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were already enabled)
    - name: EnableIrqFlag
      address:
        EU: 0x2385EE8
        NA: 0x2385EE8
        JP: 0x2385EE8
        EU-WRAM: 0x37FDD00
        NA-WRAM: 0x37FDD00
        JP-WRAM: 0x37FDD00
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were already disabled, 0x0 if they were enabled)
    - name: SetIrqFlag
      address:
        EU: 0x2385EFC
        NA: 0x2385EFC
        JP: 0x2385EFC
        EU-WRAM: 0x37FDD14
        NA-WRAM: 0x37FDD14
        JP-WRAM: 0x37FDD14
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        r0: Value to set the flag to (0x80 to set it, which disables interrupts; 0x0 to unset it, which enables interrupts)
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were enabled)
    - name: EnableIrqFiqFlags
      address:
        EU: 0x2385F14
        NA: 0x2385F14
        JP: 0x2385F14
        EU-WRAM: 0x37FDD2C
        NA-WRAM: 0x37FDD2C
        JP-WRAM: 0x37FDD2C
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: SetIrqFiqFlags
      address:
        EU: 0x2385F28
        NA: 0x2385F28
        JP: 0x2385F28
        EU-WRAM: 0x37FDD40
        NA-WRAM: 0x37FDD40
        JP-WRAM: 0x37FDD40
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        r0: Value to set the flags to (0xC0 to set both flags, 0x80 to set the i flag and clear the f flag, 0x40 to set the f flag and clear the i flag and 0x0 to clear both flags)
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: GetProcessorMode
      address:
        EU: 0x2385F40
        NA: 0x2385F40
        JP: 0x2385F40
        EU-WRAM: 0x37FDD58
        NA-WRAM: 0x37FDD58
        JP-WRAM: 0x37FDD58
      description: |-
        Gets the processor's current operating mode.
        
        See https://problemkaputt.de/gbatek.htm#armcpuflagsconditionfieldcond
        
        return: cpsr & 0x1f (the cpsr mode bits M4-M0)
    - name: __divsi3
      address:
        EU: 0x238EDB0
        NA: 0x238EDB0
        JP: 0x238EDB0
        EU-WRAM: 0x3806BC8
        NA-WRAM: 0x3806BC8
        JP-WRAM: 0x3806BC8
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: __udivsi3
      address:
        EU: 0x238EFBC
        NA: 0x238EFBC
        JP: 0x238EFBC
        EU-WRAM: 0x3806DD4
        NA-WRAM: 0x3806DD4
        JP-WRAM: 0x3806DD4
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: __udivsi3_no_zero_check
      address:
        EU: 0x238EFC4
        NA: 0x238EFC4
        JP: 0x238EFC4
        EU-WRAM: 0x3806DDC
        NA-WRAM: 0x3806DDC
        JP-WRAM: 0x3806DDC
      description: |-
        Copy of the ARM9 function. See arm9.yml for more information.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
  data: []
