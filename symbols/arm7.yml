arm7:
  versions:
    - EU
    - NA
    - JP
  address:
    EU: 0x2380000
    NA: 0x2380000
    JP: 0x2380000
  length:
    EU: 0x27080
    NA: 0x27080
    JP: 0x27080
  description: |-
    The ARM7 binary.
    
    This is the secondary binary that gets loaded when the game is launched.
    
    Speaking generally, this is the program run by the Nintendo DS's secondary ARM7TDMI CPU, which handles the audio engine, the touch screen, Wi-Fi functions, cryptography, and more.
  functions:
    - name: EntryArm7
      address:
        EU: 0x2380000
        NA: 0x2380000
        JP: 0x2380000
      description: |-
        The entrypoint for the ARM7 CPU. This is like the "main" function for the ARM7 subsystem.
        
        No params.
    - name: ClearIrqFlag
      address:
        EU: 0x2385ED4
        NA: 0x2385ED4
        JP: 0x2385ED4
      description: |-
        Enables processor interrupts by clearing the i flag in the program status register (cpsr).
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were already enabled)
    - name: EnableIrqFlag
      address:
        EU: 0x2385EE8
        NA: 0x2385EE8
        JP: 0x2385EE8
      description: |-
        Disables processor interrupts by setting the i flag in the program status register (cpsr).
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were already disabled, 0x0 if they were enabled)
    - name: SetIrqFlag
      address:
        EU: 0x2385EFC
        NA: 0x2385EFC
        JP: 0x2385EFC
      description: |-
        Sets the value of the processor's interrupt flag according to the specified parameter.
        
        r0: Value to set the flag to (0x80 to set it, which disables interrupts; 0x0 to unset it, which enables interrupts)
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were enabled)
    - name: EnableIrqFiqFlags
      address:
        EU: 0x2385F14
        NA: 0x2385F14
        JP: 0x2385F14
      description: |-
        Disables processor all interrupts (both standard and fast) by setting the i and f flags in the program status register (cpsr).
        
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: SetIrqFiqFlags
      address:
        EU: 0x2385F28
        NA: 0x2385F28
        JP: 0x2385F28
      description: |-
        Sets the value of the processor's interrupt flags (i and f) according to the specified parameter.
        
        r0: Value to set the flags to (0xC0 to set both flags, 0x80 to set the i flag and clear the f flag, 0x40 to set the f flag and clear the i flag and 0x0 to clear both flags)
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: GetProcessorMode
      address:
        EU: 0x2385F40
        NA: 0x2385F40
        JP: 0x2385F40
      description: |-
        Gets the processor's current operating mode.
        
        See https://problemkaputt.de/gbatek.htm#armcpuflagsconditionfieldcond
        
        return: cpsr & 0x1f (the cpsr mode bits M4-M0)
  data: []
