libs:
  versions:
    - EU
    - NA
    - JP
  address:
    EU: 0x206C470
    NA: 0x206C0D8
    JP: 0x206C3C0
  length:
    EU: 0x247FC
    NA: 0x247FC
    JP: 0x247FC
  description: |-
    System libraries linked to the main ARM9 binary.
    
    This includes code from common NDS system libraries like the Nitro SDK (which contains NDS-specific functionality as well as utilities akin to libc and libgcc).
    
    Where the library region starts and ends is a guess, but there appear to be fairly sharp boundaries. The function directly before it calls functions at lower memory addresses outside of the region, while all functions in the region only call other functions within the region. The bytes after the region seem to be the start of a global data region, used by both the libraries and the rest of ARM9.
  functions:
    - name: DseDriver_LoadDefaultSettings
      address:
        EU: 0x206C558
        NA: 0x206C1C0
        JP: 0x206C4A8
    - name: DseDriver_IsSettingsValid
      address:
        EU: 0x206C5F0
        NA: 0x206C258
        JP: 0x206C540
      description: |-
        r0: DSE driver settings
        return: Flags specifying what settings are invalid.
    - name: DseDriver_ConfigureHeap
      address:
        EU: 0x206C6D4
        NA: 0x206C33C
        JP: 0x206C624
    - name: DseDriver_Init
      address:
        EU: 0x206C778
        NA: 0x206C3E0
        JP: 0x206C6C8
    - name: Dse_SetError
      address:
        EU: 0x206CBEC
        NA: 0x206C854
        JP: 0x206CB3C
    - name: Dse_SetError2
      address:
        EU: 0x206CC20
        NA: 0x206C888
        JP: 0x206CB70
    - name: DseUtil_ByteSwap32
      address:
        EU: 0x206CC5C
        NA: 0x206C8C4
        JP: 0x206CBAC
    - name: SoundUtil_GetRandomNumber
      aliases:
        - DseUtil_GetRandomNumber
      address:
        EU: 0x206CC8C
        NA: 0x206C8F4
        JP: 0x206CBDC
      description: "return: random number in the range [0, 32767]"
    - name: DseMem_Init
      address:
        EU: 0x206CCB4
        NA: 0x206C91C
        JP: 0x206CC04
    - name: DseMem_Quit
      address:
        EU: 0x206CD24
        NA: 0x206C98C
        JP: 0x206CC74
    - name: DseMem_AllocateUser
      address:
        EU: 0x206CD40
        NA: 0x206C9A8
        JP: 0x206CC90
    - name: DseMem_Allocate
      address:
        EU: 0x206CD54
        NA: 0x206C9BC
        JP: 0x206CCA4
    - name: DseMem_AllocateThreadStack
      address:
        EU: 0x206CE64
        NA: 0x206CACC
        JP: 0x206CDB4
    - name: DseMem_Free
      address:
        EU: 0x206CFAC
        NA: 0x206CC14
        JP: 0x206CEFC
    - name: DseMem_Clear
      address:
        EU: 0x206D054
        NA: 0x206CCBC
        JP: 0x206CFA4
    - name: DseFile_CheckHeader
      address:
        EU: 0x206D0B4
        NA: 0x206CD1C
        JP: 0x206D004
    - name: DseSwd_SysInit
      address:
        EU: 0x206D134
        NA: 0x206CD9C
        JP: 0x206D084
    - name: DseSwd_SysQuit
      address:
        EU: 0x206D1C0
        NA: 0x206CE28
        JP: 0x206D110
    - name: DseSwd_SampleLoaderMain
      address:
        EU: 0x206D200
        NA: 0x206CE68
        JP: 0x206D150
    - name: DseSwd_MainBankDummyCallback
      address:
        EU: 0x206D260
        NA: 0x206CEC8
        JP: 0x206D1B0
    - name: DseSwd_LoadMainBank
      address:
        EU: 0x206D268
        NA: 0x206CED0
        JP: 0x206D1B8
    - name: DseSwd_LoadBank
      address:
        EU: 0x206D4A0
        NA: 0x206D108
        JP: 0x206D3F0
    - name: DseSwd_IsBankLoading
      address:
        EU: 0x206D6A4
        NA: 0x206D30C
        JP: 0x206D5F4
    - name: DseSwd_LoadWaves
      address:
        EU: 0x206D6C0
        NA: 0x206D328
        JP: 0x206D610
    - name: DseSwd_LoadWavesInternal
      address:
        EU: 0x206D770
        NA: 0x206D3D8
        JP: 0x206D6C0
    - name: DseSwd_Unload
      address:
        EU: 0x206D87C
        NA: 0x206D4E4
        JP: 0x206D7CC
    - name: ReadWaviEntry
      address:
        EU: 0x206D8F0
        NA: 0x206D558
        JP: 0x206D840
      description: |-
        Reads an entry from the pointer table of a wavi container and returns a pointer to the data of said entry, which contains information about a particular sample.
        
        r0: Wavi data struct
        r1: Entry index
        return: Pointer to the entry's data
    - name: DseSwd_GetInstrument
      address:
        EU: 0x206D928
        NA: 0x206D590
        JP: 0x206D878
    - name: DseSwd_GetNextSplitInRange
      address:
        EU: 0x206D960
        NA: 0x206D5C8
        JP: 0x206D8B0
    - name: DseSwd_GetMainBankById
      address:
        EU: 0x206D9E8
        NA: 0x206D650
        JP: 0x206D938
    - name: DseSwd_GetBankById
      address:
        EU: 0x206DA38
        NA: 0x206D6A0
        JP: 0x206D988
    - name: DseSwd_InitMainBankFileReader
      address:
        EU: 0x206DA88
        NA: 0x206D6F0
        JP: 0x206D9D8
    - name: DseSwd_OpenMainBankFileReader
      address:
        EU: 0x206DA98
        NA: 0x206D700
        JP: 0x206D9E8
    - name: DseSwd_CloseMainBankFileReader
      address:
        EU: 0x206DAC4
        NA: 0x206D72C
        JP: 0x206DA14
    - name: DseSwd_ReadMainBank
      address:
        EU: 0x206DAD4
        NA: 0x206D73C
        JP: 0x206DA24
    - name: DseBgm_DefaultSignalCallback
      address:
        EU: 0x206DB98
        NA: 0x206D800
        JP: 0x206DAE8
    - name: DseBgm_Load
      address:
        EU: 0x206DBA0
        NA: 0x206D808
        JP: 0x206DAF0
    - name: DseBgm_Unload
      address:
        EU: 0x206DCA4
        NA: 0x206D90C
        JP: 0x206DBF4
    - name: DseBgm_SetSignalCallback
      address:
        EU: 0x206DCDC
        NA: 0x206D944
        JP: 0x206DC2C
    - name: DseBgm_IsPlaying
      address:
        EU: 0x206DD3C
        NA: 0x206D9A4
        JP: 0x206DC8C
    - name: ResumeBgm
      address:
        EU: 0x206DD54
        NA: 0x206D9BC
        JP: 0x206DCA4
      description: |-
        Uncertain.
        
        Note: unverified, ported from Irdkwia's notes
    - name: DseBgm_Stop
      address:
        EU: 0x206DE34
        NA: 0x206DA9C
        JP: 0x206DD84
    - name: DseBgm_StopAll
      address:
        EU: 0x206DE74
        NA: 0x206DADC
        JP: 0x206DDC4
    - name: DseBgm_SetFades
      address:
        EU: 0x206DED4
        NA: 0x206DB3C
        JP: 0x206DE24
    - name: DseSequence_Start
      address:
        EU: 0x206DF14
        NA: 0x206DB7C
        JP: 0x206DE64
    - name: DseSequence_PauseList
      address:
        EU: 0x206DFA4
        NA: 0x206DC0C
        JP: 0x206DEF4
    - name: DseSequence_SetFades
      address:
        EU: 0x206E108
        NA: 0x206DD70
        JP: 0x206E058
    - name: DseSequence_GetParameter
      address:
        EU: 0x206E3FC
        NA: 0x206E064
        JP: 0x206E34C
    - name: DseSequence_GetSmallestNumLoops
      address:
        EU: 0x206E5B0
        NA: 0x206E218
        JP: 0x206E500
    - name: DseSequence_Reset
      address:
        EU: 0x206E604
        NA: 0x206E26C
        JP: 0x206E554
    - name: DseSequence_Stop
      address:
        EU: 0x206E75C
        NA: 0x206E3C4
        JP: 0x206E6AC
    - name: FindSmdlSongChunk
      address:
        EU: 0x206E880
        NA: 0x206E4E8
        JP: 0x206E7D0
      description: |-
        Finds the first song chunk within an SMDL file that has the specified value on its 0x10 field.
        
        See https://projectpokemon.org/home/docs/mystery-dungeon-nds/dse-smdl-format-r13/.
        
        r0: Pointer to the start of the SMDL file
        r1: Value to search for
        return: Pointer to the first chunk that has the specified value + 0x10, or null if no chunk was found.
    - name: DseSequence_LoadSong
      address:
        EU: 0x206E8EC
        NA: 0x206E554
        JP: 0x206E83C
    - name: DseSequence_GetById
      address:
        EU: 0x206E9EC
        NA: 0x206E654
        JP: 0x206E93C
    - name: DseSequence_AllocateNew
      address:
        EU: 0x206EA38
        NA: 0x206E6A0
        JP: 0x206E988
    - name: DseSequence_Unload
      address:
        EU: 0x206EB70
        NA: 0x206E7D8
        JP: 0x206EAC0
    - name: DseSequence_InitTracks
      address:
        EU: 0x206EBF4
        NA: 0x206E85C
        JP: 0x206EB44
    - name: DseBgm_SysSetupNoteList
      address:
        EU: 0x206EC44
        NA: 0x206E8AC
        JP: 0x206EB94
    - name: DseSe_SysReset
      address:
        EU: 0x206ECB8
        NA: 0x206E920
        JP: 0x206EC08
    - name: DseSe_Load
      address:
        EU: 0x206EDB0
        NA: 0x206EA18
        JP: 0x206ED00
    - name: DseSe_Unload
      address:
        EU: 0x206EF64
        NA: 0x206EBCC
        JP: 0x206EEB4
    - name: DseSe_GetUsedBankIDs
      address:
        EU: 0x206EFF4
        NA: 0x206EC5C
        JP: 0x206EF44
    - name: DseSe_HasPlayingInstances
      address:
        EU: 0x206F0C8
        NA: 0x206ED30
        JP: 0x206F018
    - name: DseSe_Play
      address:
        EU: 0x206F194
        NA: 0x206EDFC
        JP: 0x206F0E4
    - name: DseSe_GetEffectSong
      address:
        EU: 0x206F348
        NA: 0x206EFB0
        JP: 0x206F298
    - name: DseSe_CheckTooManyInstances
      address:
        EU: 0x206F390
        NA: 0x206EFF8
        JP: 0x206F2E0
    - name: DseSe_CheckTooManyInstancesInGroup
      address:
        EU: 0x206F498
        NA: 0x206F100
        JP: 0x206F3E8
    - name: DseSe_GetBestSeqAllocation
      address:
        EU: 0x206F65C
        NA: 0x206F2C4
        JP: 0x206F5AC
    - name: DseSe_GetById
      address:
        EU: 0x206F6D8
        NA: 0x206F340
        JP: 0x206F628
    - name: DseSe_Stop
      address:
        EU: 0x206F724
        NA: 0x206F38C
        JP: 0x206F674
    - name: DseSe_StopAll
      address:
        EU: 0x206F878
        NA: 0x206F4E0
        JP: 0x206F7C8
    - name: DseSe_StopSeq
      address:
        EU: 0x206F8E4
        NA: 0x206F54C
        JP: 0x206F834
    - name: FlushChannels
      address:
        EU: 0x2070A0C
        NA: 0x2070674
        JP: 0x207095C
      description: "Note: unverified, ported from Irdkwia's notes"
    - name: DseDriver_StartMainThread
      address:
        EU: 0x20711A4
        NA: 0x2070E0C
        JP: 0x20710F4
    - name: DseDriver_StartTickTimer
      address:
        EU: 0x2071274
        NA: 0x2070EDC
        JP: 0x20711C4
    - name: DseDriver_NotifyTick
      address:
        EU: 0x207136C
        NA: 0x2070FD4
        JP: 0x20712BC
    - name: DseDriver_Main
      address:
        EU: 0x20713AC
        NA: 0x2071014
        JP: 0x20712FC
    - name: DseSequence_TickNotes
      address:
        EU: 0x20714F8
        NA: 0x2071160
        JP: 0x2071448
    - name: ParseDseEvent
      address:
        EU: 0x20715BC
        NA: 0x2071224
        JP: 0x207150C
      description: |-
        Parses and executes a DSE event for the specified track, if necessary.
        
        The function checks the time left before the next event (track_data::event_delay), and parses it if said time is 0.
        
        See also https://projectpokemon.org/docs/mystery-dungeon-nds/procyon-studios-digital-sound-elements-r12/
        
        r0: Pointer to some struct that seems to hold the state of the audio engine
        r1: Pointer to track data
    - name: UpdateSequencerTracks
      address:
        EU: 0x2071780
        NA: 0x20713E8
        JP: 0x20716D0
      description: "From https://projectpokemon.org/docs/mystery-dungeon-nds/procyon-studios-digital-sound-elements-r12/"
    - name: DseSequence_TickFades
      address:
        EU: 0x2071B1C
        NA: 0x2071784
        JP: 0x2071A6C
    - name: DseTrackEvent_Invalid
      address:
        EU: 0x2071CB4
        NA: 0x207191C
        JP: 0x2071C04
    - name: DseTrackEvent_WaitSame
      address:
        EU: 0x2071CC0
        NA: 0x2071928
        JP: 0x2071C10
    - name: DseTrackEvent_WaitDelta
      address:
        EU: 0x2071CCC
        NA: 0x2071934
        JP: 0x2071C1C
    - name: DseTrackEvent_Wait8
      address:
        EU: 0x2071CE4
        NA: 0x207194C
        JP: 0x2071C34
    - name: DseTrackEvent_Wait16
      address:
        EU: 0x2071CF4
        NA: 0x207195C
        JP: 0x2071C44
    - name: DseTrackEvent_Wait24
      address:
        EU: 0x2071D10
        NA: 0x2071978
        JP: 0x2071C60
    - name: DseTrackEvent_WaitUntilFadeout
      address:
        EU: 0x2071D34
        NA: 0x207199C
        JP: 0x2071C84
    - name: DseTrackEvent_EndTrack
      address:
        EU: 0x2071D60
        NA: 0x20719C8
        JP: 0x2071CB0
    - name: DseTrackEvent_MainLoopBegin
      address:
        EU: 0x2071DAC
        NA: 0x2071A14
        JP: 0x2071CFC
    - name: DseTrackEvent_SubLoopBegin
      address:
        EU: 0x2071DB4
        NA: 0x2071A1C
        JP: 0x2071D04
    - name: DseTrackEvent_SubLoopEnd
      address:
        EU: 0x2071DF4
        NA: 0x2071A5C
        JP: 0x2071D44
    - name: DseTrackEvent_SubLoopBreakOnLastIteration
      address:
        EU: 0x2071E30
        NA: 0x2071A98
        JP: 0x2071D80
    - name: DseTrackEvent_SetOctave
      address:
        EU: 0x2071E58
        NA: 0x2071AC0
        JP: 0x2071DA8
    - name: DseTrackEvent_OctaveDelta
      address:
        EU: 0x2071E64
        NA: 0x2071ACC
        JP: 0x2071DB4
    - name: DseTrackEvent_SetBpm
      address:
        EU: 0x2071E78
        NA: 0x2071AE0
        JP: 0x2071DC8
    - name: DseTrackEvent_SetBpm2
      address:
        EU: 0x2071EB8
        NA: 0x2071B20
        JP: 0x2071E08
    - name: DseTrackEvent_SetBank
      address:
        EU: 0x2071EF8
        NA: 0x2071B60
        JP: 0x2071E48
    - name: DseTrackEvent_SetBankMsb
      address:
        EU: 0x2071F24
        NA: 0x2071B8C
        JP: 0x2071E74
    - name: DseTrackEvent_SetBankLsb
      address:
        EU: 0x2071F54
        NA: 0x2071BBC
        JP: 0x2071EA4
    - name: DseTrackEvent_Dummy1Byte
      address:
        EU: 0x2071F84
        NA: 0x2071BEC
        JP: 0x2071ED4
    - name: DseTrackEvent_SetInstrument
      address:
        EU: 0x2071F8C
        NA: 0x2071BF4
        JP: 0x2071EDC
    - name: DseTrackEvent_SongVolumeFade
      address:
        EU: 0x2071FD4
        NA: 0x2071C3C
        JP: 0x2071F24
    - name: DseTrackEvent_RestoreEnvelopeDefaults
      address:
        EU: 0x2072060
        NA: 0x2071CC8
        JP: 0x2071FB0
    - name: DseTrackEvent_SetEnvelopeAttackBegin
      address:
        EU: 0x2072078
        NA: 0x2071CE0
        JP: 0x2071FC8
    - name: DseTrackEvent_SetEnvelopeAttackTime
      address:
        EU: 0x2072098
        NA: 0x2071D00
        JP: 0x2071FE8
    - name: DseTrackEvent_SetEnvelopeHoldTime
      address:
        EU: 0x20720B8
        NA: 0x2071D20
        JP: 0x2072008
    - name: DseTrackEvent_SetEnvelopeDecayTimeAndSustainLevel
      address:
        EU: 0x20720D8
        NA: 0x2071D40
        JP: 0x2072028
    - name: DseTrackEvent_SetEnvelopeSustainTime
      address:
        EU: 0x2072108
        NA: 0x2071D70
        JP: 0x2072058
    - name: DseTrackEvent_SetEnvelopeReleaseTime
      address:
        EU: 0x2072128
        NA: 0x2071D90
        JP: 0x2072078
    - name: DseTrackEvent_SetNoteDurationMultiplier
      address:
        EU: 0x2072148
        NA: 0x2071DB0
        JP: 0x2072098
    - name: DseTrackEvent_ForceLfoEnvelopeLevel
      address:
        EU: 0x2072154
        NA: 0x2071DBC
        JP: 0x20720A4
    - name: DseTrackEvent_SetHoldNotes
      address:
        EU: 0x2072170
        NA: 0x2071DD8
        JP: 0x20720C0
    - name: DseTrackEvent_SetFlagBit1Unknown
      address:
        EU: 0x20721A8
        NA: 0x2071E10
        JP: 0x20720F8
    - name: DseTrackEvent_SetOptionalVolume
      address:
        EU: 0x20721B8
        NA: 0x2071E20
        JP: 0x2072108
    - name: DseTrackEvent_Dummy2Bytes
      address:
        EU: 0x20721C4
        NA: 0x2071E2C
        JP: 0x2072114
    - name: DseTrackEvent_SetTuning
      address:
        EU: 0x20721CC
        NA: 0x2071E34
        JP: 0x207211C
    - name: DseTrackEvent_TuningDeltaCoarse
      address:
        EU: 0x207224C
        NA: 0x2071EB4
        JP: 0x207219C
    - name: DseTrackEvent_TuningDeltaFine
      address:
        EU: 0x20722D4
        NA: 0x2071F3C
        JP: 0x2072224
    - name: DseTrackEvent_TuningDeltaFull
      address:
        EU: 0x207235C
        NA: 0x2071FC4
        JP: 0x20722AC
    - name: DseTrackEvent_TuningFade
      address:
        EU: 0x20723EC
        NA: 0x2072054
        JP: 0x207233C
    - name: DseTrackEvent_SetNoteRandomRegion
      address:
        EU: 0x20724DC
        NA: 0x2072144
        JP: 0x207242C
    - name: DseTrackEvent_SetTuningJitterAmplitude
      address:
        EU: 0x2072504
        NA: 0x207216C
        JP: 0x2072454
    - name: DseTrackEvent_SetKeyBend
      address:
        EU: 0x207251C
        NA: 0x2072184
        JP: 0x207246C
    - name: DseTrackEvent_SetUnknown2
      address:
        EU: 0x2072548
        NA: 0x20721B0
        JP: 0x2072498
    - name: DseTrackEvent_SetKeyBendRange
      address:
        EU: 0x2072560
        NA: 0x20721C8
        JP: 0x20724B0
    - name: DseTrackEvent_SetupKeyBendLfo
      address:
        EU: 0x207256C
        NA: 0x20721D4
        JP: 0x20724BC
    - name: DseTrackEvent_SetupKeyBendLfoEnvelope
      address:
        EU: 0x20725C4
        NA: 0x207222C
        JP: 0x2072514
    - name: DseTrackEvent_UseKeyBendLfo
      address:
        EU: 0x20725EC
        NA: 0x2072254
        JP: 0x207253C
    - name: DseTrackEvent_SetVolume
      address:
        EU: 0x2072614
        NA: 0x207227C
        JP: 0x2072564
    - name: DseTrackEvent_VolumeDelta
      address:
        EU: 0x20726A8
        NA: 0x2072310
        JP: 0x20725F8
    - name: DseTrackEvent_VolumeFade
      address:
        EU: 0x2072758
        NA: 0x20723C0
        JP: 0x20726A8
    - name: DseTrackEvent_SetExpression
      address:
        EU: 0x20727B4
        NA: 0x207241C
        JP: 0x2072704
    - name: DseTrackEvent_SetupVolumeLfo
      address:
        EU: 0x2072840
        NA: 0x20724A8
        JP: 0x2072790
    - name: DseTrackEvent_SetupVolumeLfoEnvelope
      address:
        EU: 0x207289C
        NA: 0x2072504
        JP: 0x20727EC
    - name: DseTrackEvent_UseVolumeLfo
      address:
        EU: 0x20728C4
        NA: 0x207252C
        JP: 0x2072814
    - name: DseTrackEvent_SetPan
      address:
        EU: 0x20728EC
        NA: 0x2072554
        JP: 0x207283C
    - name: DseTrackEvent_PanDelta
      address:
        EU: 0x207296C
        NA: 0x20725D4
        JP: 0x20728BC
    - name: DseTrackEvent_PanFade
      address:
        EU: 0x2072A00
        NA: 0x2072668
        JP: 0x2072950
    - name: DseTrackEvent_SetupPanLfo
      address:
        EU: 0x2072A5C
        NA: 0x20726C4
        JP: 0x20729AC
    - name: DseTrackEvent_SetupPanLfoEnvelope
      address:
        EU: 0x2072AB8
        NA: 0x2072720
        JP: 0x2072A08
    - name: DseTrackEvent_UsePanLfo
      address:
        EU: 0x2072AE0
        NA: 0x2072748
        JP: 0x2072A30
    - name: DseTrackEvent_SetupLfo
      address:
        EU: 0x2072B08
        NA: 0x2072770
        JP: 0x2072A58
    - name: DseTrackEvent_SetupLfoEnvelope
      address:
        EU: 0x2072B60
        NA: 0x20727C8
        JP: 0x2072AB0
    - name: DseTrackEvent_SetLfoParameter
      address:
        EU: 0x2072B94
        NA: 0x20727FC
        JP: 0x2072AE4
    - name: DseTrackEvent_UseLfo
      address:
        EU: 0x2072CD0
        NA: 0x2072938
        JP: 0x2072C20
    - name: DseTrackEvent_Signal
      address:
        EU: 0x2072D04
        NA: 0x207296C
        JP: 0x2072C54
    - name: DseTrackEvent_Dummy2Bytes2
      address:
        EU: 0x2072D34
        NA: 0x207299C
        JP: 0x2072C84
    - name: DseSynth_Reset
      address:
        EU: 0x20735A0
        NA: 0x2073208
        JP: 0x20734F0
    - name: DseSynth_AllocateNew
      address:
        EU: 0x2073618
        NA: 0x2073280
        JP: 0x2073568
    - name: DseSynth_Unload
      address:
        EU: 0x20736E8
        NA: 0x2073350
        JP: 0x2073638
    - name: DseSynth_ClearHeldNotes
      address:
        EU: 0x2073754
        NA: 0x20733BC
        JP: 0x20736A4
    - name: DseSynth_ResetAndSetBankAndSequence
      address:
        EU: 0x20737F0
        NA: 0x2073458
        JP: 0x2073740
    - name: DseSynth_StopChannels
      address:
        EU: 0x2073818
        NA: 0x2073480
        JP: 0x2073768
    - name: DseSynth_ResetAllVoiceTimersAndVolumes
      address:
        EU: 0x2073844
        NA: 0x20734AC
        JP: 0x2073794
    - name: DseSynth_RestoreHeldNotes
      address:
        EU: 0x207389C
        NA: 0x2073504
        JP: 0x20737EC
    - name: DseSynth_SetGlobalVolumeIndex
      address:
        EU: 0x2073904
        NA: 0x207356C
        JP: 0x2073854
    - name: DseSynth_SetBend
      address:
        EU: 0x20739EC
        NA: 0x2073654
        JP: 0x207393C
    - name: DseSynth_SetVolume
      address:
        EU: 0x2073A80
        NA: 0x20736E8
        JP: 0x20739D0
    - name: DseSynth_SetPan
      address:
        EU: 0x2073B50
        NA: 0x20737B8
        JP: 0x2073AA0
    - name: DseSynth_SetBankAndSequence
      address:
        EU: 0x2073BE4
        NA: 0x207384C
        JP: 0x2073B34
    - name: DseChannel_Init
      address:
        EU: 0x2073C74
        NA: 0x20738DC
        JP: 0x2073BC4
    - name: DseChannel_DeallocateVoices
      address:
        EU: 0x2073E28
        NA: 0x2073A90
        JP: 0x2073D78
    - name: DseChannel_ResetTimerAndVolumeForVoices
      address:
        EU: 0x2073EAC
        NA: 0x2073B14
        JP: 0x2073DFC
    - name: DseChannel_SetBank
      address:
        EU: 0x2073F28
        NA: 0x2073B90
        JP: 0x2073E78
    - name: DseChannel_SetInstrument
      address:
        EU: 0x2073F60
        NA: 0x2073BC8
        JP: 0x2073EB0
    - name: DseChannel_SetLfoConstEnvelopeLevel
      address:
        EU: 0x2073FF4
        NA: 0x2073C5C
        JP: 0x2073F44
    - name: DseChannel_SetKeyBend
      address:
        EU: 0x2074028
        NA: 0x2073C90
        JP: 0x2073F78
    - name: DseChannel_AllocateNote
      address:
        EU: 0x2074070
        NA: 0x2073CD8
        JP: 0x2073FC0
    - name: DseChannel_ReleaseNoteInternal
      address:
        EU: 0x2074100
        NA: 0x2073D68
        JP: 0x2074050
    - name: DseChannel_ChangeNote
      address:
        EU: 0x20741A8
        NA: 0x2073E10
        JP: 0x20740F8
    - name: DseChannel_ReleaseNote
      address:
        EU: 0x2074238
        NA: 0x2073EA0
        JP: 0x2074188
    - name: DseVoice_PlayNote
      address:
        EU: 0x2074274
        NA: 0x2073EDC
        JP: 0x20741C4
    - name: DseVoice_ReleaseNote
      address:
        EU: 0x20744E8
        NA: 0x2074150
        JP: 0x2074438
    - name: DseVoice_UpdateParameters
      address:
        EU: 0x207452C
        NA: 0x2074194
        JP: 0x207447C
    - name: DseVoice_ResetAll
      address:
        EU: 0x20746D0
        NA: 0x2074338
        JP: 0x2074620
    - name: DseVoice_ResetHW
      address:
        EU: 0x2074774
        NA: 0x20743DC
        JP: 0x20746C4
    - name: UpdateChannels
      address:
        EU: 0x2074824
        NA: 0x207448C
        JP: 0x2074774
      description: |-
        From https://projectpokemon.org/docs/mystery-dungeon-nds/procyon-studios-digital-sound-elements-r12/ and Irdkwia's notes.
        
        No params.
    - name: DseVoice_Cleanup
      address:
        EU: 0x2074914
        NA: 0x207457C
        JP: 0x2074864
    - name: DseVoice_Allocate
      address:
        EU: 0x20749B0
        NA: 0x2074618
        JP: 0x2074900
    - name: DseVoice_Start
      address:
        EU: 0x2074B18
        NA: 0x2074780
        JP: 0x2074A68
    - name: DseVoice_ReleaseHeld
      address:
        EU: 0x2074B74
        NA: 0x20747DC
        JP: 0x2074AC4
    - name: DseVoice_Release
      address:
        EU: 0x2074BF4
        NA: 0x207485C
        JP: 0x2074B44
    - name: DseVoice_Deallocate
      address:
        EU: 0x2074C38
        NA: 0x20748A0
        JP: 0x2074B88
    - name: DseVoice_FlagForActivation
      address:
        EU: 0x2074D3C
        NA: 0x20749A4
        JP: 0x2074C8C
    - name: DseVoice_FlagForDeactivation
      address:
        EU: 0x2074D8C
        NA: 0x20749F4
        JP: 0x2074CDC
    - name: DseVoice_CountNumActiveInChannel
      address:
        EU: 0x2074DC4
        NA: 0x2074A2C
        JP: 0x2074D14
    - name: DseVoice_UpdateHardware
      address:
        EU: 0x2074DF0
        NA: 0x2074A58
        JP: 0x2074D40
    - name: SoundEnvelope_Reset
      address:
        EU: 0x2075008
        NA: 0x2074C70
        JP: 0x2074F58
      description: "r0: Sound envelope pointer"
    - name: SoundEnvelopeParameters_Reset
      address:
        EU: 0x207501C
        NA: 0x2074C84
        JP: 0x2074F6C
      description: "r0: Sound envelope parameters pointer"
    - name: SoundEnvelopeParameters_CheckValidity
      address:
        EU: 0x2075038
        NA: 0x2074CA0
        JP: 0x2074F88
      description: "r0: Sound envelope parameters pointer"
    - name: SoundEnvelope_SetParameters
      address:
        EU: 0x207508C
        NA: 0x2074CF4
        JP: 0x2074FDC
      description: |-
        r0: Sound envelope pointer
        r1: Sound envelope parameters pointer
    - name: SoundEnvelope_SetSlide
      address:
        EU: 0x20750F0
        NA: 0x2074D58
        JP: 0x2075040
      description: |-
        r0: Sound envelope pointer
        r1: Target volume
        r2: Music duration lookup table index
    - name: UpdateTrackVolumeEnvelopes
      address:
        EU: 0x20751A4
        NA: 0x2074E0C
        JP: 0x20750F4
      description: |-
        From https://projectpokemon.org/docs/mystery-dungeon-nds/procyon-studios-digital-sound-elements-r12/
        
        r0: Sound envelope pointer
    - name: SoundEnvelope_Release
      address:
        EU: 0x2075270
        NA: 0x2074ED8
        JP: 0x20751C0
      description: "r0: Sound envelope pointer"
    - name: SoundEnvelope_Stop
      address:
        EU: 0x207529C
        NA: 0x2074F04
        JP: 0x20751EC
      description: "r0: Sound envelope pointer"
    - name: SoundEnvelope_ForceVolume
      address:
        EU: 0x20752B4
        NA: 0x2074F1C
        JP: 0x2075204
      description: |-
        r0: Sound envelope pointer
        r1: Volume
    - name: SoundEnvelope_Stop2
      address:
        EU: 0x20752D4
        NA: 0x2074F3C
        JP: 0x2075224
      description: "r0: Sound envelope pointer"
    - name: SoundEnvelope_Tick
      address:
        EU: 0x20752EC
        NA: 0x2074F54
        JP: 0x207523C
      description: |-
        r0: Sound envelope pointer
        return: Current volume
    - name: SoundLfoBank_Reset
      address:
        EU: 0x2075434
        NA: 0x207509C
        JP: 0x2075384
      description: "r0: LFO bank pointer"
    - name: SoundLfoBank_Set
      address:
        EU: 0x207544C
        NA: 0x20750B4
        JP: 0x207539C
      description: |-
        r0: LFO bank pointer
        r1: LFO settings pointer
        r2: Envelope level
    - name: SoundLfoBank_SetConstEnvelopes
      address:
        EU: 0x2075644
        NA: 0x20752AC
        JP: 0x2075594
      description: |-
        r0: LFO bank pointer
        r1: Level
    - name: SoundLfoBank_Tick
      address:
        EU: 0x2075690
        NA: 0x20752F8
        JP: 0x20755E0
      description: |-
        r0: LFO bank pointer
        return: New voice update flags
    - name: SoundLfoWave_InvalidFunc
      address:
        EU: 0x2075744
        NA: 0x20753AC
        JP: 0x2075694
      description: |-
        r0: LFO pointer
        return: 0
    - name: SoundLfoWave_HalfSquareFunc
      address:
        EU: 0x2075758
        NA: 0x20753C0
        JP: 0x20756A8
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_FullSquareFunc
      address:
        EU: 0x2075794
        NA: 0x20753FC
        JP: 0x20756E4
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_HalfTriangleFunc
      address:
        EU: 0x20757DC
        NA: 0x2075444
        JP: 0x207572C
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_FullTriangleFunc
      address:
        EU: 0x2075830
        NA: 0x2075498
        JP: 0x2075780
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_SawFunc
      address:
        EU: 0x2075894
        NA: 0x20754FC
        JP: 0x20757E4
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_ReverseSawFunc
      address:
        EU: 0x20758D0
        NA: 0x2075538
        JP: 0x2075820
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_HalfNoiseFunc
      address:
        EU: 0x207590C
        NA: 0x2075574
        JP: 0x207585C
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: SoundLfoWave_FullNoiseFunc
      address:
        EU: 0x2075950
        NA: 0x20755B8
        JP: 0x20758A0
      description: |-
        r0: LFO pointer
        return: LFO current output
    - name: Crypto_RC4Init
      address:
        EU: 0x2075AB8
        NA: 0x2075720
        JP: 0x2075A08
    - name: Mtx_LookAt
      address:
        EU: 0x2075BC0
        NA: 0x2075828
        JP: 0x2075B10
    - name: Mtx_OrthoW
      address:
        EU: 0x2075CC8
        NA: 0x2075930
        JP: 0x2075C18
    - name: FX_Div
      address:
        EU: 0x2075ED0
        NA: 0x2075B38
        JP: 0x2075E20
    - name: FX_GetDivResultFx64c
      address:
        EU: 0x2075EE0
        NA: 0x2075B48
        JP: 0x2075E30
    - name: FX_GetDivResult
      address:
        EU: 0x2075F04
        NA: 0x2075B6C
        JP: 0x2075E54
    - name: FX_InvAsync
      address:
        EU: 0x2075F3C
        NA: 0x2075BA4
        JP: 0x2075E8C
    - name: FX_DivAsync
      address:
        EU: 0x2075F6C
        NA: 0x2075BD4
        JP: 0x2075EBC
    - name: FX_DivS32
      address:
        EU: 0x2075F94
        NA: 0x2075BFC
        JP: 0x2075EE4
    - name: FX_ModS32
      address:
        EU: 0x2075FD0
        NA: 0x2075C38
        JP: 0x2075F20
    - name: Vec_DotProduct
      address:
        EU: 0x207600C
        NA: 0x2075C74
        JP: 0x2075F5C
    - name: Vec_CrossProduct
      address:
        EU: 0x2076048
        NA: 0x2075CB0
        JP: 0x2075F98
    - name: Vec_Normalize
      address:
        EU: 0x20760CC
        NA: 0x2075D34
        JP: 0x207601C
    - name: Vec_Distance
      address:
        EU: 0x20761E4
        NA: 0x2075E4C
        JP: 0x2076134
    - name: FX_Atan2Idx
      address:
        EU: 0x2076260
        NA: 0x2075EC8
        JP: 0x20761B0
    - name: GX_Init
      address:
        EU: 0x207640C
        NA: 0x2076074
        JP: 0x207635C
    - name: GX_HBlankIntr
      address:
        EU: 0x2076558
        NA: 0x20761C0
        JP: 0x20764A8
    - name: GX_VBlankIntr
      address:
        EU: 0x2076580
        NA: 0x20761E8
        JP: 0x20764D0
    - name: GX_DispOff
      address:
        EU: 0x20765B4
        NA: 0x207621C
        JP: 0x2076504
    - name: GX_DispOn
      address:
        EU: 0x20765F0
        NA: 0x2076258
        JP: 0x2076540
    - name: GX_SetGraphicsMode
      address:
        EU: 0x2076638
        NA: 0x20762A0
        JP: 0x2076588
    - name: Gxs_SetGraphicsMode
      address:
        EU: 0x20766A0
        NA: 0x2076308
        JP: 0x20765F0
    - name: GXx_SetMasterBrightness
      address:
        EU: 0x20766BC
        NA: 0x2076324
        JP: 0x207660C
    - name: GX_InitGxState
      address:
        EU: 0x20766E4
        NA: 0x207634C
        JP: 0x2076634
    - name: EnableVramBanksInSetDontSave
      address:
        EU: 0x2076744
        NA: 0x20763AC
        JP: 0x2076694
      description: |-
        Enable the VRAM bank marked in the input set, but don’t mark them as enabled in ENABLED_VRAM_BANKS
        
        r0: vram_banks_set
    - name: GX_SetBankForBg
      address:
        EU: 0x20767FC
        NA: 0x2076464
        JP: 0x207674C
    - name: GX_SetBankForObj
      address:
        EU: 0x2076A8C
        NA: 0x20766F4
        JP: 0x20769DC
    - name: GX_SetBankForBgExtPltt
      address:
        EU: 0x2076BDC
        NA: 0x2076844
        JP: 0x2076B2C
    - name: GX_SetBankForObjExtPltt
      address:
        EU: 0x2076CDC
        NA: 0x2076944
        JP: 0x2076C2C
    - name: GX_SetBankForTex
      address:
        EU: 0x2076D88
        NA: 0x20769F0
        JP: 0x2076CD8
    - name: GX_SetBankForTexPltt
      address:
        EU: 0x2076F60
        NA: 0x2076BC8
        JP: 0x2076EB0
    - name: GX_SetBankForClearImage
      address:
        EU: 0x2077048
        NA: 0x2076CB0
        JP: 0x2076F98
    - name: GX_SetBankForArm7
      address:
        EU: 0x207717C
        NA: 0x2076DE4
        JP: 0x20770CC
    - name: GX_SetBankForLcdc
      address:
        EU: 0x2077228
        NA: 0x2076E90
        JP: 0x2077178
    - name: GX_SetBankForSubBg
      address:
        EU: 0x2077248
        NA: 0x2076EB0
        JP: 0x2077198
    - name: GX_SetBankForSubObj
      address:
        EU: 0x20772F0
        NA: 0x2076F58
        JP: 0x2077240
    - name: GX_SetBankForSubBgExtPltt
      address:
        EU: 0x2077360
        NA: 0x2076FC8
        JP: 0x20772B0
    - name: GX_SetBankForSubObjExtPltt
      address:
        EU: 0x20773E0
        NA: 0x2077048
        JP: 0x2077330
    - name: EnableVramBanksInSet
      address:
        EU: 0x2077460
        NA: 0x20770C8
        JP: 0x20773B0
      description: |-
        Enable the VRAM banks in the input set. Will reset the pointed set to 0, and update ENABLED_VRAM_BANKS
        
        r0: vram_banks_set *
    - name: GX_ResetBankForBgExtPltt
      address:
        EU: 0x2077494
        NA: 0x20770FC
        JP: 0x20773E4
    - name: GX_ResetBankForObjExtPltt
      address:
        EU: 0x20774B8
        NA: 0x2077120
        JP: 0x2077408
    - name: GX_ResetBankForTex
      address:
        EU: 0x20774DC
        NA: 0x2077144
        JP: 0x207742C
    - name: GX_ResetBankForTexPltt
      address:
        EU: 0x20774F0
        NA: 0x2077158
        JP: 0x2077440
    - name: GX_ResetBankForSubBgExtPltt
      address:
        EU: 0x2077504
        NA: 0x207716C
        JP: 0x2077454
    - name: GX_ResetBankForSubObjExtPltt
      address:
        EU: 0x207752C
        NA: 0x2077194
        JP: 0x207747C
    - name: DisableBankForX
      address:
        EU: 0x2077554
        NA: 0x20771BC
        JP: 0x20774A4
    - name: GX_DisableBankForBg
      address:
        EU: 0x2077634
        NA: 0x207729C
        JP: 0x2077584
    - name: GX_DisableBankForObj
      address:
        EU: 0x2077648
        NA: 0x20772B0
        JP: 0x2077598
    - name: GX_DisableBankForBgExtPltt
      address:
        EU: 0x207765C
        NA: 0x20772C4
        JP: 0x20775AC
    - name: GX_DisableBankForObjExtPltt
      address:
        EU: 0x2077680
        NA: 0x20772E8
        JP: 0x20775D0
    - name: GX_DisableBankForTex
      address:
        EU: 0x20776A4
        NA: 0x207730C
        JP: 0x20775F4
    - name: GX_DisableBankForTexPltt
      address:
        EU: 0x20776B8
        NA: 0x2077320
        JP: 0x2077608
    - name: GX_DisableBankForClearImage
      address:
        EU: 0x20776CC
        NA: 0x2077334
        JP: 0x207761C
    - name: GX_DisableBankForArm7
      address:
        EU: 0x20776E0
        NA: 0x2077348
        JP: 0x2077630
    - name: GX_DisableBankForLcdc
      address:
        EU: 0x20776F4
        NA: 0x207735C
        JP: 0x2077644
    - name: GX_DisableBankForSubBg
      address:
        EU: 0x2077708
        NA: 0x2077370
        JP: 0x2077658
    - name: GX_DisableBankForSubObj
      address:
        EU: 0x207771C
        NA: 0x2077384
        JP: 0x207766C
    - name: GX_DisableBankForSubBgExtPltt
      address:
        EU: 0x2077730
        NA: 0x2077398
        JP: 0x2077680
    - name: GX_DisableBankForSubObjExtPltt
      address:
        EU: 0x2077758
        NA: 0x20773C0
        JP: 0x20776A8
    - name: G2_GetBG0ScrPtr
      address:
        EU: 0x2077780
        NA: 0x20773E8
        JP: 0x20776D0
    - name: G2S_GetBG0ScrPtr
      address:
        EU: 0x20777B4
        NA: 0x207741C
        JP: 0x2077704
    - name: G2_GetBG1ScrPtr
      address:
        EU: 0x20777D4
        NA: 0x207743C
        JP: 0x2077724
    - name: G2S_GetBG1ScrPtr
      address:
        EU: 0x2077808
        NA: 0x2077470
        JP: 0x2077758
    - name: G2_GetBG2ScrPtr
      address:
        EU: 0x2077828
        NA: 0x2077490
        JP: 0x2077778
    - name: G2_GetBG3ScrPtr
      address:
        EU: 0x20778AC
        NA: 0x2077514
        JP: 0x20777FC
    - name: G2_GetBG0CharPtr
      address:
        EU: 0x2077930
        NA: 0x2077598
        JP: 0x2077880
    - name: G2S_GetBG0CharPtr
      address:
        EU: 0x2077964
        NA: 0x20775CC
        JP: 0x20778B4
    - name: G2_GetBG1CharPtr
      address:
        EU: 0x2077984
        NA: 0x20775EC
        JP: 0x20778D4
    - name: G2S_GetBG1CharPtr
      address:
        EU: 0x20779B8
        NA: 0x2077620
        JP: 0x2077908
    - name: G2_GetBG2CharPtr
      address:
        EU: 0x20779D8
        NA: 0x2077640
        JP: 0x2077928
    - name: G2_GetBG3CharPtr
      address:
        EU: 0x2077A28
        NA: 0x2077690
        JP: 0x2077978
    - name: G2x_SetBlendAlpha
      address:
        EU: 0x2077A80
        NA: 0x20776E8
        JP: 0x20779D0
    - name: G2x_SetBlendBrightness
      address:
        EU: 0x2077A9C
        NA: 0x2077704
        JP: 0x20779EC
    - name: G2x_ChangeBlendBrightness
      address:
        EU: 0x2077AC4
        NA: 0x207772C
        JP: 0x2077A14
    - name: G3_LoadMtx44
      address:
        EU: 0x2077B08
        NA: 0x2077770
        JP: 0x2077A58
    - name: G3_LoadMtx43
      address:
        EU: 0x2077B24
        NA: 0x207778C
        JP: 0x2077A74
      description: |-
        Send the MTX_LOAD_4x3 geometry engine command, through a GXFIFO command. See https://problemkaputt.de/gbatek.htm#ds3dgeometrycommands and https://problemkaputt.de/gbatek.htm#ds3dmatrixloadmultiply for more information.
        
        This pops the top of the current matrix stack (https://problemkaputt.de/gbatek.htm#ds3dmatrixstack) and sets it as the engine's "current" matrix. It's commonly preceded by a MTX_PUSH command to populate the matrix stack with a matrix.
        
        r0: matrix_4x3 pointer
    - name: G3_MultMtx43
      address:
        EU: 0x2077B40
        NA: 0x20777A8
        JP: 0x2077A90
      description: |-
        Send the MTX_MULT_4x3 geometry engine command, through a GXFIFO command. See https://problemkaputt.de/gbatek.htm#ds3dgeometrycommands and https://problemkaputt.de/gbatek.htm#ds3dmatrixloadmultiply for more information.
        
        This pops the top of the current matrix stack (https://problemkaputt.de/gbatek.htm#ds3dmatrixstack) and left-multiplies the engine's "current" matrix by the new matrix. It's commonly preceded by a MTX_PUSH command to populate the matrix stack with a matrix.
        
        r0: matrix_4x3 pointer
    - name: G3X_Init
      address:
        EU: 0x2077B5C
        NA: 0x20777C4
        JP: 0x2077AAC
    - name: G3X_Reset
      address:
        EU: 0x2077C68
        NA: 0x20778D0
        JP: 0x2077BB8
    - name: G3X_ClearFifo
      address:
        EU: 0x2077CD4
        NA: 0x207793C
        JP: 0x2077C24
    - name: G3X_InitMtxStack
      address:
        EU: 0x2077CFC
        NA: 0x2077964
        JP: 0x2077C4C
    - name: G3X_ResetMtxStack
      address:
        EU: 0x2077D94
        NA: 0x20779FC
        JP: 0x2077CE4
    - name: G3X_SetClearColor
      address:
        EU: 0x2077E24
        NA: 0x2077A8C
        JP: 0x2077D74
    - name: G3X_InitTable
      address:
        EU: 0x2077E4C
        NA: 0x2077AB4
        JP: 0x2077D9C
    - name: G3X_GetMtxStackLevelPV
      address:
        EU: 0x2077EEC
        NA: 0x2077B54
        JP: 0x2077E3C
    - name: G3X_GetMtxStackLevelPJ
      address:
        EU: 0x2077F1C
        NA: 0x2077B84
        JP: 0x2077E6C
    - name: GXi_NopClearFifo128
      address:
        EU: 0x2077F4C
        NA: 0x2077BB4
        JP: 0x2077E9C
    - name: G3i_OrthoW
      address:
        EU: 0x2077FE0
        NA: 0x2077C48
        JP: 0x2077F30
    - name: G3i_LookAt
      address:
        EU: 0x2078044
        NA: 0x2077CAC
        JP: 0x2077F94
    - name: GX_LoadBgPltt
      address:
        EU: 0x2078090
        NA: 0x2077CF8
        JP: 0x2077FE0
    - name: Gxs_LoadBgPltt
      address:
        EU: 0x20780E4
        NA: 0x2077D4C
        JP: 0x2078034
    - name: GX_LoadObjPltt
      address:
        EU: 0x207813C
        NA: 0x2077DA4
        JP: 0x207808C
    - name: Gxs_LoadObjPltt
      address:
        EU: 0x2078194
        NA: 0x2077DFC
        JP: 0x20780E4
    - name: GX_LoadOam
      address:
        EU: 0x20781EC
        NA: 0x2077E54
        JP: 0x207813C
    - name: Gxs_LoadOam
      address:
        EU: 0x2078240
        NA: 0x2077EA8
        JP: 0x2078190
    - name: GX_LoadObj
      address:
        EU: 0x2078298
        NA: 0x2077F00
        JP: 0x20781E8
    - name: Gxs_LoadObj
      address:
        EU: 0x20782F0
        NA: 0x2077F58
        JP: 0x2078240
    - name: GX_LoadBg0Scr
      address:
        EU: 0x2078348
        NA: 0x2077FB0
        JP: 0x2078298
    - name: GX_LoadBg1Scr
      address:
        EU: 0x20783A8
        NA: 0x2078010
        JP: 0x20782F8
    - name: Gxs_LoadBg1Scr
      address:
        EU: 0x2078408
        NA: 0x2078070
        JP: 0x2078358
    - name: GX_LoadBg2Scr
      address:
        EU: 0x2078468
        NA: 0x20780D0
        JP: 0x20783B8
    - name: GX_LoadBg3Scr
      address:
        EU: 0x20784C8
        NA: 0x2078130
        JP: 0x2078418
    - name: GX_LoadBg0Char
      address:
        EU: 0x2078528
        NA: 0x2078190
        JP: 0x2078478
    - name: Gxs_LoadBg0Char
      address:
        EU: 0x2078588
        NA: 0x20781F0
        JP: 0x20784D8
    - name: GX_LoadBg1Char
      address:
        EU: 0x20785E8
        NA: 0x2078250
        JP: 0x2078538
    - name: Gxs_LoadBg1Char
      address:
        EU: 0x2078648
        NA: 0x20782B0
        JP: 0x2078598
    - name: GX_LoadBg2Char
      address:
        EU: 0x20786A8
        NA: 0x2078310
        JP: 0x20785F8
    - name: GX_LoadBg3Char
      address:
        EU: 0x2078708
        NA: 0x2078370
        JP: 0x2078658
    - name: GX_BeginLoadBgExtPltt
      address:
        EU: 0x2078768
        NA: 0x20783D0
        JP: 0x20786B8
    - name: GX_EndLoadBgExtPltt
      address:
        EU: 0x2078808
        NA: 0x2078470
        JP: 0x2078758
    - name: GX_BeginLoadObjExtPltt
      address:
        EU: 0x2078850
        NA: 0x20784B8
        JP: 0x20787A0
    - name: GX_EndLoadObjExtPltt
      address:
        EU: 0x2078898
        NA: 0x2078500
        JP: 0x20787E8
    - name: Gxs_BeginLoadBgExtPltt
      address:
        EU: 0x20788DC
        NA: 0x2078544
        JP: 0x207882C
    - name: Gxs_EndLoadBgExtPltt
      address:
        EU: 0x20788F4
        NA: 0x207855C
        JP: 0x2078844
    - name: Gxs_BeginLoadObjExtPltt
      address:
        EU: 0x2078934
        NA: 0x207859C
        JP: 0x2078884
    - name: Gxs_EndLoadObjExtPltt
      address:
        EU: 0x207894C
        NA: 0x20785B4
        JP: 0x207889C
    - name: GX_BeginLoadTex
      address:
        EU: 0x207898C
        NA: 0x20785F4
        JP: 0x20788DC
    - name: GX_LoadTex
      address:
        EU: 0x20789E8
        NA: 0x2078650
        JP: 0x2078938
    - name: GX_EndLoadTex
      address:
        EU: 0x2078B28
        NA: 0x2078790
        JP: 0x2078A78
    - name: GX_BeginLoadTexPltt
      address:
        EU: 0x2078B74
        NA: 0x20787DC
        JP: 0x2078AC4
    - name: GX_LoadTexPltt
      address:
        EU: 0x2078BA8
        NA: 0x2078810
        JP: 0x2078AF8
    - name: GX_EndLoadTexPltt
      address:
        EU: 0x2078C14
        NA: 0x207887C
        JP: 0x2078B64
    - name: GeomGxFifoSendMtx4x3
      address:
        EU: 0x2078C58
        NA: 0x20788C0
        JP: 0x2078BA8
      description: |-
        Send a 4x3 matrix argument for a GXFIFO geometry engine command.
        
        This function is used by GeomMtxLoad4x3 and GeomMtxMult4x3 to pass the matrix argument for a GXFIFO command after already having written the command code. See https://problemkaputt.de/gbatek.htm#ds3dgeometrycommands for more information.
        
        Note that the GXFIFO address is 0x4000400, but is (maybe) mirrored up to 0x400043F. This function is optimized to take advantage of this by writing 3 matrix entries at a time using ldmia and stmia instructions.
        
        r0: matrix_4x3 pointer
        r1: GXFIFO pointer
    - name: GX_SendFifo64B
      address:
        EU: 0x2078C7C
        NA: 0x20788E4
        JP: 0x2078BCC
    - name: OS_GetLockID
      address:
        EU: 0x20793C4
        NA: 0x207902C
        JP: 0x2079314
    - name: IncrementThreadCount
      address:
        EU: 0x20794E8
        NA: 0x2079150
        JP: 0x2079438
      description: |-
        Increments thread_info::thread_count by 1 and returns the new value.
        
        return: New thread count
    - name: InsertThreadIntoList
      address:
        EU: 0x2079630
        NA: 0x2079298
        JP: 0x2079580
      description: |-
        Inserts a new thread into the linked thread list (see thread_info::thread_list_head).
        
        The thread is inserted in sorted order.
        
        r0: Thread to insert
    - name: StartThread
      address:
        EU: 0x20798F8
        NA: 0x2079560
        JP: 0x2079848
      description: |-
        Called to start a new thread.
        
        Initializes the specified thread struct and some values on its stack area.
        
        r0: Struct of the thread to init
        r1: Pointer to the function to run on this thread
        r2: Pointer to a thread struct. Sometimes equal to r0. Sometimes null.
        r3: Pointer to the stack area for this thread. Not all the space is usable. See thread::usable_stack_pointer for more info.
        stack[0]: Stack size
        stack[1]: (?) Used to sort threads on a list
    - name: ThreadExit
      address:
        EU: 0x20799F4
        NA: 0x207965C
        JP: 0x2079944
      description: |-
        Function called by threads on exit.
        
        Base functions that contain an infinite loop that is not supposed to return and that have their stacks in main RAM have this function as their return address.
        
        No params.
    - name: SetThreadField0xB4
      address:
        EU: 0x207A014
        NA: 0x2079C7C
        JP: 0x2079F64
      description: |-
        Sets the given thread's field_0xB4 to the specified value.
        
        r0: Thread
        r1: Value to set
    - name: InitThread
      address:
        EU: 0x207A01C
        NA: 0x2079C84
        JP: 0x2079F6C
      description: |-
        Initializes some fields of the given thread struct.
        
        Most notably, thread::flags, thread::function_address_plus_4, thread::stack_pointer_minus_4 and thread::usable_stack_pointer. Also initializes a few more fields with a value of 0.
        thread::flags is initialized to 0x1F, unless the address of the function is odd (???), in which case it's initialized to 0x3F.
        
        r0: Pointer to the thread to initialize
        r1: Pointer to the function the thread will run
        r2: Pointer to the start of the thread's stack area - 4
    - name: GetTimer0Control
      address:
        EU: 0x207B27C
        NA: 0x207AEE4
        JP: 0x207B1CC
      description: |-
        Returns the value of the control register for hardware timer 0
        
        return: Value of the control register
    - name: ClearIrqFlag
      address:
        EU: 0x207BB68
        NA: 0x207B7D0
        JP: 0x207BAB8
      description: |-
        Enables processor interrupts by clearing the i flag in the program status register (cpsr).
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were already enabled)
    - name: EnableIrqFlag
      address:
        EU: 0x207BB7C
        NA: 0x207B7E4
        JP: 0x207BACC
      description: |-
        Disables processor interrupts by setting the i flag in the program status register (cpsr).
        
        return: Old value of cpsr & 0x80 (0x80 if interrupts were already disabled, 0x0 if they were enabled)
    - name: SetIrqFlag
      address:
        EU: 0x207BB90
        NA: 0x207B7F8
        JP: 0x207BAE0
      description: |-
        Sets the value of the processor's interrupt flag according to the specified parameter.
        
        r0: Value to set the flag to (0x80 to set it, which disables interrupts; 0x0 to unset it, which enables interrupts)
        return: Old value of cpsr & 0x80 (0x80 if interrupts were disabled, 0x0 if they were enabled)
    - name: EnableIrqFiqFlags
      address:
        EU: 0x207BBA8
        NA: 0x207B810
        JP: 0x207BAF8
      description: |-
        Disables processor all interrupts (both standard and fast) by setting the i and f flags in the program status register (cpsr).
        
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: SetIrqFiqFlags
      address:
        EU: 0x207BBBC
        NA: 0x207B824
        JP: 0x207BB0C
      description: |-
        Sets the value of the processor's interrupt flags (i and f) according to the specified parameter.
        
        r0: Value to set the flags to (0xC0 to set both flags, 0x80 to set the i flag and clear the f flag, 0x40 to set the f flag and clear the i flag and 0x0 to clear both flags)
        return: Old value of cpsr & 0xC0 (contains the previous values of the i and f flags)
    - name: GetIrqFlag
      address:
        EU: 0x207BBD4
        NA: 0x207B83C
        JP: 0x207BB24
      description: |-
        Gets the current value of the processor's interrupt request (i) flag
        
        return: cpsr & 0x80 (0x80 if interrupts are disabled, 0x0 if they are enabled)
    - name: GetProcessorMode
      address:
        EU: 0x207BBE0
        NA: 0x207B848
        JP: 0x207BB30
      description: |-
        Gets the processor's current operating mode.
        
        See https://problemkaputt.de/gbatek.htm#armcpuflagsconditionfieldcond
        
        return: cpsr & 0x1f (the cpsr mode bits M4-M0)
    - name: CountLeadingZeros
      address:
        EU: 0x207BE24
        NA: 0x207BA8C
        JP: 0x207BD74
      description: |-
        Counts the number of leading zeros in a 32-bit integer.
        
        r0: x
        return: clz(x)
    - name: WaitForever2
      address:
        EU: 0x207BFB8
        NA: 0x207BC20
        JP: 0x207BF08
      description: |-
        Calls EnableIrqFlag and WaitForInterrupt in an infinite loop.
        
        This is called on fatal errors to hang the program indefinitely.
        
        No params.
    - name: WaitForInterrupt
      address:
        EU: 0x207BFC8
        NA: 0x207BC30
        JP: 0x207BF18
      description: |-
        Presumably blocks until the program receives an interrupt.
        
        This just calls (in Ghidra terminology) coproc_moveto_Wait_for_interrupt(0). See https://en.wikipedia.org/wiki/ARM_architecture_family#Coprocessors.
        
        No params.
    - name: ArrayFill16
      address:
        EU: 0x207C650
        NA: 0x207C2B8
        JP: 0x207C5A0
      description: |-
        Fills an array of 16-bit values with a given value.
        
        r0: value
        r1: ptr
        r2: len (# bytes)
    - name: ArrayCopy16
      address:
        EU: 0x207C678
        NA: 0x207C2E0
        JP: 0x207C5C8
      description: |-
        Copies an array of 16-bit values to another array of 16-bit values.
        
        This is essentially an alternate implementation of Memcpy16, but with a different parameter order.
        
        r0: src
        r1: dest
        r2: len (# bytes)
    - name: ArrayFill32
      address:
        EU: 0x207C6AC
        NA: 0x207C314
        JP: 0x207C5FC
      description: |-
        Fills an array of 32-bit values with a given value.
        
        This is essentially an alternate implementation of Memset32, but with a different parameter order.
        
        r0: value
        r1: ptr
        r2: len (# bytes)
    - name: ArrayCopy32
      address:
        EU: 0x207C6C8
        NA: 0x207C330
        JP: 0x207C618
      description: |-
        Copies an array of 32-bit values to another array of 32-bit values.
        
        This is essentially an alternate implementation of Memcpy32, but with a different parameter order.
        
        r0: src
        r1: dest
        r2: len (# bytes)
    - name: ArrayFill32Fast
      address:
        EU: 0x207C6F0
        NA: 0x207C358
        JP: 0x207C640
      description: |-
        Does the same thing as ArrayFill32, except the implementation uses an unrolled loop that sets 8 values per iteration, taking advantage of the stmia instruction.
        
        r0: value
        r1: ptr
        r2: len (# bytes)
    - name: ArrayCopy32Fast
      address:
        EU: 0x207C74C
        NA: 0x207C3B4
        JP: 0x207C69C
      description: |-
        Does the same thing as ArrayCopy32, except the implementation uses an unrolled loop that copies 8 values per iteration, taking advantage of the ldmia/stmia instructions.
        
        r0: src
        r1: dest
        r2: len (# bytes)
    - name: MemsetFast
      address:
        EU: 0x207C7A4
        NA: 0x207C40C
        JP: 0x207C6F4
      description: |-
        A semi-optimized implementation of the memset(3) C library function.
        
        This function was probably manually implemented by the developers, or was included as part of a library other than libc (the Nitro SDK probably?). See memset for what's probably the real libc function.
        
        This function is optimized to set values in 4-byte chunks, properly dealing with pointer alignment. However, unlike the libc memset, there are no loop unrolling optimizations.
        
        r0: ptr
        r1: value
        r2: len (# bytes)
    - name: MemcpyFast
      address:
        EU: 0x207C860
        NA: 0x207C4C8
        JP: 0x207C7B0
      description: |-
        Copies bytes from one buffer to another, similar to memcpy(3). Note that the source/destination buffer parameters swapped relative to the standard memcpy.
        
        This function was probably manually implemented by the developers, or was included as part of a library other than libc (the Nitro SDK probably?). See memcpy for what's probably the real libc function.
        
        This function is optimized to copy values in 4-byte chunks, properly dealing with pointer alignment.
        
        r0: src
        r1: dest
        r2: n (# bytes)
    - name: AtomicExchange
      address:
        EU: 0x207C9E0
        NA: 0x207C648
        JP: 0x207C930
      description: |-
        Atomically replaces a pointer's pointee with a desired value, and returns the previous value.
        
        This function is just a single swp instruction.
        
        r0: desired value
        r1: ptr
        return: previous value
    - name: FileInit
      address:
        EU: 0x207F77C
        NA: 0x207F3E4
        JP: 0x207F6CC
      description: |-
        Initializes a file_stream structure for file I/O.
        
        This function must always be called before opening a file.
        
        r0: file_stream pointer
    - name: GetOverlayInfo
      address:
        EU: 0x2080034
        NA: 0x207FC9C
        JP: 0x207FF84
      description: |-
        Returns the y9.bin entry for the specified overlay
        
        r0: [output] Overlay info struct
        r1: ?
        r2: Overlay ID
        return: True if the entry could be loaded successfully?
    - name: LoadOverlayInternal
      address:
        EU: 0x2080130
        NA: 0x207FD98
        JP: 0x2080080
      description: |-
        Called by LoadOverlay to load an overlay into RAM given its info struct
        
        r0: Overlay info struct
        Return: True if the overlay was loaded successfully?
    - name: InitOverlay
      address:
        EU: 0x2080254
        NA: 0x207FEBC
        JP: 0x20801A4
      description: |-
        Performs overlay initialization right after loading an overlay with LoadOverlayInternal.
        
        This function is responsible for jumping to all the pointers located in the overlay's static init array, among other things.
        
        r0: Overlay info struct
    - name: abs
      address:
        EU: 0x20868F4
        NA: 0x208655C
        JP: 0x2086844
      description: |-
        Takes the absolute value of an integer.
        
        r0: x
        return: abs(x)
    - name: mbtowc
      address:
        EU: 0x2087554
        NA: 0x20871BC
        JP: 0x20874A4
      description: |-
        The mbtowc(3) C library function.
        
        r0: pwc
        r1: s
        r2: n
        return: number of consumed bytes, or -1 on failure
    - name: TryAssignByte
      address:
        EU: 0x208758C
        NA: 0x20871F4
        JP: 0x20874DC
      description: |-
        Assign a byte to the target of a pointer if the pointer is non-null.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: TryAssignByteWrapper
      address:
        EU: 0x20875A0
        NA: 0x2087208
        JP: 0x20874F0
      description: |-
        Wrapper around TryAssignByte.
        
        Accesses the TryAssignByte function with a weird chain of pointer dereferences.
        
        r0: pointer
        r1: value
        return: true on success, false on failure
    - name: wcstombs
      address:
        EU: 0x20875BC
        NA: 0x2087224
        JP: 0x208750C
      description: |-
        The wcstombs(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: characters converted
    - name: memcpy
      address:
        EU: 0x2087634
        NA: 0x208729C
        JP: 0x2087584
      description: |-
        The memcpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: dest
    - name: memmove
      address:
        EU: 0x2087654
        NA: 0x20872BC
        JP: 0x20875A4
      description: |-
        The memmove(3) C library function.
        
        The implementation is nearly the same as memcpy, but it copies bytes from back to front if src < dst.
        
        r0: dest
        r1: src
        r2: n
        return: dest
    - name: memset
      address:
        EU: 0x20876A0
        NA: 0x2087308
        JP: 0x20875F0
      description: |-
        The memset(3) C library function.
        
        This is just a wrapper around memset_internal that returns the pointer at the end.
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
        return: s
    - name: memchr
      address:
        EU: 0x20876B4
        NA: 0x208731C
        JP: 0x2087604
      description: |-
        The memchr(3) C library function.
        
        r0: s
        r1: c
        r2: n
        return: pointer to first occurrence of c in s, or a null pointer if no match
    - name: memcmp
      address:
        EU: 0x20876E0
        NA: 0x2087348
        JP: 0x2087630
      description: |-
        The memcmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: memset_internal
      address:
        EU: 0x2087720
        NA: 0x2087388
        JP: 0x2087670
      description: |-
        The actual memory-setting implementation for the memset(3) C library function.
        
        This function is optimized to set bytes in 4-byte chunks for n >= 32, correctly handling any unaligned bytes at the front/back. In this case, it also further optimizes by unrolling a for loop to set 8 4-byte values at once (effectively a 32-byte chunk).
        
        r0: s
        r1: c (int, but must be a single-byte value)
        r2: n
    - name: __vsprintf_internal_slice
      address:
        EU: 0x208900C
        NA: 0x2088C74
        JP: 0x2088F5C
      description: |-
        This is what implements the bulk of __vsprintf_internal.
        
        The __vsprintf_internal in the modern-day version of glibc relies on __vfprintf_internal; this function has a slightly different interface, but it serves a similar role.
        
        r0: function pointer to append to the string being built (__vsprintf_internal uses TryAppendToSlice)
        r1: string buffer slice
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: TryAppendToSlice
      address:
        EU: 0x2089830
        NA: 0x2089498
        JP: 0x2089780
      description: |-
        Best-effort append the given data to a slice. If the slice's capacity is reached, any remaining data will be truncated.
        
        r0: slice pointer
        r1: buffer of data to append
        r2: number of bytes in the data buffer
        return: true
    - name: __vsprintf_internal
      address:
        EU: 0x2089874
        NA: 0x20894DC
        JP: 0x20897C4
      description: |-
        This is what implements vsprintf. It's akin to __vsprintf_internal in the modern-day version of glibc (in fact, it's probably an older version of this).
        
        r0: str
        r1: maxlen (vsprintf passes UINT32_MAX for this)
        r2: format
        r3: ap
        return: number of characters printed, excluding the null-terminator
    - name: vsprintf
      address:
        EU: 0x20898DC
        NA: 0x2089544
        JP: 0x208982C
      description: |-
        The vsprintf(3) C library function.
        
        r0: str
        r1: format
        r2: ap
        return: number of characters printed, excluding the null-terminator
    - name: snprintf
      address:
        EU: 0x20898F4
        NA: 0x208955C
        JP: 0x2089844
      description: |-
        The snprintf(3) C library function.
        
        This calls __vsprintf_internal directly, so it's presumably the real snprintf.
        
        r0: str
        r1: n
        r2: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: sprintf
      address:
        EU: 0x208991C
        NA: 0x2089584
        JP: 0x208986C
      description: |-
        The sprintf(3) C library function.
        
        This calls __vsprintf_internal directly, so it's presumably the real sprintf.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: strlen
      address:
        EU: 0x2089A10
        NA: 0x2089678
        JP: 0x2089960
      description: |-
        The strlen(3) C library function.
        
        r0: s
        return: length of s
    - name: strcpy
      address:
        EU: 0x2089A2C
        NA: 0x2089694
        JP: 0x208997C
      description: |-
        The strcpy(3) C library function.
        
        This function is optimized to copy characters in aligned 4-byte chunks if possible, correctly handling any unaligned bytes at the front/back.
        
        r0: dest
        r1: src
        return: dest
    - name: strncpy
      address:
        EU: 0x2089AF4
        NA: 0x208975C
        JP: 0x2089A44
      description: |-
        The strncpy(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: dest
    - name: strcat
      address:
        EU: 0x2089B44
        NA: 0x20897AC
        JP: 0x2089A94
      description: |-
        The strcat(3) C library function.
        
        r0: dest
        r1: src
        return: dest
    - name: strncat
      address:
        EU: 0x2089B74
        NA: 0x20897DC
        JP: 0x2089AC4
      description: |-
        The strncat(3) C library function.
        
        r0: dest
        r1: src
        r2: n
        return: dest
    - name: strcmp
      address:
        EU: 0x2089BC4
        NA: 0x208982C
        JP: 0x2089B14
      description: |-
        The strcmp(3) C library function.
        
        Similarly to strcpy, this function is optimized to compare characters in aligned 4-byte chunks if possible.
        
        r0: s1
        r1: s2
        return: comparison value
    - name: strncmp
      address:
        EU: 0x2089CD8
        NA: 0x2089940
        JP: 0x2089C28
      description: |-
        The strncmp(3) C library function.
        
        r0: s1
        r1: s2
        r2: n
        return: comparison value
    - name: strchr
      address:
        EU: 0x2089D0C
        NA: 0x2089974
        JP: 0x2089C5C
      description: |-
        The strchr(3) C library function.
        
        r0: string
        r1: c
        return: pointer to the located byte c, or null pointer if no match
    - name: strcspn
      address:
        EU: 0x2089D48
        NA: 0x20899B0
        JP: 0x2089C98
      description: |-
        The strcspn(3) C library function.
        
        r0: string
        r1: stopset
        return: offset of the first character in string within stopset
    - name: strstr
      address:
        EU: 0x2089E08
        NA: 0x2089A70
        JP: 0x2089D58
      description: |-
        The strstr(3) C library function.
        
        r0: haystack
        r1: needle
        return: pointer into haystack where needle starts, or null pointer if no match
    - name: wcslen
      address:
        EU: 0x208B780
        NA: 0x208B3E8
        JP: 0x208B6D0
      description: |-
        The wcslen(3) C library function.
        
        r0: ws
        return: length of ws
    - name: _dadd
      address:
        EU: 0x208E260
        NA: 0x208DEC8
        JP: 0x208E1B0
      description: |-
        Implements the addition operator for IEEE 754 double-precision floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __adddf3 in libgcc.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a + b
    - name: _d2f
      address:
        EU: 0x208E578
        NA: 0x208E1E0
        JP: 0x208E4C8
      description: |-
        Implements the double to float cast operator for IEEE 754 floating-point numbers.
        
        Analogous to __truncdfsf2 in libgcc.
        
        r0: double (low bits)
        r1: double (high bits)
        return: (float)double
    - name: _ll_ufrom_d
      address:
        EU: 0x208E67C
        NA: 0x208E2E4
        JP: 0x208E5CC
      description: |-
        Implements the double to unsigned long long cast operation for IEEE 754 floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __fixunsdfti in libgcc.
        
        r0: double (low bits)
        r1: double (high bits)
        return: (unsigned long long)double
    - name: _dflt
      address:
        EU: 0x208E708
        NA: 0x208E370
        JP: 0x208E658
      description: |-
        Implements the int to double cast operation for IEEE 754 floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __floatsidf in libgcc.
        
        r0: int
        return: (double)int
    - name: _dfltu
      address:
        EU: 0x208E748
        NA: 0x208E3B0
        JP: 0x208E698
      description: |-
        Implements the unsigned int to double cast operation for IEEE 754 floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __floatunsidf in libgcc.
        
        r0: uint
        return: (double)uint
    - name: _dmul
      address:
        EU: 0x208E784
        NA: 0x208E3EC
        JP: 0x208E6D4
      description: |-
        Implements the multiplication operator for IEEE 754 double-precision floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __muldf3 in libgcc.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a * b
    - name: _dsqrt
      address:
        EU: 0x208EAE8
        NA: 0x208E750
        JP: 0x208EA38
      description: |-
        Analogous to the sqrt(3) C library function.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        r0: x (low bits)
        r1: x (high bits)
        return: sqrt(x)
    - name: _dsub
      address:
        EU: 0x208EC9C
        NA: 0x208E904
        JP: 0x208EBEC
      description: |-
        Implements the subtraction operator for IEEE 754 double-precision floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __subdf3 in libgcc.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a - b
    - name: _fadd
      aliases:
        - __addsf3
      address:
        EU: 0x208F050
        NA: 0x208ECB8
        JP: 0x208EFA0
      description: |-
        Implements the addition operator for IEEE 754 floating-point numbers.
        
        Analogous to __addsf3 in libgcc.
        
        r0: a
        r1: b
        return: a + b
    - name: _dgeq
      address:
        EU: 0x208F274
        NA: 0x208EEDC
        JP: 0x208F1C4
      description: |-
        Implements the >= operator for IEEE 754 double-precision floating-point numbers.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a >= b
    - name: _dleq
      address:
        EU: 0x208F30C
        NA: 0x208EF74
        JP: 0x208F25C
      description: |-
        Implements the <= operator for IEEE 754 double-precision floating-point numbers.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a <= b
    - name: _dls
      address:
        EU: 0x208F3B0
        NA: 0x208F018
        JP: 0x208F300
      description: |-
        Implements the < operator for IEEE 754 double-precision floating-point numbers.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a < b
    - name: _deq
      address:
        EU: 0x208F44C
        NA: 0x208F0B4
        JP: 0x208F39C
      description: |-
        Implements the == operator for IEEE 754 double-precision floating-point numbers.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a == b
    - name: _dneq
      address:
        EU: 0x208F4D8
        NA: 0x208F140
        JP: 0x208F428
      description: |-
        Implements the != operator for IEEE 754 double-precision floating-point numbers.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a != b
    - name: _fls
      address:
        EU: 0x208F564
        NA: 0x208F1CC
        JP: 0x208F4B4
      description: |-
        Implements the < operator for IEEE 754 floating-point numbers.
        
        r0: a
        r1: b
        return: a < b
    - name: _fdiv
      aliases:
        - __divsf3
      address:
        EU: 0x208F5CC
        NA: 0x208F234
        JP: 0x208F51C
      description: |-
        Implements the division operator for IEEE 754 floating-point numbers.
        
        Analogous to __divsf3 in libgcc.
        
        r0: dividend
        r1: divisor
        return: dividend / divisor
    - name: _f2d
      aliases:
        - __extendsfdf2
      address:
        EU: 0x208F984
        NA: 0x208F5EC
        JP: 0x208F8D4
      description: |-
        Implements the float to double cast operation for IEEE 754 floating-point numbers.
        
        Analogous to __extendsfdf2 in libgcc.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        r0: float
        return: (double)float
    - name: _ffix
      aliases:
        - __fixsfsi
      address:
        EU: 0x208FA08
        NA: 0x208F670
        JP: 0x208F958
      description: |-
        Implements the float to int cast operation for IEEE 754 floating-point numbers. The output saturates if the input is out of the representable range for the int type.
        
        Analogous to __fixsfsi in libgcc.
        
        r0: float
        return: (int)float
    - name: _fflt
      aliases:
        - __floatsisf
      address:
        EU: 0x208FA3C
        NA: 0x208F6A4
        JP: 0x208F98C
      description: |-
        Implements the int to float cast operation for IEEE 754 floating-point numbers.
        
        Analogous to __floatsisf in libgcc.
        
        r0: int
        return: (float)int
    - name: _ffltu
      aliases:
        - __floatunsisf
      address:
        EU: 0x208FA84
        NA: 0x208F6EC
        JP: 0x208F9D4
      description: |-
        Implements the unsigned int to float cast operation for IEEE 754 floating-point numbers.
        
        Analogous to __floatunsisf in libgcc.
        
        r0: uint
        return: (float)uint
    - name: _fmul
      aliases:
        - __mulsf3
      address:
        EU: 0x208FACC
        NA: 0x208F734
        JP: 0x208FA1C
      description: |-
        Implements the multiplication operator for IEEE 754 floating-point numbers.
        
        Analogous to __mulsf3 in libgcc.
        
        r0: a
        r1: b
        return: a * b
    - name: sqrtf
      address:
        EU: 0x208FCAC
        NA: 0x208F914
        JP: 0x208FBFC
      description: |-
        The sqrtf(3) C library function.
        
        r0: x
        return: sqrt(x)
    - name: _fsub
      aliases:
        - __subsf3
      address:
        EU: 0x208FD9C
        NA: 0x208FA04
        JP: 0x208FCEC
      description: |-
        Implements the subtraction operator for IEEE 754 floating-point numbers.
        
        Analogous to __subsf3 in libgcc.
        
        r0: a
        r1: b
        return: a - b
    - name: _ll_mod
      address:
        EU: 0x2090014
        NA: 0x208FC7C
        JP: 0x208FF64
      description: |-
        Implements the modulus operator for signed long longs.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __modti3 in libgcc.
        
        r0: dividend (low bits)
        r1: dividend (high bits)
        r2: divisor (low bits)
        r3: divisor (high bits)
        return: dividend % divisor
    - name: _ll_sdiv
      address:
        EU: 0x2090024
        NA: 0x208FC8C
        JP: 0x208FF74
      description: |-
        Implements the division operator for signed long longs.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __divti3 in libgcc.
        
        r0: dividend (low bits)
        r1: dividend (high bits)
        r2: divisor (low bits)
        r3: divisor (high bits)
        return: dividend / divisor
    - name: _ll_udiv
      address:
        EU: 0x20901D4
        NA: 0x208FE3C
        JP: 0x2090124
      description: |-
        Implements the division operator for unsigned long longs.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __udivti3 in libgcc.
        
        r0: dividend (low bits)
        r1: dividend (high bits)
        r2: divisor (low bits)
        r3: divisor (high bits)
        return: dividend / divisor
    - name: _ull_mod
      address:
        EU: 0x20901E0
        NA: 0x208FE48
        JP: 0x2090130
      description: |-
        Implements the modulus operator for unsigned long longs.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __umodti3 in libgcc.
        
        r0: dividend (low bits)
        r1: dividend (high bits)
        r2: divisor (low bits)
        r3: divisor (high bits)
        return: dividend % divisor
    - name: _ll_mul
      address:
        EU: 0x209021C
        NA: 0x208FE84
        JP: 0x209016C
      description: |-
        Implements the multiplication operator for signed long longs.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __multi3 in libgcc.
        
        r0: a (low bits)
        r1: a (high bits)
        r2: b (low bits)
        r3: b (high bits)
        return: a * b
    - name: _s32_div_f
      aliases:
        - __divsi3
      address:
        EU: 0x209023C
        NA: 0x208FEA4
        JP: 0x209018C
      description: |-
        Implements the division operator for signed ints.
        
        Analogous to __divsi3 in libgcc.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: _u32_div_f
      aliases:
        - __udivsi3
      address:
        EU: 0x2090448
        NA: 0x20900B0
        JP: 0x2090398
      description: |-
        Implements the division operator for unsigned ints.
        
        Analogous to __udivsi3 in libgcc.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        Note: This function falls through to _u32_div_not_0_f.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: _u32_div_not_0_f
      aliases:
        - __udivsi3_no_zero_check
      address:
        EU: 0x2090450
        NA: 0x20900B8
        JP: 0x20903A0
      description: |-
        Subsidiary function to _u32_div_f. Skips the initial check for divisor == 0.
        
        The return value is a 64-bit integer, with the quotient (dividend / divisor) in the lower 32 bits and the remainder (dividend % divisor) in the upper 32 bits. In accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return), this means that the quotient is returned in r0 and the remainder is returned in r1.
        This function appears to only be called internally.
        
        r0: dividend
        r1: divisor
        return: (quotient) | (remainder << 32)
    - name: _drdiv
      address:
        EU: 0x209062C
        NA: 0x2090294
        JP: 0x209057C
      description: |-
        The same as _ddiv, but with the parameters reversed.
        
        This simply swaps the first and second parameters, then falls through to _ddiv.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        r0: divisor (low bits)
        r1: divisor (high bits)
        r2: dividend (low bits)
        r3: dividend (high bits)
        return: dividend / divisor
    - name: _ddiv
      address:
        EU: 0x2090644
        NA: 0x20902AC
        JP: 0x2090594
      description: |-
        Implements the division operator for IEEE 754 double-precision floating-point numbers.
        
        The result is returned in r0 and r1, in accordance with the Procedure Call Standard for the Arm Architecture (see https://github.com/ARM-software/abi-aa/blob/60a8eb8c55e999d74dac5e368fc9d7e36e38dda4/aapcs32/aapcs32.rst#result-return).
        
        Analogous to __divdf3 in libgcc.
        
        r0: dividend (low bits)
        r1: dividend (high bits)
        r2: divisor (low bits)
        r3: divisor (high bits)
        return: dividend / divisor
    - name: _fp_init
      address:
        EU: 0x2090B88
        NA: 0x20907F0
        JP: 0x2090AD8
      description: |-
        Meant to do set up for floating point calculations? Does nothing.
        
        No params.
  data: []
