overlay29:
  versions:
    - EU
    - NA
    - JP
  address:
    EU: 0x22DCB80
    NA: 0x22DC240
    JP: 0x22DD8E0
  length:
    EU: 0x77900
    NA: 0x77620
    JP: 0x77200
  description: |-
    The dungeon engine.
    
    This is the "main" overlay of dungeon mode. It controls most things that happen in a Mystery Dungeon, such as dungeon layout generation, dungeon menus, enemy AI, and generally just running each turn while within a dungeon.
  subregions:
    - move_effects.yml
  functions:
    - name: GetWeatherColorTable
      address:
        EU: 0x22DEF60
        NA: 0x22DE620
        JP: 0x22DFCC0
      description: |-
        Gets a pointer to the floor's color table given the current weather.
        
        The returned table contains 1024 color entries.
        
        r0: Weather ID
        return: color table pointer
    - name: DungeonAlloc
      address:
        EU: 0x22DF39C
        NA: 0x22DEA5C
        JP: 0x22E00FC
      description: |-
        Allocates a new dungeon struct.
        
        This updates the master dungeon pointer and returns a copy of that pointer.
        
        return: pointer to a newly allocated dungeon struct
    - name: GetDungeonPtrMaster
      address:
        EU: 0x22DF3C0
        NA: 0x22DEA80
      description: |-
        Returns the master dungeon pointer (a global, see DUNGEON_PTR_MASTER).
        
        return: pointer to a newly allocated dungeon struct
    - name: DungeonZInit
      address:
        EU: 0x22DF3D0
        NA: 0x22DEA90
        JP: 0x22E0130
      description: |-
        Zero-initializes the dungeon struct pointed to by the master dungeon pointer.
        
        No params.
    - name: DungeonFree
      address:
        EU: 0x22DF3F0
        NA: 0x22DEAB0
      description: |-
        Frees the dungeons struct pointer to by the master dungeon pointer, and nullifies the pointer.
        
        No params.
    - name: RunDungeon
      address:
        EU: 0x22DF878
        NA: 0x22DEF38
        JP: 0x22E05D8
      description: |-
        Called at the start of a dungeon. Initializes the dungeon struct from specified dungeon data. Includes a loop that does not break until the dungeon is cleared, and another one inside it that runs until the current floor ends.
        
        r0: Pointer to the struct containing info used to initialize the dungeon. See type dungeon_init for details.
        r1: Pointer to the dungeon data struct that will be used during the dungeon.
    - name: EntityIsValid
      address:
        EU:
          - 0x22E0C94
          - 0x22E235C
          - 0x22E2947
          - 0x22E3C98
          - 0x22E4168
          - 0x22E9FA4
          - 0x22ECFB8
          - 0x22ED770
          - 0x22EECF8
          - 0x22F0154
          - 0x22F0F44
          - 0x22F5C48
          - 0x22F6C60
          - 0x22F7D1C
          - 0x22FD398
          - 0x22FEEB8
          - 0x2300B10
          - 0x2303464
          - 0x23051E4
          - 0x2305FB8
          - 0x2306630
          - 0x2308924
          - 0x23099E8
          - 0x230F364
          - 0x230FA7C
          - 0x2311A70
          - 0x2312314
          - 0x2315B78
          - 0x2319794
          - 0x23198AC
          - 0x231A9EC
          - 0x231BBF4
          - 0x231D630
          - 0x231F840
          - 0x231FFD8
          - 0x2320664
          - 0x2320BE4
          - 0x23211CC
          - 0x2321EA0
          - 0x2326088
          - 0x232F280
          - 0x23349EC
          - 0x2335B18
          - 0x2338878
          - 0x23456DC
          - 0x2346284
          - 0x23487A4
          - 0x234A47C
          - 0x234E9D0
          - 0x234F820
        NA:
          - 0x22E0354
          - 0x22E1A1C
          - 0x22E32E8
          - 0x22E37B8
          - 0x22E95F4
          - 0x22EC608
          - 0x22ECDC0
          - 0x22EE348
          - 0x22EF7A0
          - 0x22F0590
          - 0x22F528C
          - 0x22F62A8
          - 0x22F7364
          - 0x22FC99C
          - 0x22FED98
          - 0x23000E4
          - 0x2302A38
          - 0x23047B8
          - 0x230558C
          - 0x2305C04
          - 0x2307EF8
          - 0x230827C
          - 0x2308FBC
          - 0x230E8F0
          - 0x230F008
          - 0x2311010
          - 0x23118B4
          - 0x2315118
          - 0x2318D34
          - 0x2318E4C
          - 0x2319F8C
          - 0x231B194
          - 0x231CBC8
          - 0x231EDD8
          - 0x231F570
          - 0x231FBFC
          - 0x232017C
          - 0x2320764
          - 0x2321438
          - 0x2325620
          - 0x232E840
          - 0x2333FAC
          - 0x23350D8
          - 0x2337CA8
          - 0x2344AF8
          - 0x2345698
          - 0x2347BA4
          - 0x234987C
          - 0x234DDD0
          - 0x234EC14
        JP:
          - 0x2312538
          - 0x2312DCC
          - 0x23165F0
          - 0x23364C4
      description: |-
        Checks if an entity pointer points to a valid entity (not entity type 0, which represents no entity).
        
        r0: entity pointer
        return: bool
    - name: GetFloorType
      address:
        EU: 0x22E0CF0
        NA: 0x22E03B0
        JP: 0x22E1A48
      description: |-
        Get the current floor type.
        
        Floor types:
          0 appears to mean the current floor is "normal"
          1 appears to mean the current floor is a fixed floor
          2 means the current floor has a rescue point
        
        return: floor type
    - name: TryForcedLoss
      address:
        EU: 0x22E0F60
        NA: 0x22E0620
        JP: 0x22E1CAC
      description: |-
        Attempts to trigger a forced loss of the type specified in dungeon::forced_loss_reason.
        
        r0: if true, the function will not check for the end of the floor condition and will skip other (unknown) actions in case of forced loss.
        return: true if the forced loss happens, false otherwise
    - name: IsBossFight
      address:
        EU: 0x22E11A4
        NA: 0x22E0864
        JP: 0x22E1EF4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: fixed_room_id
        return: bool
    - name: IsCurrentFixedRoomBossFight
      address:
        EU: 0x22E11C0
        NA: 0x22E0880
        JP: 0x22E1F10
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        return: bool
    - name: IsMarowakTrainingMaze
      address:
        EU: 0x22E11E0
        NA: 0x22E08A0
        JP: 0x22E1F30
      description: |-
        Check if the current dungeon is one of the training mazes in Marowak Dojo (this excludes Final Maze).
        
        return: bool
    - name: FixedRoomIsSubstituteRoom
      address:
        EU: 0x22E120C
        NA: 0x22E08CC
      description: |-
        Checks if the current fixed room is the "substitute room" (ID 0x6E).
        
        return: bool
    - name: StoryRestrictionsEnabled
      address:
        EU: 0x22E1268
        NA: 0x22E0928
        JP: 0x22E1FB8
      description: |-
        Returns true if certain special restrictions are enabled.
        
        If true, you will get kicked out of the dungeon if a team member that passes the arm9::JoinedAtRangeCheck2 check faints.
        
        return: !dungeon::nonstory_flag || dungeon::hidden_land_flag
    - name: GetScenarioBalanceVeneer
      address:
        EU: 0x22E129C
        NA: 0x22E095C
      description: |-
        Likely a linker-generated veneer for GetScenarioBalance.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
    - name: FadeToBlack
      address:
        EU: 0x22E12A8
        NA: 0x22E0968
        JP: 0x22E1FF8
      description: |-
        Fades the screen to black across several frames.
        
        No params.
    - name: CheckTouchscreenArea
      address:
        EU: 0x22E15F8
        NA: 0x22E0CB8
        JP: 0x22E2348
      description: |-
        Checks if the currently pressed touchscreen position is within the specified area.
        
        r0: Area lower X coordinate
        r1: Area lower Y coordinate
        r2: Area upper X coordinate
        r3: Area upper Y coordinate
        return: True if the specified area contains the currently pressed touchscreen position, false otherwise.
    - name: GetTrapInfo
      address:
        EU: 0x22E1F48
        NA: 0x22E1608
        JP: 0x22E2C98
      description: |-
        Given a trap entity, returns the pointer to the trap info struct it contains.
        
        r0: Entity pointer
        return: Trap data pointer
    - name: GetItemInfo
      address:
        EU: 0x22E1F50
        NA: 0x22E1610
        JP: 0x22E2CA0
      description: |-
        Given an item entity, returns the pointer to the item info struct it contains.
        
        r0: Entity pointer
        return: Item data pointer
    - name: GetTileAtEntity
      address:
        EU: 0x22E1F68
        NA: 0x22E1628
        JP: 0x22E2CB8
      description: |-
        Returns a pointer to the tile where an entity is located.
        
        r0: pointer to entity
        returns: pointer to tile
    - name: UpdateEntityPixelPos
      address:
        EU: 0x22E2380
        NA: 0x22E1A40
        JP: 0x22E30D0
      description: |-
        Updates an entity's pixel_pos field using the specified pixel_position struct, or its own pos field if it's null.
        
        r0: Entity pointer
        r1: Pixel position to use, or null to use the entity's own position
    - name: CreateEnemyEntity
      address:
        EU: 0x22E2A00
        NA: 0x22E20C0
        JP: 0x22E3750
      description: |-
        Creates and initializes the entity struct of a newly spawned enemy monster. Fails if there's 16 enemies on the floor already.
        
        It could also be used to spawn fixed room allies, since those share their slots on the entity list.
        
        r0: Monster ID
        return: Pointer to the newly initialized entity, or null if the entity couldn't be initialized
    - name: SpawnTrap
      address:
        EU: 0x22E2BA0
        NA: 0x22E2260
        JP: 0x22E38F0
      description: |-
        Spawns a trap on the floor. Fails if there are more than 64 traps already on the floor.
        
        This modifies the appropriate fields on the dungeon struct, initializing new entries in the entity table and the trap info list.
        
        r0: trap ID
        r1: position
        r2: team (see struct trap::team)
        r3: flags (see struct trap::team)
        return: entity pointer for the newly added trap, or null on failure
    - name: SpawnItemEntity
      address:
        EU: 0x22E2C54
        NA: 0x22E2314
      description: |-
        Spawns a blank item entity on the floor. Fails if there are more than 64 items already on the floor.
        
        This initializes a new entry in the entity table and points it to the corresponding slot in the item info list.
        
        r0: position
        return: entity pointer for the newly added item, or null on failure
    - name: ShouldMinimapDisplayEntity
      address:
        EU: 0x22E2DD8
        NA: 0x22E2498
        JP: 0x22E3B2C
      description: |-
        Checks if a given entity should be displayed on the minimap
        
        r0: Entity pointer
        return: True if the entity should be displayed on the minimap
    - name: ShouldDisplayEntity
      address:
        EU: 0x22E2EB4
        NA: 0x22E2574
        JP: 0x22E3C08
      description: |-
        Checks if an entity should be displayed or not.
        
        For example, it returns false if the entity is an invisible enemy.
        Also used to determine if messages that involve a certain entity should be displayed or suppressed.
        
        r0: Entity pointer
        r1: (?) Seems to be 1 for monsters and 0 for items.
        return: True if the entity and its associated messages should be displayed, false if they shouldn't.
    - name: ShouldDisplayEntityWrapper
      address:
        EU: 0x22E306C
        NA: 0x22E272C
      description: |-
        Calls ShouldDisplayEntity with r1 = 0
        
        r0: Entity pointer
        return: True if the entity and its associated messages should be displayed, false if they shouldn't.
    - name: CanSeeTarget
      address:
        EU: 0x22E308C
        NA: 0x22E274C
        JP: 0x22E3DE0
      description: |-
        Checks if a given monster can see another monster.
        
        Calls IsPositionActuallyInSight. Also checks if the user is blinded, if the target is invisible, etc.
        This function is almost the same as CanTargetEntity, the only difference is that the latter calls IsPositionInSight instead.
        
        r0: User entity pointer
        r1: Target entity pointer
        return: True if the user can see the target, false otherwise
    - name: CanTargetEntity
      address:
        EU: 0x22E3150
        NA: 0x22E2810
        JP: 0x22E3EA4
      description: |-
        Checks if a monster can target another entity when controlled by the AI.
        More specifically, it checks if the target is invisible, if the user can see invisible monsters, if the user is blinded and if the target position is in sight from the position of the user (this last check is done by calling IsPositionInSight with the user's and the target's position).
        This function is almost the same as CanSeeTarget, the only difference is that the latter calls IsPositionActuallyInSight instead.
        
        r0: User entity pointer
        r1: Target entity pointer
        return: True if the user can target the target, false otherwise
    - name: CanTargetPosition
      address:
        EU: 0x22E3294
        NA: 0x22E2954
        JP: 0x22E3FE8
      description: |-
        Checks if a monster can target a position. This function just calls IsPositionInSight using the position of the user as the origin.
        
        r0: Entity pointer
        r1: Target position
        return: True if the specified monster can target the target position, false otherwise.
    - name: GetTeamMemberIndex
      address:
        EU: 0x22E3378
        NA: 0x22E2A38
        JP: 0x22E40CC
      description: |-
        Given a pointer to an entity, returns its index on the entity list, or null if the entity can't be found on the first 4 slots of the list.
        
        r0: Pointer to the entity to find
        return: Index of the specified entity on the entity list, or null if it's not on the first 4 slots.
    - name: SubstitutePlaceholderStringTags
      address:
        EU: 0x22E3418
        NA: 0x22E2AD8
        JP: 0x22E416C
      description: |-
        Replaces instances of a given placeholder tag by the string representation of the given entity.
        
        From the eos-move-effects docs (which are somewhat nebulous): "Replaces the string at StringID [r0] by the string representation of the target [r1] (aka its name). Any message with the string manipulator '[string:StringID]' will use that string".
        
        The game uses various placeholder tags in its strings, which you can read about here: https://textbox.skytemple.org/.
        
        r0: string ID (unclear what this means)
        r1: entity pointer
        r2: ?
    - name: UpdateMapSurveyorFlag
      address:
        EU: 0x22E375C
        NA: 0x22E2DD8
      description: |-
        Sets the Map Surveyor flag in the dungeon struct to true if a team member has Map Surveyor, sets it to false otherwise.
        
        This function has two variants: in the EU ROM, it will return true if the flag was changed. The NA version will return the new value of the flag instead.
        
        return: bool
    - name: PointCameraToMonster
      address:
        EU: 0x22E3804
        NA: 0x22E2E54
        JP: 0x22E44C4
      description: |-
        Points the camera to the specified monster.
        
        r0: Entity pointer
        r1: ?
    - name: UpdateCamera
      address:
        EU: 0x22E3874
        NA: 0x22E2EC4
        JP: 0x22E4534
      description: |-
        Called every frame. Sets the camera to the right coordinates depending on the monster it points to.
        
        It also takes care of updating the minimap, checking which elements should be shown on it, as well as whether the screen should be black due to the blinker status.
        
        r0: ?
    - name: ItemIsActive
      address:
        EU:
          - 0x22E3CBC
          - 0x22EECC8
          - 0x22F6350
          - 0x23002C4
          - 0x23030F8
          - 0x2308948
          - 0x230B450
          - 0x230EFEC
          - 0x2310284
          - 0x2311A94
          - 0x2312658
          - 0x2315B9C
          - 0x2348750
        NA:
          - 0x22E330C
          - 0x22EE318
          - 0x22F5994
          - 0x22FF898
          - 0x23026CC
          - 0x2307F1C
          - 0x230A9DC
          - 0x230E578
          - 0x230F810
          - 0x2311034
          - 0x2311BF8
          - 0x231513C
          - 0x2347B50
        JP:
          - 0x2300CA8
          - 0x2316614
      description: |-
        Checks if a monster is holding a certain item that isn't disabled by Klutz.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: GetVisibilityRange
      address:
        EU: 0x22E3CEC
        NA: 0x22E333C
      description: |-
        Returns dungeon::display_data::visibility_range. If the visibility range is 0, returns 2 instead.
        
        return: Visibility range of the current floor, or 2 if the visibility is 0.
    - name: PlayEffectAnimationEntity
      address:
        EU: 0x22E3F94
        NA: 0x22E35E4
        JP: 0x22E4C54
      description: |-
        Just a guess. This appears to be paired often with GetEffectAnimationField0x19, and also has calls AnimationHasMoreFrames in a loop alongside AdvanceFrame(66) calls.
        
        The third parameter skips the loop entirely. It seems like in this case the function might just preload some animation frames for later use??
        
        r0: entity pointer
        r1: Effect ID
        r2: appears to be a flag for actually running the animation now? If this is 0, the AdvanceFrame loop is skipped entirely.
        others: ?
        return: status code, or maybe the number of frames or something? Either way, -1 seems to indicate the animation being finished or something?
    - name: PlayEffectAnimationPos
      address:
        EU: 0x22E418C
        NA: 0x22E37DC
        JP: 0x22E4E4C
      description: |-
        Takes a position struct in r0 and converts it to a pixel position struct before calling PlayEffectAnimationPixelPos
        
        r0: Position where the effect should be played
        r1: Effect ID
        r2: Unknown flag (same as the one in PlayEffectAnimationEntity)
        return: Result of call to PlayEffectAnimationPixelPos
    - name: PlayEffectAnimationPixelPos
      address:
        EU: 0x22E41D0
        NA: 0x22E3820
        JP: 0x22E4E90
      description: |-
        Seems like a variant of PlayEffectAnimationEntity that uses pixel coordinates as its first parameter instead of an entity pointer.
        
        r0: Pixel position where the effect should be played
        r1: Effect ID
        r2: Unknown flag (same as the one in PlayEffectAnimationEntity)
        return: Same as PlayEffectAnimationEntity
    - name: AnimationDelayOrSomething
      address:
        EU: 0x22E4290
        NA: 0x22E38E0
        JP: 0x22E4F50
      description: |-
        Called whenever most (all?) animations are played. Does not return until the animation is over.
        
        Might wait until the animation is done? Contains several loops that call AdvanceFrame.
        
        r0: ?
    - name: UpdateStatusIconFlags
      address:
        EU: 0x22E4464
        NA: 0x22E3AB4
        JP: 0x22E5124
      description: |-
        Sets a monster's status_icon_flags bitfield according to its current status effects. Does not affect a Sudowoodo in the "permanent sleep" state (statuses::sleep == 0x7F).
        
        Some of the status effect in monster::statuses are used as an index to access an array, where every group of 8 bytes represents a bitmask. All masks are added in a bitwise OR and then stored in monster::status_icon.
        
        Also sets icon flags for statuses::exposed, statuses::grudge, critical HP and lowered stats with explicit checks, and applies the effect of the Identifier Orb (see dungeon::identify_orb_flag).
        
        r0: entity pointer
    - name: PlayEffectAnimation0x171Full
      address:
        EU: 0x22E49C8
        NA: 0x22E4018
        JP: 0x22E5688
      description: |-
        Just a guess. Calls PlayEffectAnimation with data from animation ID 0x171, with the third parameter of PlayEffectAnimation set to true.
        
        r0: entity pointer
    - name: PlayEffectAnimation0x171
      address:
        EU: 0x22E4A1C
        NA: 0x22E406C
        JP: 0x22E56DC
      description: |-
        Just a guess. Calls PlayEffectAnimation with data from animation ID 0x171.
        
        r0: entity pointer
    - name: ShowPpRestoreEffect
      address:
        EU: 0x22E5314
        NA: 0x22E4964
        JP: 0x22E5FD4
      description: |-
        Displays the graphical effect on a monster that just recovered PP.
        
        r0: entity pointer
    - name: PlayEffectAnimation0x1A9
      address:
        NA:
          - 0x22E6130
          - 0x22E617C
          - 0x22E61C8
          - 0x22E6214
          - 0x22E64C4
          - 0x22E6510
      description: |-
        Just a guess. Calls PlayEffectAnimation with data from animation ID 0x1A9.
        
        r0: entity pointer
    - name: PlayEffectAnimation0x18E
      address:
        EU: 0x22E6D88
        NA: 0x22E63D8
        JP: 0x22E7A48
      description: |-
        Just a guess. Calls PlayEffectAnimation with data from animation ID 0x18E.
        
        r0: entity pointer
    - name: LoadMappaFileAttributes
      address:
        EU: 0x22E796C
        NA: 0x22E6FBC
        JP: 0x22E862C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        This function processes the monster spawn list of the current floor, checking which species can spawn, capping the amount of spawnable species on the floor to 14, randomly choosing which 14 species will spawn and ensuring that the sprite size of all the species combined does not exceed the maximum of 0x58000 bytes (352 KB). Kecleon and the Decoy are always included in the random selection.
        The function also processes the floor's item spawn lists. When loading fixed rooms from the hidden staircase, the game forces the number of spawnable species to 0.
        
        r0: quick_saved
        r1: disable_monsters
        r2: special_process
    - name: GetItemIdToSpawn
      address:
        EU: 0x22E8474
        NA: 0x22E7AC4
        JP: 0x22E9130
      description: |-
        Randomly picks an item to spawn using one of the floor's item spawn lists and returns its ID.
        
        If the function fails to properly choose an item (due to, for example, a corrupted item list), ITEM_POKE is returned.
        
        r0: Which item list to use
        return: Item ID
    - name: MonsterSpawnListPartialCopy
      address:
        EU: 0x22E8610
        NA: 0x22E7C60
        JP: 0x22E92CC
      description: |-
        Copies all entries in the floor's monster spawn list that have a sprite size >= 6 to the specified buffer.
        
        The parameter in r1 can be used to specify how many entries are already present in the buffer. Entries added by this function will be placed after those, and the total returned in r1 will account for existing entries as well.
        
        r0: [output] Buffer where the result will be stored
        r1: Current amount of entries in the buffer
        return: New amount of entries in the buffer
    - name: IsOnMonsterSpawnList
      address:
        EU: 0x22E86FC
        NA: 0x22E7D4C
        JP: 0x22E93B4
      description: |-
        Returns true if the specified monster is included in the floor's monster spawn list (the modified list after a maximum of 14 different species were chosen, not the raw list read from the mappa file).
        
        r0: Monster ID
        return: bool
    - name: GetMonsterIdToSpawn
      address:
        EU: 0x22E8750
        NA: 0x22E7DA0
        JP: 0x22E9408
      description: |-
        Randomly picks a monster to spawn using the floor's monster spawn list and returns its ID.
        
        r0: the spawn weight to use (0 for normal, 1 for monster house)
        return: monster ID
    - name: GetMonsterLevelToSpawn
      address:
        EU: 0x22E8808
        NA: 0x22E7E58
        JP: 0x22E94C0
      description: |-
        Get the level of the monster to be spawned, given its id.
        
        r0: monster ID
        return: Level of the monster to be spawned, or 1 if the specified ID can't be found on the floor's spawn table.
    - name: GetDirectionTowardsPosition
      address:
        EU: 0x22E99D0
        NA: 0x22E9020
        JP: 0x22EA688
      description: |-
        Gets the direction in which a monster should move to go from the origin position to the target position
        
        r0: Origin position
        r1: Target position
        return: Direction in which to move to reach the target position from the origin position
    - name: GetChebyshevDistance
      address:
        EU: 0x22E9A3C
        NA: 0x22E908C
        JP: 0x22EA6F4
      description: |-
        Returns the Chebyshev distance between two positions. Calculated as max(abs(x0-x1), abs(y0-y1)).
        
        r0: Position A
        r1: Position B
        return: Chebyshev Distance between position A and position B
    - name: IsPositionActuallyInSight
      address:
        EU: 0x22E9A7C
        NA: 0x22E90CC
        JP: 0x22EA734
      description: |-
        Checks if a given target position is in sight from a given origin position.
        If the origin position is on a hallway or r2 is true, checks if both positions are within <dungeon::display_data::visibility_range> tiles of each other.
        If the origin position is on a room, checks that the target position is within the boundaries of said room.
        
        r0: Origin position
        r1: Target position
        r2: True to assume the entity standing on the origin position has the dropeye status
        return: True if the target position is in sight from the origin position
    - name: IsPositionInSight
      address:
        EU: 0x22E9B54
        NA: 0x22E91A4
        JP: 0x22EA80C
      description: |-
        Checks if a given target position is in sight from a given origin position.
        There's multiple factors that affect this check, but generally, it's true if both positions are in the same room (by checking if the target position is within the boundaries of the room where the origin position is) or within 2 tiles of each other.
        
        r0: Origin position
        r1: Target position
        r2: True to assume the entity standing on the origin position has the dropeye status
        return: True if the target position is in sight from the origin position
    - name: GetLeader
      address:
        EU: 0x22E9F30
        NA: 0x22E9580
        JP: 0x22EABE8
      description: |-
        Gets the pointer to the entity that is currently leading the team, or null if none of the first 4 entities is a valid monster with its is_team_leader flag set. It also sets LEADER_PTR to the result before returning it.
        
        return: Pointer to the current leader of the team or null if there's no valid leader.
    - name: GetLeaderMonster
      address:
        EU: 0x22E9FC8
        NA: 0x22E9618
        JP: 0x22EAC80
      description: |-
        Returns a pointer to the monster data of the current leader.
        
        No params.
    - name: FindNearbyUnoccupiedTile
      address:
        EU: 0x22EA1F4
        NA: 0x22E9844
        JP: 0x22EAEAC
      description: |-
        Searches for an unoccupied tile near some origin.
        
        A tile is considered "unoccupied" if it's not a key door, and has no object or monster on it. In "random room" mode, the tile must also not be in a hallway, and must not have the stairs.
        
        The first unoccupied tile found is returned. The search order is randomized in "random room" mode, otherwise the search order is fixed based on the input displacement array.
        
        r0: [output] position
        r1: origin position
        r2: array of displacements from the origin position to consider
        r3: number of elements in displacements array
        stack[0]: random room mode flag
        return: whether a tile was successfully found
    - name: FindClosestUnoccupiedTileWithin2
      address:
        NA: 0x22E99F0
      description: |-
        Searches for the closest unoccupied tile within 2 steps of the given origin.
        
        Calls FindNearbyUnoccupiedTile with DISPLACEMENTS_WITHIN_2_SMALLEST_FIRST.
        
        r0: [output] position
        r1: origin position
        r2: random room mode flag
        return: whether a tile was successfully found
    - name: FindFarthestUnoccupiedTileWithin2
      address:
        NA: 0x22E9A0C
      description: |-
        Searches for the farthest unoccupied tile within 2 steps of the given origin.
        
        Calls FindNearbyUnoccupiedTile with DISPLACEMENTS_WITHIN_2_LARGEST_FIRST.
        
        r0: [output] position
        r1: origin position
        r2: random room mode flag
        return: whether a tile was successfully found
    - name: FindUnoccupiedTileWithin3
      address:
        EU: 0x22EA3D8
        NA: 0x22E9A28
        JP: 0x22EB090
      description: |-
        Searches for an unoccupied tile within 3 steps of the given origin.
        
        Calls FindNearbyUnoccupiedTile with DISPLACEMENTS_WITHIN_3.
        
        r0: [output] position
        r1: origin position
        r2: random room mode flag
        return: whether a tile was successfully found
    - name: TickStatusTurnCounter
      address:
        EU: 0x22EA3F4
        NA: 0x22E9A44
        JP: 0x22EB0AC
      description: |-
        Ticks down a turn counter for a status condition. If the counter equals 0x7F, it will not be decreased.
        
        r0: pointer to the status turn counter
        return: new counter value
    - name: AdvanceFrame
      address:
        EU: 0x22EA990
        NA: 0x22E9FE0
        JP: 0x22EB648
      description: |-
        Advances one frame. Does not return until the next frame starts.
        
        r0: ? - Unused by the function
    - name: SetDungeonRngPreseed23Bit
      address:
        EU: 0x22EB318
        NA: 0x22EA968
        JP: 0x22EBFD0
      description: |-
        Sets the preseed in the global dungeon PRNG state, using 23 bits from the input. See GenerateDungeonRngSeed for more information.
        
        Given the input preseed23, the actual global preseed is set to (preseed23 & 0xFFFFFF | 1), so only bits 1-23 of the input are used.
        
        r0: preseed23
    - name: GenerateDungeonRngSeed
      address:
        EU: 0x22EB330
        NA: 0x22EA980
        JP: 0x22EBFE8
      description: |-
        Generates a seed with which to initialize the dungeon PRNG.
        
        The seed is calculated by starting with a different seed, the "preseed" x0 (defaults to 1, but can be set by other functions). The preseed is iterated twice with the same recurrence relation used in the primary LCG to generate two pseudorandom 32-bit numbers x1 and x2. The output seed is then computed as
          seed = (x1 & 0xFF0000) | (x2 >> 0x10) | 1
        The value x1 is then saved as the new preseed.
        
        This method of seeding the dungeon PRNG appears to be used only sometimes, depending on certain flags in the data for a given dungeon.
        
        return: RNG seed
    - name: GetDungeonRngPreseed
      address:
        EU: 0x22EB37C
        NA: 0x22EA9CC
        JP: 0x22EC034
      description: |-
        Gets the current preseed stored in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        return: current dungeon RNG preseed
    - name: SetDungeonRngPreseed
      address:
        EU: 0x22EB38C
        NA: 0x22EA9DC
        JP: 0x22EC044
      description: |-
        Sets the preseed in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        r0: preseed
    - name: InitDungeonRng
      address:
        EU: 0x22EB39C
        NA: 0x22EA9EC
        JP: 0x22EC054
      description: |-
        Initialize (or reinitialize) the dungeon PRNG with a given seed. The primary LCG and the five secondary LCGs are initialized jointly, and with the same seed.
        
        r0: seed
    - name: DungeonRand16Bit
      address:
        EU: 0x22EB3D0
        NA: 0x22EAA20
        JP: 0x22EC088
      description: |-
        Computes a pseudorandom 16-bit integer using the dungeon PRNG.
        
        Note that the dungeon PRNG is only used in dungeon mode (as evidenced by these functions being in overlay 29). The game uses another lower-quality PRNG (see arm9.yml) for other needs.
        
        Random numbers are generated with a linear congruential generator (LCG). The game actually maintains 6 separate sequences that can be used for generation: a primary LCG and 5 secondary LCGs. The generator used depends on parameters set on the global PRNG state.
        
        All dungeon LCGs have a modulus of 2^32 and a multiplier of 1566083941 (see DUNGEON_PRNG_LCG_MULTIPLIER). The primary LCG uses an increment of 1, while the secondary LCGs use an increment of 2531011 (see DUNGEON_PRNG_LCG_INCREMENT_SECONDARY). So, for example, the primary LCG uses the recurrence relation:
          x = (1566083941*x_prev + 1) % 2^32
        
        Since the dungeon LCGs generate 32-bit integers rather than 16-bit, the primary LCG yields 16-bit values by taking the upper 16 bits of the computed 32-bit value. The secondary LCGs yield 16-bit values by taking the lower 16 bits of the computed 32-bit value.
        
        All of the dungeon LCGs have a hard-coded default seed of 1, but in practice the seed is set with a call to InitDungeonRng during dungeon initialization.
        
        return: pseudorandom int on the interval [0, 65535]
    - name: DungeonRandInt
      address:
        EU: 0x22EB448
        NA: 0x22EAA98
        JP: 0x22EC100
      description: |-
        Compute a pseudorandom integer under a given maximum value using the dungeon PRNG.
        
        r0: high
        return: pseudorandom integer on the interval [0, high - 1]
    - name: DungeonRandRange
      address:
        EU: 0x22EB470
        NA: 0x22EAAC0
        JP: 0x22EC128
      description: |-
        Compute a pseudorandom value between two integers using the dungeon PRNG.
        
        r0: x
        r1: y
        return: pseudorandom integer on the interval [min(x, y), max(x, y) - 1]
    - name: DungeonRandOutcome
      address:
        EU:
          - 0x22EB4D0
          - 0x22EB500
        NA:
          - 0x22EAB20
          - 0x22EAB50
        JP:
          - 0x22EC188
          - 0x22EC1B8
      description: |-
        Returns the result of a possibly biased coin flip (a Bernoulli random variable) with some success probability p, using the dungeon PRNG.
        
        r0: success percentage (100*p)
        return: true with probability p, false with probability (1-p)
    - name: CalcStatusDuration
      address:
        EU: 0x22EB530
        NA: 0x22EAB80
        JP: 0x22EC1E8
      description: |-
        Seems to calculate the duration of a volatile status on a monster.
        
        r0: entity pointer
        r1: pointer to a turn range (an array of two shorts {lower, higher})
        r2: flag for whether or not to factor in the Self Curer IQ skill and the Natural Cure ability
        return: number of turns for the status condition
    - name: DungeonRngUnsetSecondary
      address:
        EU: 0x22EB5E4
        NA: 0x22EAC34
        JP: 0x22EC29C
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation, and also resets the secondary LCG index back to 0.
        
        Similar to DungeonRngSetPrimary, but DungeonRngSetPrimary doesn't modify the secondary LCG index if it was already set to something other than 0.
        
        No params.
    - name: DungeonRngSetSecondary
      address:
        EU: 0x22EB5FC
        NA: 0x22EAC4C
        JP: 0x22EC2B4
      description: |-
        Sets the dungeon PRNG to use one of the 5 secondary LCGs for subsequent random number generation.
        
        r0: secondary LCG index
    - name: DungeonRngSetPrimary
      address:
        EU: 0x22EB614
        NA: 0x22EAC64
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation.
        
        No params.
    - name: MusicTableIdxToMusicId
      address:
        EU: 0x22EB6B0
        NA: 0x22EAD00
        JP: 0x22EC368
      description: |-
        Used to convert an index that refers to a MUSIC_ID_TABLE entry to a regular music ID.
        
        r0: Music table index
        return: Music ID
    - name: ChangeDungeonMusic
      address:
        EU: 0x22EB7C4
        NA: 0x22EAE14
        JP: 0x22EC47C
      description: |-
        Replace the currently playing music with the provided music
        
        r0: music ID
    - name: TrySwitchPlace
      address:
        EU: 0x22EBB28
        NA: 0x22EB178
        JP: 0x22EC7E0
      description: |-
        The user entity attempts to switch places with the target entity (i.e. by the effect of the Switcher Orb). 
        
        The function checks for the Suction Cups ability for both the user and the target, and for the Mold Breaker ability on the user.
        
        r0: pointer to user entity
        r1: pointer to target entity
    - name: SetLeaderActionFields
      address:
        EU: 0x22EBD78
        NA: 0x22EB3C8
        JP: 0x22ECA30
      description: |-
        Sets the leader's monster::action::action_id to the specified value.
        
        Also sets monster::action::action_use_idx and monster::action::field_0xA to 0, as well as monster::action::field_0x10 and monster::action::field_0x12 to -1.
        
        r0: ID of the action to set
    - name: ClearMonsterActionFields
      address:
        EU: 0x22EBDA4
        NA: 0x22EB3F4
        JP: 0x22ECA5C
      description: |-
        Clears the fields related to AI in the monster's data struct, setting them all to 0.
        Specifically, monster::action::action_id, monster::action::action_use_idx and monster::action::field_0xA are cleared.
        
        r0: Pointer to the monster's action field
    - name: SetMonsterActionFields
      address:
        EU: 0x22EBDB8
        NA: 0x22EB408
        JP: 0x22ECA70
      description: |-
        Sets some the fields related to AI in the monster's data struct.
        Specifically, monster::action::action_id, monster::action::action_use_idx and monster::action::field_0xA. The last 2 are always set to 0.
        
        r0: Pointer to the monster's action field
        r1: Value to set monster::action::action_id to.
    - name: SetActionPassTurnOrWalk
      address:
        EU: 0x22EBDCC
        NA: 0x22EB41C
        JP: 0x22ECA84
      description: |-
        Sets a monster's action to action::ACTION_PASS_TURN or action::ACTION_WALK, depending on the result of GetCanMoveFlag for the monster's ID.
        
        r0: Pointer to the monster's action field
        r1: Monster ID
    - name: GetItemToUseByIndex
      address:
        EU: 0x22EBDFC
        NA: 0x22EB44C
        JP: 0x22ECAB4
      description: |-
        Returns a pointer to the item that is about to be used by a monster given its index.
        
        r0: Entity pointer
        r1: Item index
        return: Pointer to the item
    - name: GetItemToUse
      address:
        EU: 0x22EBEFC
        NA: 0x22EB54C
        JP: 0x22ECBB4
      description: |-
        Returns a pointer to the item that is about to be used by a monster.
        
        r0: Entity pointer
        r1: Parameter index in monster::action_data::action_parameters. Will be used to use to determine the index of the used item.
        r2: Unused
        return: Pointer to the item
    - name: GetItemAction
      address:
        EU: 0x22EBF88
        NA: 0x22EB5D8
        JP: 0x22ECC40
      description: |-
        Returns the action ID that corresponds to an item given its ID.
        
        The action is based on the category of the item (see ITEM_CATEGORY_ACTIONS), unless the specified ID is 0x16B, in which case ACTION_UNK_35 is returned.
        Some items can have unexpected actions, such as thrown items, which have ACTION_NOTHING. This is done to prevent duplicate actions from being listed in the menu (since items always have a "throw" option), since a return value of ACTION_NOTHING prevents the option from showing up in the menu.
        
        r0: Item ID
        return: Action ID associated with the specified item
    - name: RemoveUsedItem
      address:
        EU: 0x22EBFBC
        NA: 0x22EB60C
        JP: 0x22ECC74
      description: |-
        Removes an item from the bag or from the floor after using it
        
        r0: Pointer to the entity that used the item
        r1: Parameter index in monster::action_data::action_parameters. Will be used to use to determine the index of the used item.
    - name: AddDungeonSubMenuOption
      address:
        EU: 0x22EC1CC
        NA: 0x22EB81C
        JP: 0x22ECE84
      description: |-
        Adds an option to the list of actions that can be taken on a pokémon, item or move to the currently active sub-menu on dungeon mode (team, moves, items, etc.).
        
        r0: Action ID
        r1: True if the option should be enabled, false otherwise
    - name: DisableDungeonSubMenuOption
      address:
        EU: 0x22EC2A4
        NA: 0x22EB8F4
        JP: 0x22ECF5C
      description: |-
        Disables an option that was addeed to a dungeon sub-menu.
        
        r0: Action ID of the option that should be disabled
    - name: SetActionRegularAttack
      address:
        EU: 0x22EC600
        NA: 0x22EBC50
        JP: 0x22ED2B8
      description: |-
        Sets a monster's action to action::ACTION_REGULAR_ATTACK, with a specified direction.
        
        r0: Pointer to the monster's action field
        r1: Direction in which to use the move. Gets stored in monster::action::direction.
    - name: SetActionUseMovePlayer
      address:
        EU: 0x22EC648
        NA: 0x22EBC98
        JP: 0x22ED300
      description: |-
        Sets a monster's action to action::ACTION_USE_MOVE_PLAYER, with a specified monster and move index.
        
        r0: Pointer to the monster's action field
        r1: Index of the monster that is using the move on the entity list. Gets stored in monster::action::action_use_idx.
        r2: Index of the move to use (0-3). Gets stored in monster::action::field_0xA.
    - name: SetActionUseMoveAi
      address:
        EU: 0x22EC66C
        NA: 0x22EBCBC
        JP: 0x22ED324
      description: |-
        Sets a monster's action to action::ACTION_USE_MOVE_AI, with a specified direction and move index.
        
        r0: Pointer to the monster's action field
        r1: Index of the move to use (0-3). Gets stored in monster::action::action_use_idx.
        r2: Direction in which to use the move. Gets stored in monster::action::direction.
    - name: RunFractionalTurn
      address:
        EU: 0x22EC6B8
        NA: 0x22EBD08
        JP: 0x22ED370
      description: |-
        The main function which executes the actions that take place in a fractional turn. Called in a loop by RunDungeon while IsFloorOver returns false.
        
        r0: first loop flag (true when the function is first called during a floor)
    - name: RunLeaderTurn
      address:
        EU: 0x22ECCB8
        NA: 0x22EC308
        JP: 0x22ED970
      description: |-
        Handles the leader's turn. Includes a movement speed check that might cause it to return early if the leader isn't fast enough to act in this fractional turn. If that check (and some others) pass, the function does not return until the leader performs an action.
        
        r0: ?
        return: true if the leader has performed an action
    - name: TrySpawnMonsterAndActivatePlusMinus
      address:
        EU: 0x22ED08C
        NA: 0x22EC6DC
        JP: 0x22EDD44
      description: |-
        Called at the beginning of RunFractionalTurn. Executed only if FRACTIONAL_TURN_SEQUENCE[fractional_turn * 2] is not 0.
        
        First it calls TrySpawnMonsterAndTickSpawnCounter, then tries to activate the Plus and Minus abilities for both allies and enemies, and finally calls TryForcedLoss.
        
        No params.
    - name: IsFloorOver
      address:
        EU: 0x22ED198
        NA: 0x22EC7E8
        JP: 0x22EDE50
      description: |-
        Checks if the current floor should end, and updates dungeon::floor_loop_status if required.
        If the player has been defeated, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_LEADER_FAINTED.
        If dungeon::end_floor_flag is 1 or 2, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_NEXT_FLOOR.
        
        return: true if the current floor should end
    - name: DecrementWindCounter
      address:
        EU: 0x22ED4F8
        NA: 0x22ECB48
        JP: 0x22EE1AC
      description: |-
        Decrements dungeon::wind_turns and displays a wind warning message if required.
        
        No params.
    - name: SetForcedLossReason
      address:
        EU: 0x22ED9B8
        NA: 0x22ED008
        JP: 0x22EE66C
      description: |-
        Sets dungeon::forced_loss_reason to the specified value
        
        r0: Forced loss reason
    - name: GetForcedLossReason
      address:
        EU: 0x22ED9CC
        NA: 0x22ED01C
        JP: 0x22EE680
      description: |-
        Returns dungeon::forced_loss_reason
        
        return: forced_loss_reason
    - name: BindTrapToTile
      address:
        EU: 0x22EE208
        NA: 0x22ED858
        JP: 0x22EEEBC
      description: |-
        Sets the given tile's associated object to be the given trap, and sets the visibility of the trap.
        
        r0: tile pointer
        r1: entity pointer
        r2: visibility flag
    - name: SpawnEnemyTrapAtPos
      address:
        EU: 0x22EE320
        NA: 0x22ED970
        JP: 0x22EEFD4
      description: |-
        A convenience wrapper around SpawnTrap and BindTrapToTile. Always passes 0 for the team parameter (making it an enemy trap).
        
        r0: trap ID
        r1: x position
        r2: y position
        r3: flags
        stack[0]: visibility flag
    - name: PrepareTrapperTrap
      address:
        EU: 0x22EE584
        NA: 0x22EDBD4
        JP: 0x22EF238
      description: |-
        Saves the relevant information in the dungeon struct to later place a trap at the
        location of the entity. (Only called with trap ID 0x19 (TRAP_NONE), but could be used 
        with others).
        
        r0: entity pointer
        r1: trap ID
        r2: team (see struct trap::team)
    - name: TrySpawnTrap
      address:
        EU: 0x22EE66C
        NA: 0x22EDCBC
        JP: 0x22EF320
      description: |-
        Checks if the a trap can be placed on the tile. If the trap ID is >= TRAP_NONE (the
        last value for a trap), randomly select another trap (except for wonder tile). After
        30 failed attempts to select a non-wonder tile trap ID, default to chestnut trap.
        If the checks pass, spawn the trap.
        
        r0: position
        r1: trap ID
        r2: team (see struct trap::team)
        r3: visibility flag
        return: true if a trap was spawned succesfully
    - name: TrySpawnTrapperTrap
      address:
        EU: 0x22EE784
        NA: 0x22EDDD4
        JP: 0x22EF438
      description: |-
        If the flag for a trapper trap is set, handles spawning a trap based upon the
        information inside the dungeon struct. Uses the entity for logging a message
        depending on success or failure.
        
        r0: entity pointer
        return: true if a trap was spawned succesfully
    - name: TryTriggerTrap
      address:
        EU: 0x22EE950
        NA: 0x22EDFA0
      description: |-
        Called whenever a monster steps on a trap.
        
        The function will try to trigger it. Nothing will happen if the pokémon has the same team as the trap. The attempt to trigger the trap can also fail due to IQ skills, due to the trap failing to work (random chance), etc.
        
        r0: Entity who stepped on the trap
        r1: Trap position
        r2: ?
        r3: ?
    - name: ApplyMudTrapEffect
      address:
        EU: 0x22EED1C
        NA: 0x22EE36C
        JP: 0x22EF9C8
      description: |-
        Randomly lowers attack, special attack, defense, or special defense of the defender by 3 stages.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyStickyTrapEffect
      address:
        EU: 0x22EEDE4
        NA: 0x22EE434
        JP: 0x22EFA90
      description: |-
        If the defender is the leader, randomly try to make something in the bag sticky. Otherwise, try to make the item the monster is holding sticky.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyGrimyTrapEffect
      address:
        EU: 0x22EEFE0
        NA: 0x22EE62C
        JP: 0x22EFC8C
      description: |-
        If the defender is the leader, randomly try to turn food items in the toolbox into
        grimy food. Otherwise, try to make the food item the monster is holding grimy food.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyPitfallTrapEffect
      address:
        EU: 0x22EF1D4
        NA: 0x22EE820
      description: |-
        If the defender is the leader, end the current floor unless it has a rescue point.
        Otherwise, make the entity faint and ignore reviver seeds. If not called by a random
        trap, break the grate on the pitfall trap.
        
        r0: attacker entity pointer
        r1: defender entity pointer
        r2: tile pointer
        r3: bool caused by random trap
    - name: ApplySummonTrapEffect
      address:
        EU: 0x22EF348
        NA: 0x22EE994
        JP: 0x22EFFE8
      description: |-
        Randomly spawns 2-4 enemy monsters around the position. The entity is only used for
        logging messages.
        
        r0: entity pointer
        r1: position
    - name: ApplyPpZeroTrapEffect
      address:
        EU: 0x22EF3E4
        NA: 0x22EEA30
        JP: 0x22F0084
      description: |-
        Tries to reduce the PP of one of the defender's moves to 0.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyPokemonTrapEffect
      address:
        EU: 0x22EF4CC
        NA: 0x22EEB18
        JP: 0x22F016C
      description: |-
        Turns item in the same room as the tile at the position (usually just the entities's
        position) into monsters. If the position is in a hallway, convert items in a 3x3 area
        centered on the position into monsters.
        
        r0: entity pointer
        r1: position
    - name: ApplyTripTrapEffect
      address:
        EU: 0x22EF6E0
        NA: 0x22EED2C
        JP: 0x22F0380
      description: |-
        Tries to drop the defender's item and places it on the floor.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyStealthRockTrapEffect
      address:
        EU: 0x22EF804
        NA: 0x22EEE50
      description: |-
        Tries to apply the damage from the stealth rock trap but does nothing if the defender is a rock type.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyToxicSpikesTrapEffect
      address:
        EU: 0x22EF8A0
        NA: 0x22EEEEC
      description: |-
        Tries to inflict 10 damage on the defender and then tries to poison them.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ApplyRandomTrapEffect
      address:
        EU: 0x22EF8F4
        NA: 0x22EEF40
      description: |-
        Selects a random trap that isn't a wonder tile and isn't a random trap and calls
        ApplyTrapEffect on all monsters that is different from the trap's team.
        
        r0: Triggered trap
        r1: User
        r2: Target, normally same as user
        r3: Tile that contains the trap
        stack[0]: position
    - name: ApplyGrudgeTrapEffect
      address:
        EU: 0x22EFA28
        NA: 0x22EF074
      description: |-
        Spawns several monsters around the position and gives all monsters on the floor the
        grudge status condition.
        
        r0: entity pointer
        r1: position
    - name: ApplyTrapEffect
      address:
        EU: 0x22EFB08
        NA: 0x22EF154
        JP: 0x22F0730
      description: |-
        Performs the effect of a triggered trap.
        
        The trap's animation happens before this function is called.
        
        r0: Triggered trap
        r1: User
        r2: Target, normally same as user
        r3: Tile that contains the trap
        stack[0]: position
        stack[1]: trap ID
        stack[2]: bool caused by random trap
        return: True if the trap should be destroyed after the effect is applied
    - name: RevealTrapsNearby
      address:
        EU: 0x22EFF8C
        NA: 0x22EF5D8
        JP: 0x22F0BDC
      description: |-
        Reveals traps within the monster's viewing range.
        
        r0: entity pointer
    - name: ShouldRunMonsterAi
      address:
        EU: 0x22F03A0
        NA: 0x22EF9EC
        JP: 0x22F0FF0
      description: |-
        Checks a monster's monster_behavior to see whether or not the monster should use AI. Only called on monsters with
        a monster_behavior greater than or equal to BEHAVIOR_FIXED_ENEMY. Returns false for BEHAVIOR_FIXED_ENEMY, 
        BEHAVIOR_WANDERING_ENEMY_0x8, BEHAVIOR_SECRET_BAZAAR_KIRLIA, BEHAVIOR_SECRET_BAZAAR_MIME_JR,
        BEHAVIOR_SECRET_BAZAAR_SWALOT, BEHAVIOR_SECRET_BAZAAR_LICKILICKY, and BEHAVIOR_SECRET_BAZAAR_SHEDINJA.
        
        r0: monster entity pointer
        return: bool
    - name: DebugRecruitingEnabled
      address:
        EU: 0x22F0420
        NA: 0x22EFA6C
        JP: 0x22F1070
      description: |-
        Always returns true. Called by SpecificRecruitCheck.
        
        Seems to be a function used during development to disable recruiting. If it returns false, SpecificRecruitCheck will also return false.
        
        return: true
    - name: TryActivateIqBooster
      address:
        EU: 0x22F0428
        NA: 0x22EFA74
        JP: 0x22F1078
      description: |-
        Increases the IQ of all team members holding the IQ Booster by floor_properties::iq_booster_value amount unless the
        value is 0.
        
        No params.
    - name: IsSecretBazaarNpcBehavior
      address:
        EU: 0x22F04B8
        NA: 0x22EFB04
        JP: 0x22F1108
      description: |-
        Checks if a behavior ID corresponds to one of the Secret Bazaar NPCs.
        
        r0: monster behavior ID
        return: bool
    - name: GetLeaderAction
      address:
        EU: 0x22F1540
        NA: 0x22F0B8C
        JP: 0x22F218C
      description: |-
        Returns a pointer to the action data of the current leader (field 0x4A on its monster struct).
        
        No params.
    - name: GetEntityTouchscreenArea
      address:
        EU: 0x22F1560
        NA: 0x22F0BAC
        JP: 0x22F21AC
      description: |-
        Returns the area on the touchscreen that contains the sprite of the specified entity
        
        r0: Entity pointer
        r1: [output] struct where the result should be written
    - name: SetLeaderAction
      address:
        EU: 0x22F1890
        NA: 0x22F0EDC
        JP: 0x22F24DC
      description: |-
        Sets the leader's action field depending on the inputs given by the player.
        
        This function also accounts for other special situations that can force a certain action, such as when the leader is running. The function also takes care of opening the main menu when X is pressed.
        The function generally doesn't return until the player has an action set.
        
        No params.
    - name: ShouldLeaderKeepRunning
      address:
        EU: 0x22F3A44
        NA: 0x22F308C
        JP: 0x22F4684
      description: |-
        Determines if the leader should keep running. Returns false if the leader bumps into something, or if an action that should stop the leader takes place.
        
        return: True if the leader should keep running, false if it should stop.
    - name: CheckLeaderTile
      address:
        EU: 0x22F3FEC
        NA: 0x22F3634
        JP: 0x22F4C2C
      description: |-
        Checks the tile the leader just stepped on and performs any required actions, such as picking up items, triggering traps, etc.
        
        Contains a switch that checks the type of the tile the leader just stepped on.
        
        No params.
    - name: ChangeLeader
      address:
        EU: 0x22F42F0
        NA: 0x22F3934
        JP: 0x22F4F2C
      description: |-
        Tries to change the current leader to the monster specified by dungeon::new_leader.
        
        Accounts for situations that can prevent changing leaders, such as having stolen from a Kecleon shop. If one of those situations prevents changing leaders, prints the corresponding message to the message log.
        
        No params.
    - name: UseSingleUseItemWrapper
      address:
        EU: 0x22F5C88
        NA: 0x22F52CC
        JP: 0x22F68C4
      description: |-
        Same as UseSingleUseItem, but the second parameter is determined automatically from monster::action_data::action_parameter[1]::action_use_idx.
        
        r0: User
    - name: UseSingleUseItem
      address:
        EU: 0x22F5CB4
        NA: 0x22F52F8
        JP: 0x22F68F0
      description: |-
        Makes a monster use a single-use item. The item is deleted afterwards.
        
        The item to use is determined by the user's monster::action_data::action_parameter[0].
        
        r0: User (monster who used the item)
        r1: Target (monster that consumes the item)
    - name: UseThrowableItem
      address:
        EU: 0x22F5E78
        NA: 0x22F54BC
        JP: 0x22F6AB4
      description: |-
        Makes a monster use a throwable item.
        
        The item to use is determined by monster::action_data::action_parameter[0].
        If the item's category is CATEGORY_THROWN_LINE or CATEGORY_THROWN_ARC, the game will attempt to decrement the count of the used item by 1. If it's not or there's only 1 item left, it is destroyed instead.
        
        r0: User (monster who used the item)
    - name: ResetDamageData
      address:
        EU: 0x22F77D0
        NA: 0x22F6E18
        JP: 0x22F83FC
      description: |-
        Zeroes the damage data struct, which is output by the damage calculation function.
        
        r0: damage data pointer
    - name: FreeLoadedAttackSpriteAndMore
      address:
        EU: 0x22F78C8
        NA: 0x22F6F10
        JP: 0x22F84DC
      description: |-
        Among other things, free another data structure in the attack sprite storage area/data
        
        No params.
    - name: SetAndLoadCurrentAttackAnimation
      address:
        EU: 0x22F7920
        NA: 0x22F6F68
        JP: 0x22F8534
      description: |-
        Load given sprite into the currently loaded attack sprite structure, replacing the previous one if already loaded.
        
        r0: pack id
        r1: file index
        return: sprite id in the loaded wan list
    - name: ClearLoadedAttackSprite
      address:
        EU: 0x22F79C0
        NA: 0x22F7008
        JP: 0x22F85D4
      description: |-
        Delete the data of the currently loaded attack sprite, if any.
        Doesn’t free the structure, which can continue to be used.
        
        No params.
    - name: GetLoadedAttackSpriteId
      address:
        EU: 0x22F7A08
        NA: 0x22F7050
        JP: 0x22F861C
      description: |-
        Get the sprite ID (in the loaded WAN list) of the currently loaded attack sprite, or 0 if none.
        
        return: sprite ID
    - name: DungeonGetTotalSpriteFileSize
      address:
        EU: 0x22F7A20
        NA: 0x22F7068
        JP: 0x22F8634
      description: |-
        Checks Castform and Cherrim
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        return: sprite file size
    - name: DungeonGetSpriteIndex
      address:
        EU: 0x22F7D40
        NA: 0x22F7388
      description: |-
        Gets the sprite index of the specified monster on this floor
        
        r0: Monster ID
        return: Sprite index of the specified monster ID
    - name: JoinedAtRangeCheck2Veneer
      address:
        EU: 0x22F7D60
        NA: 0x22F73A8
      description: |-
        Likely a linker-generated veneer for arm9::JoinedAtRangeCheck2.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: FloorNumberIsEven
      address:
        EU: 0x22F7D6C
        NA: 0x22F73B4
        JP: 0x22F897C
      description: |-
        Checks if the current dungeon floor number is even (probably to determine whether an enemy spawn should be female).
        
        Has a special check to return false for Labyrinth Cave B10F (the Gabite boss fight).
        
        return: bool
    - name: GetKecleonIdToSpawnByFloor
      address:
        EU: 0x22F7DA4
        NA: 0x22F73EC
        JP: 0x22F89B4
      description: |-
        If the current floor number is even, returns female Kecleon's id (0x3D7), otherwise returns male Kecleon's id (0x17F).
        
        return: monster ID
    - name: StoreSpriteFileIndexBothGenders
      address:
        EU: 0x22F7DC4
        NA: 0x22F740C
        JP: 0x22F89D4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        r1: file ID
    - name: LoadMonsterSpriteInner
      address:
        EU: 0x22F7E8C
        NA: 0x22F74D4
        JP: 0x22F8A9C
      description: |-
        This is called by LoadMonsterSprite a bunch of times.
        
        r0: monster ID
    - name: SwapMonsterWanFileIndex
      address:
        EU: 0x22F7F8C
        NA: 0x22F75D4
        JP: 0x22F8B98
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: src_id
        r1: dst_id
    - name: LoadMonsterSprite
      address:
        EU: 0x22F800C
        NA: 0x22F7654
        JP: 0x22F8C18
      description: |-
        Loads the sprite of the specified monster to use it in a dungeon.
        
        Irdkwia's notes: Handles Castform/Cherrim/Deoxys
        
        r0: monster ID
        r1: ?
    - name: DeleteMonsterSpriteFile
      address:
        EU: 0x22F8120
        NA: 0x22F7768
        JP: 0x22F8D2C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
    - name: DeleteAllMonsterSpriteFiles
      address:
        EU: 0x22F81BC
        NA: 0x22F7804
        JP: 0x22F8DC4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: EuFaintCheck
      address:
        EU: 0x22F88E8
      description: |-
        This function is exclusive to the EU ROM. Seems to perform a check to see if the monster who just fainted was a team member who should cause the minimap to be updated (or something like that, maybe related to the Map Surveyor IQ skill) and if it passes, updates the minimap.
        The function ends by calling another 2 functions. In US ROMs, calls to EUFaintCheck are replaced by calls to those two functions. This seems to indicate that this function fixes some edge case glitch that can happen when a team member faints.
        
        r0: False if the fainted entity was a team member
        r1: True to set an unknown byte in the RAM to 1
    - name: HandleFaint
      address:
        EU: 0x22F8938
        NA: 0x22F7F30
        JP: 0x22F94F0
      description: |-
        Handles a fainted pokémon (reviving does not count as fainting).
        
        r0: Fainted entity
        r1: Damage source (move ID or greater than the max move id for other causes)
        r2: Entity responsible of the fainting
    - name: MoveMonsterToPos
      address:
        EU: 0x22F8FFC
        NA: 0x22F85F0
        JP: 0x22F9BB4
      description: |-
        Moves a monster to the target position. Used both for regular movement and special movement (like teleportation).
        
        r0: Entity pointer
        r1: X target position
        r2: Y target position
        r3: ?
    - name: UpdateAiTargetPos
      address:
        EU: 0x22F9B50
        NA: 0x22F9144
        JP: 0x22FA708
      description: |-
        Given a monster, updates its target_pos field based on its current position and the direction in which it plans to attack.
        
        r0: Entity pointer
    - name: SetMonsterTypeAndAbility
      address:
        EU: 0x22F9BA0
        NA: 0x22F9194
        JP: 0x22FA758
      description: |-
        Checks Forecast ability
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: target entity pointer
    - name: TryActivateSlowStart
      address:
        EU: 0x22F9C48
        NA: 0x22F923C
        JP: 0x22FA800
      description: |-
        Runs a check over all monsters on the field for the ability Slow Start, and lowers the speed of those who have it.
        
        No params
    - name: TryActivateArtificialWeatherAbilities
      address:
        EU: 0x22F9CE4
        NA: 0x22F92D8
        JP: 0x22FA89C
      description: |-
        Runs a check over all monsters on the field for abilities that affect the weather and changes the floor's weather accordingly.
        
        No params
    - name: GetMonsterApparentId
      address:
        EU: 0x22F9E14
        NA: 0x22F9408
        JP: 0x22FA9CC
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: target entity pointer
        r1: current_id
        return: ?
    - name: TryActivateTraceAndColorChange
      address:
        EU: 0x22F9EFC
        NA: 0x22F94F0
        JP: 0x22FAAB4
      description: |-
        Tries to activate the abilities trace and color change if possible. Called after using
        a move.
        
        r0: attacker entity pointer
        r1: defender entity pointer
        r2: move pointer
    - name: DefenderAbilityIsActive
      address:
        EU:
          - 0x22FA0D8
          - 0x2302438
          - 0x230B3B4
          - 0x23125F4
          - 0x23237CC
          - 0x233344C
        NA:
          - 0x22F96CC
          - 0x2301A0C
          - 0x230A940
          - 0x2311B94
          - 0x2322D64
          - 0x2332A0C
        JP: 0x2302F74
      description: |-
        Checks if a defender has an active ability that isn't disabled by an attacker's Mold Breaker.
        
        There are two versions of this function, which share the same logic but have slightly different assembly. This is probably due to differences in compiler optimizations at different addresses.
        
        r0: attacker pointer
        r1: defender pointer
        r2: ability ID to check on the defender
        r3: flag for whether the attacker's ability is enabled
        return: bool
    - name: IsMonster
      address:
        EU:
          - 0x22FA12C
          - 0x230248C
          - 0x230B408
          - 0x23103F4
          - 0x2319510
          - 0x231B434
          - 0x231BD78
          - 0x2323820
          - 0x234E060
        NA:
          - 0x22F9720
          - 0x2301A60
          - 0x230A994
          - 0x230F980
          - 0x2318AB0
          - 0x231A9D4
          - 0x231B318
          - 0x2322DB8
          - 0x234D460
      description: |-
        Checks if an entity is a monster (entity type 1).
        
        r0: entity pointer
        return: bool
    - name: TryActivateConversion2
      address:
        EU: 0x22FA150
        NA: 0x22F9744
        JP: 0x22FACFC
      description: |-
        Checks for the conversion2 status and applies the type change if applicable. Called
        after using a move.
        
        r0: attacker entity pointer
        r1: defender entity pointer
        r2: move pointer
    - name: TryActivateTruant
      address:
        EU: 0x22FA1FC
        NA: 0x22F97F0
        JP: 0x22FADA8
      description: |-
        Checks if an entity has the ability Truant, and if so tries to apply the pause status to it.
        
        r0: pointer to entity
    - name: TryPointCameraToMonster
      address:
        EU: 0x22FA2C0
        NA: 0x22F98B4
        JP: 0x22FAE6C
      description: |-
        Attempts to place the camera on top of the specified monster.
        
        If the camera is already on top of the specified entity, the function does nothing.
        
        r0: Entity pointer. Must be a monster, otherwise the function does nothing.
        r1: ?
        r2: ?
    - name: RestorePpAllMovesSetFlags
      address:
        EU: 0x22FA480
        NA: 0x22F9A74
      description: |-
        Restores PP for all moves, clears flags move::f_consume_2_pp, move::flags2_unk5 and move::flags2_unk7, and sets flag move::f_consume_pp.
        Called when a monster is revived.
        
        r0: pointer to entity whose moves will be restored
    - name: CheckTeamMemberIdxVeneer
      address:
        NA: 0x22F9C34
      description: |-
        Likely a linker-generated veneer for CheckTeamMemberIdx.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: member index
        return: True if the value is equal to 0x55AA or 0x5AA5
    - name: IsMonsterIdInNormalRangeVeneer
      address:
        NA: 0x22F9C68
      description: |-
        Likely a linker-generated veneer for IsMonsterIdInNormalRange.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: monster ID
        return: bool
    - name: BoostIQ
      address:
        EU: 0x22FAB50
        NA: 0x22FA144
        JP: 0x22FB6EC
      description: |-
        Tries to boost the target's IQ.
        
        r0: monster entity pointer
        r1: iq boost
        r2: bool suppress logs
    - name: ShouldMonsterHeadToStairs
      address:
        EU: 0x22FAE3C
        NA: 0x22FA430
        JP: 0x22FB9D8
      description: |-
        Checks if a given monster should try to reach the stairs when controlled by the AI
        
        r0: Entity pointer
        return: True if the monster should try to reach the stairs, false otherwise
    - name: MewSpawnCheck
      address:
        EU: 0x22FAFFC
        NA: 0x22FA5F0
        JP: 0x22FBB98
      description: |-
        If the monster id parameter is 0x97 (Mew), returns false if either dungeon::mew_cannot_spawn or the second parameter are true.
        
        Called before spawning an enemy, appears to be checking if Mew can spawn on the current floor.
        
        r0: monster id
        r1: return false if the monster id is Mew
        return: bool
    - name: TryEndStatusWithAbility
      address:
        EU: 0x22FB1E8
        NA: 0x22FA7DC
        JP: 0x22FBD84
      description: |-
        Checks if any of the defender's active abilities would end one of their current status
        conditions. For example, if the ability Own Tempo will stop confusion.
        
        Called after changing a monster's ability with skill swap, role play, or trace to
        remove statuses the monster should no longer be affected by.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: ExclusiveItemEffectIsActive
      address:
        EU:
          - 0x22FB6A4
          - 0x2300954
          - 0x230B42C
          - 0x2310320
          - 0x2311AC4
          - 0x231524C
          - 0x231A208
          - 0x231B2DC
          - 0x2324380
          - 0x2333428
          - 0x2348780
          - 0x2348EB0
        NA:
          - 0x22FAC98
          - 0x22FFF28
          - 0x230A9B8
          - 0x230F8AC
          - 0x2311064
          - 0x23147EC
          - 0x23197A8
          - 0x231A87C
          - 0x2323918
          - 0x23329E8
          - 0x2347B80
          - 0x23482B0
        JP:
          - 0x2315CC0
          - 0x2349638
      description: |-
        Checks if a monster is a team member under the effects of a certain exclusive item effect.
        
        r0: entity pointer
        r1: exclusive item effect ID
        return: bool
    - name: GetTeamMemberWithIqSkill
      address:
        EU: 0x22FBA04
        NA: 0x22FAFF8
        JP: 0x22FC580
      description: |-
        Returns an entity pointer to the first team member which has the specified iq skill.
        
        r0: iq skill id
        return: pointer to entity
    - name: TeamMemberHasEnabledIqSkill
      address:
        EU: 0x22FBA70
        NA: 0x22FB064
        JP: 0x22FC5EC
      description: |-
        Returns true if any team member has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: TeamLeaderIqSkillIsEnabled
      address:
        EU: 0x22FBA8C
        NA: 0x22FB080
        JP: 0x22FC608
      description: |-
        Returns true the leader has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: CountMovesOutOfPp
      address:
        EU: 0x22FBAB4
        NA: 0x22FB0A8
      description: |-
        Returns how many of a monster's move are out of PP.
        
        r0: entity pointer
        return: number of moves out of PP
    - name: HasSuperEffectiveMoveAgainstUser
      address:
        EU: 0x22FBB18
        NA: 0x22FB10C
        JP: 0x22FC694
      description: |-
        Checks if the target has at least one super effective move against the user.
        
        r0: User
        r1: Target
        r2: If true, moves with a max Ginseng boost != 99 will be ignored
        return: True if the target has at least one super effective move against the user, false otherwise.
    - name: TryEatItem
      address:
        EU: 0x22FBC20
        NA: 0x22FB214
        JP: 0x22FC79C
      description: |-
        The user attempts to eat an item from the target.
        
        The function tries to eat the target's held item first. If that's not possible and the target is part of the team, it attempts to eat a random edible item from the bag instead.
        Fun fact: The code used to select the random bag item that will be eaten is poorly coded. As a result, there's a small chance of the first edible item in the bag being picked instead of a random one. The exact chance of this happening is (N/B)^B, where N is the amount of non-edible items in the bag and B is the total amount of items in the bag.
        
        r0: User
        r1: Target
        return: True if the attempt was successful
    - name: CheckSpawnThreshold
      address:
        EU: 0x22FBFF8
        NA: 0x22FB5EC
        JP: 0x22FCAC0
      description: |-
        Checks if a given monster ID can spawn in dungeons.
        
        The function returns true if the monster's spawn threshold value is <= SCENARIO_BALANCE_FLAG
        
        r0: monster ID
        return: True if the monster can spawn, false otherwise
    - name: HasLowHealth
      address:
        EU: 0x22FC01C
        NA: 0x22FB610
        JP: 0x22FCAE4
      description: |-
        Checks if the entity passed is a valid monster, and if it's at low health (below 25% rounded down)
        
        r0: entity pointer
        return: bool
    - name: AreEntitiesAdjacent
      address:
        EU: 0x22FC084
        NA: 0x22FB678
        JP: 0x22FCB4C
      description: |-
        Checks whether two entities are adjacent or not.
        
        The function checks all 8 possible directions.
        
        r0: First entity
        r1: Second entity
        return: True if both entities are adjacent, false otherwise.
    - name: IsSpecialStoryAlly
      address:
        EU: 0x22FC4CC
        NA: 0x22FBAD0
        JP: 0x22FCFA4
      description: |-
        Checks if a monster is a special story ally.
        
        This is a hard-coded check that looks at the monster's "Joined At" field. If the value is in the range [DUNGEON_JOINED_AT_BIDOOF, DUNGEON_DUMMY_0xE3], this check will return true.
        
        r0: monster pointer
        return: bool
    - name: IsExperienceLocked
      address:
        EU: 0x22FC4EC
        NA: 0x22FBAF0
        JP: 0x22FCFC4
      description: |-
        Checks if a monster does not gain experience.
        
        This basically just inverts IsSpecialStoryAlly, with the exception of also checking for the "Joined At" field being DUNGEON_CLIENT (is this set for mission clients?).
        
        r0: monster pointer
        return: bool
    - name: InitOtherMonsterData
      address:
        EU: 0x22FC854
        NA: 0x22FBE58
        JP: 0x22FD248
      description: |-
        Initializes stats, IQ skills and moves for a given monster
        
        Might only be used when spawning fixed room monsters.
        
        r0: Entity pointer
        r1: Fixed room monster stats index
        r2: Spawn direction? (when calling this function while spawning a fixed room monster, this is the parameter value associated to the spawn action, after converting it to a direction.)
    - name: InitEnemySpawnStats
      address:
        EU: 0x22FC954
        NA: 0x22FBF58
        JP: 0x22FD348
      description: |-
        Initializes dungeon::enemy_spawn_stats. Might do something else too.
        
        No params.
    - name: InitEnemyStatsAndMoves
      address:
        EU: 0x22FCC30
        NA: 0x22FC234
        JP: 0x22FD624
      description: |-
        Initializes the HP, Atk, Sp. Atk, Def, Sp. Def and moveset of a newly spawned enemy. Might do something else too.
        
        r0: Pointer to the monster's move list
        r1: Pointer to the monster's current HP
        r2: Pointer to the monster's offensive stats
        r3: Pointer to the monster's defensive stats
    - name: SpawnTeam
      address:
        EU: 0x22FCF08
        NA: 0x22FC50C
        JP: 0x22FD8FC
      description: |-
        Seems to initialize and spawn the team when entering a dungeon.
        
        r0: ?
    - name: SpawnInitialMonsters
      address:
        EU: 0x22FD774
        NA: 0x22FCD78
        JP: 0x22FE16C
      description: |-
        Tries to spawn monsters on all the tiles marked for monster spawns. This includes normal enemies and mission targets (rescue targets, outlaws, etc.).
        
        A random initial position is selected as a starting point. Tiles are then swept over left-to-right, top-to-bottom, wrapping around when the map boundary is reached, until all tiles have been checked. The first marked tile encountered in the sweep is reserved for the mission target, but the actual spawning of the target is done last.
        
        No params.
    - name: SpawnMonster
      address:
        EU: 0x22FDA80
        NA: 0x22FD084
        JP: 0x22FE478
      description: |-
        Spawns the given monster on a tile.
        
        r0: pointer to struct spawned_monster_data
        r1: if true, the monster cannot spawn asleep, otherwise it will randomly be asleep
        return: pointer to entity
    - name: InitTeamMember
      address:
        EU: 0x22FDDB0
        NA: 0x22FD3B4
        JP: 0x22FE7A8
      description: |-
        Initializes a team member. Run at the start of each floor in a dungeon.
        
        r0: Monster ID
        r1: X position
        r2: Y position
        r3: Pointer to the struct containing the data of the team member to initialize
        stack[0]: ?
        stack[1]: ?
        stack[2]: ?
        stack[3]: ?
        stack[4]: ?
    - name: InitMonster
      address:
        EU: 0x22FE3D0
        NA: 0x22FD9D4
        JP: 0x22FEDC4
      description: |-
        Initializes the monster struct within the provided entity struct.
        
        r0: ?
        r1: Pointer to the entity whose monster struct should be initialized
        r2: pointer to the entity's spawned_monster_data struct
        r3: (?) Pointer to something
    - name: SubInitMonster
      address:
        EU: 0x22FE7BC
        NA: 0x22FDDC0
        JP: 0x22FF1B0
      description: |-
        Called by InitMonster. Initializes some fields on the monster struct.
        
        r0: pointer to monster to initialize
        r1: some flag
    - name: MarkShopkeeperSpawn
      address:
        EU: 0x22FEB94
        NA: 0x22FE198
        JP: 0x22FF580
      description: |-
        Add a shopkeeper spawn to the list on the dungeon struct. Actual spawning is done later by SpawnShopkeepers.
        
        If an existing entry in dungeon::shopkeeper_spawns exists with the same position, that entry is reused for the new spawn data. Otherwise, a new entry is appended to the array.
        
        r0: x position
        r1: y position
        r2: monster ID
        r3: monster behavior
    - name: SpawnShopkeepers
      address:
        EU: 0x22FEC48
        NA: 0x22FE24C
        JP: 0x22FF634
      description: |-
        Spawns all the shopkeepers in the dungeon struct's shopkeeper_spawns array.
        
        No params.
    - name: GetMaxHpAtLevel
      address:
        EU: 0x22FECF8
        NA: 0x22FE2FC
        JP: 0x22FF6E4
      description: |-
        Returns the max HP of a monster given its level.
        
        r0: Monster ID
        r1: Monster level
        return: Max HP at the given level
    - name: GetOffensiveStatAtLevel
      address:
        EU: 0x22FED4C
        NA: 0x22FE350
        JP: 0x22FF738
      description: |-
        Returns the Atk / Sp. Atk of a monster given its level, capped to 255.
        
        r0: Monster ID
        r1: Monster level
        r2: Stat index (0: Atk, 1: Sp. Atk)
        return: Atk / Sp. Atk at the given level
    - name: GetDefensiveStatAtLevel
      address:
        EU: 0x22FEDB4
        NA: 0x22FE3B8
        JP: 0x22FF7A0
      description: |-
        Returns the Def / Sp. Def of a monster given its level, capped to 255.
        
        r0: Monster ID
        r1: Monster level
        r2: Stat index (0: Def, 1: Sp. Def)
        return: Def / Sp. Def at the given level
    - name: GetOutlawSpawnData
      address:
        EU: 0x22FEE1C
        NA: 0x22FE420
        JP: 0x22FF808
      description: |-
        Gets outlaw spawn data for the current floor.
        
        r0: [output] Outlaw spawn data
    - name: ExecuteMonsterAction
      address:
        EU: 0x22FEEDC
        NA: 0x22FE4BC
        JP: 0x22FF8A4
      description: |-
        Executes the set action for the specified monster. Used for both AI actions and player-inputted actions. If the action is not ACTION_NOTHING, ACTION_PASS_TURN, ACTION_WALK or ACTION_UNK_4, the monster's already_acted field is set to true. Includes a switch based on the action ID that performs the action, although some of them aren't handled by said swtich.
        
        r0: Pointer to monster entity
    - name: TryActivateFlashFireOnAllMonsters
      address:
        EU: 0x22FFB94
        NA: 0x22FF168
        JP: 0x2300558
      description: |-
        Checks every monster for apply_flash_fire_boost. If it's true, activates Flash Fire for the monster and sets
        apply_flash_fire_boost back to false.
        
        No params.
    - name: HasStatusThatPreventsActing
      address:
        EU: 0x22FFBF4
        NA: 0x22FF1C8
        JP: 0x23005B8
      description: |-
        Returns true if the monster has any status problem that prevents it from acting
        
        r0: Entity pointer
        return: True if the specified monster can't act because of a status problem, false otherwise.
    - name: GetMobilityTypeCheckSlip
      address:
        EU: 0x2300058
        NA: 0x22FF62C
        JP: 0x2300A1C
      description: |-
        Returns the mobility type of a monster species, accounting for STATUS_SLIP.
        
        The function also converts MOBILITY_LAVA and MOBILITY_WATER to other values if required.
        
        r0: Monster species
        r1: True if the monster can walk on water
        return: Mobility type
    - name: GetMobilityTypeCheckSlipAndFloating
      address:
        EU: 0x23000A0
        NA: 0x22FF674
        JP: 0x2300A64
      description: |-
        Returns the mobility type of a monster, accounting for STATUS_SLIP and the result of a call to IsFloating.
        
        r0: Entity pointer
        r1: Monster species
        return: Mobility type
    - name: IsInvalidSpawnTile
      address:
        EU: 0x23000F0
        NA: 0x22FF6C4
        JP: 0x2300AB4
      description: |-
        Checks if a monster cannot spawn on the given tile for some reason.
        
        Reasons include:
        - There's another monster on the tile
        - The tile is an impassable wall
        - The monster does not have the required mobility to stand on the tile
        
        r0: monster ID
        r1: tile pointer
        return: true means the monster CANNOT spawn on this tile
    - name: GetMobilityTypeAfterIqSkills
      address:
        EU: 0x23002F4
        NA: 0x22FF8C8
      description: |-
        Modifies the given mobility type to account for All-Terrain Hiker and Absolute Mover, if the user has them.
        
        r0: Entity pointer
        r1: Mobility type
        return: New mobility type, after accounting for the IQ skills mentioned above
    - name: CannotStandOnTile
      address:
        EU: 0x23006C8
        NA: 0x22FF764
        JP: 0x2300B54
      description: |-
        Checks if a given monster cannot stand on a given tile.
        
        Reasons include:
        - The coordinates of the tile are out of bounds
        - There's another monster on the tile
        - The monster does not have the required mobility to stand on the tile
        
        r0: Entity pointer
        r1: Tile pointer
        return: True if the monster cannot stand on the specified tile, false if it can
    - name: CalcSpeedStage
      address:
        EU: 0x2300820
        NA: 0x22FFDF4
        JP: 0x2301224
      description: |-
        Calculates the speed stage of a monster from its speed up/down counters. The second parameter is the weight of each counter (how many stages it will add/remove), but appears to be always 1. 
        Takes modifiers into account (paralysis, snowy weather, Time Tripper). Deoxys-speed, Shaymin-sky and enemy Kecleon during a thief alert get a flat +1 always.
        
        The calculated speed stage is both returned and saved in the monster's statuses struct.
        
        r0: pointer to entity
        r1: speed counter weight
        return: speed stage
    - name: CalcSpeedStageWrapper
      address:
        EU: 0x2300978
        NA: 0x22FFF4C
      description: |-
        Calls CalcSpeedStage with a speed counter weight of 1.
        
        r0: pointer to entity
        return: speed stage
    - name: GetNumberOfAttacks
      address:
        EU: 0x2300988
        NA: 0x22FFF5C
        JP: 0x230138C
      description: |-
        Returns the number of attacks that a monster can do in one turn (1 or 2).
        
        Checks for the abilities Swift Swim, Chlorophyll, Unburden, and for exclusive items.
        
        r0: pointer to entity
        returns: int
    - name: GetMonsterDisplayNameType
      address:
        EU: 0x2300B34
        NA: 0x2300108
      description: |-
        Determines how the name of a monster should be displayed.
        
        r0: Entity pointer
        return: Display name type
    - name: GetMonsterName
      address:
        EU: 0x2300B90
        NA: 0x2300164
        JP: 0x2301538
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: buffer
        r1: TargetInfo
    - name: SprintfStatic
      address:
        EU: 0x2300CF4
        NA: 0x23002C8
        JP: 0x23016D0
      description: |-
        Statically defined copy of sprintf(3) in overlay 29. See arm9.yml for more information.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: IsMonsterDrowsy
      address:
        EU: 0x2300EDC
        NA: 0x23004B0
        JP: 0x2301894
      description: |-
        Checks if a monster has the sleep, nightmare, or yawning status. Note that this excludes the napping status.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasNonvolatileNonsleepStatus
      address:
        EU: 0x2300F10
        NA: 0x23004E4
        JP: 0x23018C8
      description: |-
        Checks if a monster has one of the statuses in the "burn" group, which includes the traditionally non-volatile status conditions (except sleep) in the main series: STATUS_BURN, STATUS_POISONED, STATUS_BADLY_POISONED, STATUS_PARALYSIS, and STATUS_IDENTIFYING.
        
        STATUS_IDENTIFYING is probably included based on enum status_id? Unless it's handled differently somehow.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasImmobilizingStatus
      address:
        EU: 0x2300F2C
        NA: 0x2300500
        JP: 0x23018E4
      description: |-
        Checks if a monster has one of the non-self-inflicted statuses in the "freeze" group, which includes status conditions that immobilize the monster: STATUS_FROZEN, STATUS_SHADOW_HOLD, STATUS_WRAPPED, STATUS_PETRIFIED, STATUS_CONSTRICTION, and STATUS_FAMISHED.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasAttackInterferingStatus
      address:
        EU: 0x2300F4C
        NA: 0x2300520
        JP: 0x2301904
      description: |-
        Checks if a monster has one of the statuses in the "cringe" group, which includes status conditions that interfere with the monster's ability to attack: STATUS_CRINGE, STATUS_CONFUSED, STATUS_PAUSED, STATUS_COWERING, STATUS_TAUNTED, STATUS_ENCORE, STATUS_INFATUATED, and STATUS_DOUBLE_SPEED.
        
        STATUS_DOUBLE_SPEED is probably included based on enum status_id? Unless it's handled differently somehow.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasSkillInterferingStatus
      address:
        EU: 0x2300F68
        NA: 0x230053C
        JP: 0x2301920
      description: |-
        Checks if a monster has one of the non-self-inflicted statuses in the "curse" group, which loosely includes status conditions that interfere with the monster's skills or ability to do things: STATUS_CURSED, STATUS_DECOY, STATUS_GASTRO_ACID, STATUS_HEAL_BLOCK, STATUS_EMBARGO.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasLeechSeedStatus
      address:
        EU: 0x2300FB4
        NA: 0x2300588
        JP: 0x230196C
      description: |-
        Checks if a monster is afflicted with Leech Seed.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasWhifferStatus
      address:
        EU: 0x2300FD0
        NA: 0x23005A4
        JP: 0x2301988
      description: |-
        Checks if a monster has the whiffer status.
        
        r0: entity pointer
        return: bool
    - name: IsMonsterVisuallyImpaired
      address:
        EU: 0x2300FEC
        NA: 0x23005C0
        JP: 0x23019A4
      description: |-
        Checks if a monster's vision is impaired somehow. This includes the checks in IsBlinded, as well as STATUS_CROSS_EYED and STATUS_DROPEYE.
        
        r0: entity pointer
        r1: flag for whether to check for the held item
        return: bool
    - name: IsMonsterMuzzled
      address:
        EU: 0x2301028
        NA: 0x23005FC
        JP: 0x23019E0
      description: |-
        Checks if a monster has the muzzled status.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasMiracleEyeStatus
      address:
        EU: 0x2301044
        NA: 0x2300618
        JP: 0x23019FC
      description: |-
        Checks if a monster has the Miracle Eye status.
        
        r0: entity pointer
        return: bool
    - name: MonsterHasNegativeStatus
      address:
        EU: 0x2301060
        NA: 0x2300634
        JP: 0x2301A18
      description: |-
        Checks if a monster has any "negative" status conditions. This includes a wide variety of non-self-inflicted statuses that could traditionally be viewed as actual "status conditions", as well as speed being lowered and moves being sealed.
        
        r0: entity pointer
        r1: flag for whether to check for the held item (see IsMonsterVisuallyImpaired)
        return: bool
    - name: IsMonsterSleeping
      address:
        EU: 0x23011D4
        NA: 0x23007A8
        JP: 0x2301B8C
      description: |-
        Checks if a monster has the sleep, nightmare, or napping status.
        
        r0: entity pointer
        return: bool
    - name: CanMonsterMoveInDirection
      address:
        EU: 0x23018A4
        NA: 0x230105C
      description: |-
        Checks if the given monster can move in the specified direction
        
        Returns false if any monster is standing on the target tile
        
        r0: Monster entity pointer
        r1: Direction to check
        return: bool
    - name: GetDirectionalMobilityType
      address:
        EU: 0x230195C
        NA: 0x2300F30
      description: |-
        Returns the mobility type of a monster, after accounting for things that could affect it.
        
        List of checks: Mobile status, Mobile Scarf, All-Terrain Hiker and Absolute Mover.
        
        If the specified direction is DIR_NONE, direction checks are skipped. If it's not, MOBILITY_INTANGIBLE is only returned if the direction is not diagonal.
        
        r0: Monster entity pointer
        r1: Base mobility type
        r2: Direction of mobility
        return: Final mobility type
    - name: IsMonsterCornered
      address:
        EU: 0x2301B44
        NA: 0x2301118
        JP: 0x230251C
      description: |-
        True if the given monster is cornered (it can't move in any direction)
        
        r0: Entity pointer
        return: True if the monster can't move in any direction, false otherwise.
    - name: CanAttackInDirection
      address:
        EU: 0x2301C60
        NA: 0x2301234
        JP: 0x2302694
      description: |-
        Returns whether a monster can attack in a given direction.
        The check fails if the destination tile is impassable, contains a monster that isn't of type entity_type::ENTITY_MONSTER or if the monster can't directly move from the current tile into the destination tile.
        
        r0: Entity pointer
        r1: Direction
        return: True if the monster can attack into the tile adjacent to them in the specified direction, false otherwise.
    - name: CanAiMonsterMoveInDirection
      address:
        EU: 0x2301D24
        NA: 0x23012F8
        JP: 0x23027B8
      description: |-
        Checks whether an AI-controlled monster can move in the specified direction.
        Accounts for walls, other monsters on the target position and IQ skills that might prevent a monster from moving into a specific location, such as House Avoider, Trap Avoider or Lava Evader.
        
        r0: Entity pointer
        r1: Direction
        r2: [output] True if movement was not possible because there was another monster on the target tile, false otherwise.
        return: True if the monster can move in the specified direction, false otherwise.
    - name: ShouldMonsterRunAway
      address:
        EU: 0x2301FE4
        NA: 0x23015B8
        JP: 0x2302B28
      description: |-
        Checks if a monster should run away from other monsters
        
        r0: Entity pointer
        return: True if the monster should run away, false otherwise
    - name: ShouldMonsterRunAwayVariation
      address:
        EU: 0x23020D4
        NA: 0x23016A8
        JP: 0x2302C18
      description: |-
        Calls ShouldMonsterRunAway and returns its result. It also calls another function if the result was true.
        
        r0: Entity pointer
        r1: ?
        return: Result of the call to ShouldMonsterRunAway
    - name: SafeguardIsActive
      address:
        EU: 0x230236C
        NA: 0x2301940
        JP: 0x2302EAC
      description: |-
        Checks if the monster is under the effect of Safeguard.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message
        return: bool
    - name: LeafGuardIsActive
      address:
        EU: 0x23023C0
        NA: 0x2301994
        JP: 0x2302F00
      description: |-
        Checks if the monster is protected by the ability Leaf Guard.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message
        return: bool
    - name: IsProtectedFromStatDrops
      address:
        EU: 0x2302558
        NA: 0x2301B2C
        JP: 0x230308C
      description: |-
        Checks if the target monster is protected from getting their stats dropped by the user.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message
        return: bool
    - name: NoGastroAcidStatus
      address:
        EU: 0x2302708
        NA: 0x2301CDC
        JP: 0x2303234
      description: |-
        Checks if a monster does not have the Gastro Acid status.
        
        r0: entity pointer
        return: bool
    - name: AbilityIsActive
      address:
        EU: 0x230273C
        NA: 0x2301D10
        JP: 0x2303268
      description: |-
        Checks if a monster has a certain ability that isn't disabled by Gastro Acid.
        
        r0: entity pointer
        r1: ability ID
        return: bool
    - name: AbilityIsActiveVeneer
      address:
        EU: 0x23027A4
        NA: 0x2301D78
        JP: 0x23032D0
      description: |-
        Likely a linker-generated veneer for AbilityIsActive.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: entity pointer
        r1: ability ID
        return: bool
    - name: OtherMonsterAbilityIsActive
      address:
        EU: 0x23027B0
        NA: 0x2301D84
        JP: 0x23032DC
      description: |-
        Checks if there are any other monsters on the floor besides the user that have the specified ability active, subject to the user being on the floor.
        
        It also seems like there might be some other range or validity check, so this might not actually check ALL other monsters?
        
        r0: user entity pointer
        r1: ability ID
        return: bool
    - name: LevitateIsActive
      address:
        EU: 0x2302844
        NA: 0x2301E18
        JP: 0x2303368
      description: |-
        Checks if a monster is levitating (has the effect of Levitate and Gravity is not active).
        
        r0: pointer to entity
        return: bool
    - name: MonsterIsType
      address:
        EU: 0x230287C
        NA: 0x2301E50
        JP: 0x23033A0
      description: |-
        Checks if a monster is a given type.
        
        r0: entity pointer
        r1: type ID
        return: bool
    - name: IsTypeAffectedByGravity
      address:
        EU: 0x23028B4
        NA: 0x2301E88
        JP: 0x23033D8
      description: |-
        Checks if Gravity is active and that the given type is affected (i.e., Flying type).
        
        r0: target entity pointer (unused)
        r1: type ID
        return: bool
    - name: HasTypeAffectedByGravity
      address:
        EU: 0x23028D8
        NA: 0x2301EAC
        JP: 0x23033FC
      description: |-
        Checks if Gravity is active and that the given monster is of an affected type (i.e., Flying type).
        
        r0: target entity pointer
        r1: type ID
        return: bool
    - name: CanSeeInvisibleMonsters
      address:
        EU: 0x2302918
        NA: 0x2301EEC
        JP: 0x230343C
      description: |-
        Returns whether a certain monster can see other invisible monsters.
        To be precise, this function returns true if the monster is holding Goggle Specs or if it has the status status::STATUS_EYEDROPS.
        
        r0: Entity pointer
        return: True if the monster can see invisible monsters.
    - name: HasDropeyeStatus
      address:
        EU: 0x230297C
        NA: 0x2301F50
        JP: 0x23034A0
      description: |-
        Returns whether a certain monster is under the effect of status::STATUS_DROPEYE.
        
        r0: Entity pointer
        return: True if the monster has dropeye status.
    - name: IqSkillIsEnabled
      address:
        EU: 0x23029AC
        NA: 0x2301F80
        JP: 0x23034D0
      description: |-
        Checks if a monster has a certain IQ skill enabled.
        
        r0: entity pointer
        r1: IQ skill ID
        return: bool
    - name: UpdateIqSkills
      address:
        EU: 0x23029E8
        NA: 0x2301FBC
        JP: 0x230350C
      description: |-
        Updates the IQ skill flags of a monster.
        
        If the monster is a team member, copies monster::iq_skill_menu_flags to monster::iq_skill_flags. If the monster is an enemy, enables all the IQ skills it can learn (except a few that are only enabled in enemies that have a certain amount of IQ).
        If the monster is an enemy, it also sets its tactic to TACTIC_GO_AFTER_FOES.
        Called after exiting the IQ skills menu or after an enemy spawns.
        
        r0: monster pointer
    - name: GetMoveTypeForMonster
      address:
        EU: 0x2302CA8
        NA: 0x230227C
        JP: 0x23037CC
      description: |-
        Check the type of a move when used by a certain monster. Accounts for special cases such as Hidden Power, Weather Ball, the regular attack...
        
        r0: Entity pointer
        r1: Pointer to move data
        return: Type of the move
    - name: GetMovePower
      address:
        EU: 0x2302D48
        NA: 0x230231C
        JP: 0x230386C
      description: |-
        Gets the power of a move, factoring in Ginseng/Space Globe boosts.
        
        r0: user pointer
        r1: move pointer
        return: move power
    - name: UpdateStateFlags
      address:
        EU: 0x2302DEC
        NA: 0x23023C0
      description: |-
        Updates monster::state_flags and monster::prev_state_flags with new values.
        
        r0: monster pointer
        r1: bitmask for bits to update
        r2: whether to set the bits indicated by the mask to 1 or 0
        return: whether or not any of the masked bits changed from the previous state
    - name: IsProtectedFromNegativeStatus
      address:
        EU: 0x2302E5C
        NA: 0x2302430
        JP: 0x2303980
      description: |-
        Checks if the target monster is protected from getting a negative status condition.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message
        return: bool
    - name: AddExpSpecial
      address:
        EU: 0x2302F68
        NA: 0x230253C
        JP: 0x2303A8C
      description: |-
        Adds to a monster's experience points, subject to experience boosting effects.
        
        This function appears to be called only under special circumstances. Possibly when granting experience from damage (e.g., Joy Ribbon)?
        
        Interestingly, the parameter in r0 isn't actually used. This might be a compiler optimization to avoid shuffling registers, since this function might be called alongside lots of other functions that have both the attacker and defender as the first two arguments.
        
        r0: attacker pointer
        r1: defender pointer
        r2: base experience gain, before boosts
    - name: EnemyEvolution
      address:
        EU: 0x2303128
        NA: 0x23026FC
        JP: 0x2303C4C
      description: |-
        Checks if any enemies on the floor should evolve and attempts to evolve it. The
        entity pointer passed seems to get replaced by a generic placeholder entity if the
        entity pointer passed is invalid.
        
        r0: entity pointer
    - name: LevelUpItemEffect
      address:
        EU: 0x2303488
        NA: 0x2302A5C
        JP: 0x2303FAC
      description: |-
        Attempts to level up the the target. Calls LevelUp with a few extra checks and messages
        for using as an item. Used for the Joy Seed and Golden Seed.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of levels
        r3: bool message flag?
        stack[0]: bool show level up dialog (for example "Hey, I leveled up!" with a portrait)?
    - name: TryDecreaseLevel
      address:
        EU: 0x23039B4
        NA: 0x2302F88
        JP: 0x23044D4
      description: |-
        Decrease the target monster's level if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of levels to decrease
        return: success flag
    - name: LevelUp
      address:
        EU: 0x2303A68
        NA: 0x230303C
        JP: 0x2304588
      description: |-
        Attempts to level up the the target. Fails if the target's level can't be raised. The show show level up dialog bool does nothing for monsters not on the team.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: bool message flag?
        r3: bool show level up dialog (for example "Hey, I leveled up!" with a portrait)?
        return: success flag
    - name: GetMonsterMoves
      address:
        EU: 0x2304544
        NA: 0x2303B18
        JP: 0x2305068
      description: |-
        Determines the moveset of a newly spawned monster given its species and level.
        
        The function loops the monster's learnset, adding moves to the list in level-up order. Once all four slots are filled up, a random existing move gets replaced to make room for the new one. This means that the monster will always have the latest move it can learn given its level.
        
        r0: [output] Pointer to move ID list (4 entries, 2 bytes each)
        r1: Monster ID
        r2: Monster level
    - name: EvolveMonster
      address:
        EU: 0x23046A8
        NA: 0x2303C7C
        JP: 0x23051CC
      description: |-
        Makes the specified monster evolve into the specified species. Has a special case when
        a monster evolves into Ninjask and tries to spawn a Shedinja as well.
        
        r0: user entity pointer?
        r1: target pointer to the entity to evolve
        r2: Species to evolve into
    - name: GetSleepAnimationId
      address:
        EU: 0x23054E0
        NA: 0x2304AB4
        JP: 0x2306004
      description: |-
        Returns the animation id to be applied to a monster that has the sleep, napping, nightmare or bide status.
        
        Returns a different animation for sudowoodo and for monsters with infinite sleep turns (0x7F).
        
        r0: pointer to entity
        return: animation ID
    - name: DisplayActions
      address:
        EU: 0x2305A0C
        NA: 0x2304FE0
        JP: 0x2306530
      description: |-
        Graphically displays any pending actions that have happened but haven't been shown on screen yet. All actions are displayed at the same time. For example, this delayed display system is used to display multiple monsters moving at once even though they take turns sequentially.
        
        r0: Pointer to an entity. Can be null.
        returns: Seems to be true if there were any pending actions to display.
    - name: CheckNonLeaderTile
      address:
        EU: 0x23060C0
        NA: 0x2305694
        JP: 0x2306BE4
      description: |-
        Similar to CheckLeaderTile, but for other monsters.
        
        Used both for enemies and team members.
        
        r0: Entity pointer
    - name: EndNegativeStatusCondition
      address:
        EU: 0x23062F0
        NA: 0x23058C4
        JP: 0x2306E14
      description: |-
        Cures the target's negative status conditions. The game rarely (if not never) calls
        this function with the bool to remove the wrapping status false.
        
        r0: pointer to user
        r1: pointer to target
        r2: bool play animation
        r3: bool log failure message
        stack[0]: bool remove wrapping status
        return: bool succesfully removed negative status
    - name: EndNegativeStatusConditionWrapper
      address:
        EU: 0x2306654
        NA: 0x2305C28
        JP: 0x2307178
      description: |-
        Calls EndNegativeStatusCondition with remove wrapping status false.
        
        r0: pointer to user
        r1: pointer to target
        r2: bool play animation
        r3: bool log failure message
        return: bool succesfully removed negative status
    - name: TransferNegativeStatusCondition
      address:
        EU: 0x2306668
        NA: 0x2305C3C
        JP: 0x230718C
      description: |-
        Transfers all negative status conditions the user has and gives then to the target.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: EndSleepClassStatus
      address:
        EU: 0x2306A08
        NA: 0x2305FDC
        JP: 0x230752C
      description: |-
        Cures the target's sleep, sleepless, nightmare, yawn or napping status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndBurnClassStatus
      address:
        EU: 0x2306BD4
        NA: 0x23061A8
        JP: 0x23076F8
      description: |-
        Cures the target's burned, poisoned, badly poisoned or paralysis status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndFrozenClassStatus
      address:
        EU: 0x2306C84
        NA: 0x2306258
        JP: 0x23077A8
      description: |-
        Cures the target's freeze, shadow hold, ingrain, petrified, constriction or wrap (both as user and as target) status due to the action of the user.
        
        r0: pointer to user
        r1: pointer to target
        r2: if true, the event will be printed to the log
    - name: EndCringeClassStatus
      address:
        EU: 0x2306E00
        NA: 0x23063D4
        JP: 0x2307904
      description: |-
        Cures the target's cringe, confusion, cowering, pause, taunt, encore or infatuated status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndReflectClassStatus
      address:
        EU: 0x2306F20
        NA: 0x23064F4
        JP: 0x2307A24
      description: |-
        Removes the target's reflect, safeguard, light screen, counter, magic coat, wish, protect, mirror coat, endure, mini counter?, mirror move, conversion 2, vital throw, mist, metal burst, aqua ring or lucky chant status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: TryRemoveSnatchedMonsterFromDungeonStruct
      address:
        EU: 0x2307104
        NA: 0x23066D8
        JP: 0x2307C08
      description: |-
        If the target is afflicted with snatch, change dungeon::snatch_monster and dungeon::snatch_status_unique_id back
        to NULL and 0 respectively. This function does not actually remove the status and visual flags for snatch from
        the monster, it simply removes it from the dungeon struct. After calling, the user should ensure the monster
        does not still have the snatch status.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndCurseClassStatus
      address:
        EU: 0x2307154
        NA: 0x2306728
        JP: 0x2307C58
      description: |-
        Removes the target's curse (1), decoy (2), snatch (3), gastro acid (4), heal block (5), or embargo (6) status
        due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
        r2: curse class status being afflicted after (0 is the status is only being removed)
        r3: flag to log a message
    - name: EndLeechSeedClassStatus
      address:
        EU: 0x23072F0
        NA: 0x23068C4
        JP: 0x2307DF4
      description: |-
        Cures the target's leech seed or destiny bond status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndSureShotClassStatus
      address:
        EU: 0x230737C
        NA: 0x2306950
        JP: 0x2307E80
      description: |-
        Removes the target's sure shot, whiffer, set damage or focus energy status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndInvisibleClassStatus
      address:
        EU: 0x230742C
        NA: 0x2306A00
        JP: 0x2307F30
      description: |-
        Removes the target's invisible, transformed, mobile, or slip status due to the action of the user, and prints
        the event to the log.
        
        r0: pointer to user
        r1: pointer to target
        r2: flag to not log a message when removing slip status
    - name: EndBlinkerClassStatus
      address:
        EU: 0x2307554
        NA: 0x2306B28
        JP: 0x2308058
      description: |-
        Removes the target's blinker, cross-eyed, eyedrops, or dropeye status due to the action of the user, and
        prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndMuzzledStatus
      address:
        EU: 0x2307624
        NA: 0x2306BF8
        JP: 0x2308128
      description: |-
        Removes the target's muzzled status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndMiracleEyeStatus
      address:
        EU: 0x2307690
        NA: 0x2306C64
        JP: 0x2308194
      description: |-
        Removes the target's miracle eye status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: EndMagnetRiseStatus
      address:
        EU: 0x23076FC
        NA: 0x2306CD0
        JP: 0x2308200
      description: |-
        Removes the target's magnet rise status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: TransferNegativeBlinkerClassStatus
      address:
        EU: 0x2308318
        NA: 0x23078EC
        JP: 0x2308E1C
      description: |-
        Tries to transfer the the negative blinker class status conditions from the user to
        the target.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be transferred
    - name: EndFrozenStatus
      address:
        EU: 0x23086A4
        NA: 0x2307C78
        JP: 0x23091A8
      description: |-
        Cures the target's freeze status due to the action of the user.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: EndProtectStatus
      address:
        EU: 0x2308744
        NA: 0x2307D18
        JP: 0x2309248
      description: |-
        Ends the target's protect status due to the action of the user.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryRestoreRoostTyping
      address:
        EU: 0x2308780
        NA: 0x2307D54
        JP: 0x2309284
      description: |-
        Tries to restore the target's original typings before the Roost effect took place. Does nothing if the target
        is not affected by Roost.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryTriggerMonsterHouse
      address:
        EU: 0x2308978
        NA: 0x2307F4C
        JP: 0x2309480
      description: |-
        Triggers a Monster House for an entity, if the right conditions are met.
        
        Conditions: entity is valid and on the team, the tile is a Monster House tile, and the Monster House hasn't already been triggered.
        
        This function sets the monster_house_triggered flag on the dungeon struct, spawns a bunch of enemies around the triggering entity (within a 4 tile radius), and handles the "dropping down" animation for these enemies. If the allow outside enemies flag is set, the enemy spawns can be on any free tile (no monster) with open terrain, including in hallways. Otherwise, spawns are confined within the room boundaries.
        
        r0: entity for which the Monster House should be triggered
        r1: allow outside enemies flag (in practice this is always set to dungeon_generation_info::force_create_monster_house)
    - name: RunMonsterAi
      address:
        EU: 0x2308D6C
        NA: 0x2308340
      description: |-
        Runs the AI for a single monster to determine whether the monster can act and which action it should perform if so
        
        r0: Pointer to monster
        r1: ?
    - name: ApplyDamageAndEffects
      address:
        EU: 0x2309068
        NA: 0x230863C
        JP: 0x2309C1C
      description: |-
        Calls ApplyDamage, then performs various "post-damage" effects such as counter damage, statuses from abilities that activate on contact, and probably some other stuff.
        
        Note that this doesn't include the effect of Illuminate, which is specifically handled elsewhere.
        
        r0: attacker pointer
        r1: defender pointer
        r2: damage_data pointer
        r3: False Swipe flag (see ApplyDamage)
        stack[0]: experience flag (see ApplyDamage)
        stack[1]: Damage source (see HandleFaint)
        stack[2]: defender response flag. If true, the defender can respond to the attack with various effects. If false, the only post-damage effect that can happen is the Rage attack boost.
    - name: ApplyDamage
      address:
        EU: 0x2309A0C
        NA: 0x2308FE0
        JP: 0x230A598
      description: |-
        Applies damage to a monster. Displays the damage animation, lowers its health and handles reviving if applicable.
        The EU version has some additional checks related to printing fainting messages under specific circumstances.
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Pointer to the damage_data struct that contains info about the damage to deal
        r3: False Swipe flag, causes the defender's HP to be set to 1 if it would otherwise have been 0
        stack[0]: experience flag, controls whether or not experience will be granted upon a monster fainting, and whether enemy evolution might be triggered
        stack[1]: Damage source (see HandleFaint)
        return: True if the target fainted (reviving does not count as fainting)
    - name: AftermathCheck
      address:
        EU: 0x230B480
        NA: 0x230AA0C
        JP: 0x230BF88
      description: |-
        Checks if the defender has the Aftermath ability and tries to activate it if so (50% chance).
        
        The ability won't trigger if the damage source is DAMAGE_SOURCE_EXPLOSION.
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Damage source
        return: True if Aftermath was activated, false if it wasn't
    - name: GetTypeMatchupBothTypes
      address:
        EU: 0x230B500
        NA: 0x230AA8C
        JP: 0x230C004
      description: |-
        Gets the type matchup for a given combat interaction, accounting for both of the user's types.
        
        Calls GetTypeMatchup twice and combines the result.
        
        r0: attacker pointer
        r1: defender pointer
        r2: attack type
        return: enum type_matchup
    - name: ScrappyShouldActivate
      address:
        EU: 0x230B5CC
        NA: 0x230AB58
        JP: 0x230C0D0
      description: |-
        Checks whether Scrappy should activate.
        
        Scrappy activates when the ability is active on the attacker, the move type is Normal or Fighting, and the defender is a Ghost type.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move type ID
        return: bool
    - name: IsTypeIneffectiveAgainstGhost
      address:
        EU: 0x230B664
        NA: 0x230ABF0
        JP: 0x230C168
      description: |-
        Checks whether a type is normally ineffective against Ghost, i.e., it's Normal or Fighting.
        
        r0: type ID
        return: bool
    - name: GhostImmunityIsActive
      address:
        EU: 0x230B678
        NA: 0x230AC04
        JP: 0x230C17C
      description: |-
        Checks whether the defender's typing would give it Ghost immunities.
        
        This only checks one of the defender's types at a time. It checks whether the defender has the exposed status and whether the attacker has the Scrappy-like exclusive item effect, but does NOT check whether the attacker has the Scrappy ability.
        
        r0: attacker pointer
        r1: defender pointer
        r2: defender type index (0 the defender's first type, 1 for the defender's second type)
        return: bool
    - name: GetTypeMatchup
      address:
        EU: 0x230B6CC
        NA: 0x230AC58
        JP: 0x230C1D0
      description: |-
        Gets the type matchup for a given combat interaction.
        
        Note that the actual monster's types on the attacker and defender pointers are not used; the pointers are only used to check conditions. The actual type matchup table lookup is done solely using the attack and target type parameters.
        
        This factors in some conditional effects like exclusive items, statuses, etc. There's some weirdness with the Ghost type; see the comment for struct type_matchup_table.
        
        r0: attacker pointer
        r1: defender pointer
        r2: target type index (0 the target's first type, 1 for the target's second type)
        r3: attack type
        return: enum type_matchup
    - name: CalcTypeBasedDamageEffects
      address:
        EU: 0x230B778
        NA: 0x230AD04
      description: |-
        Calculates type-based effects on damage.
        
        Loosely, this includes type matchup effects (including modifications due to abilities, IQ skills, and exclusive items), STAB, pinch abilities like Overgrow, weather/floor condition effects on certain types, and miscellaneous effects like Charge.
        
        r0: [output] damage multiplier due to type effects.
        r1: attacker pointer
        r2: defender pointer
        r3: attack power
        stack[0]: attack type
        stack[1]: [output] struct containing info about the damage calculation (only the critical_hit, type_matchup, and field_0xF fields are modified)
        stack[2]: flag for whether Erratic Player and Technician effects should be excluded. CalcDamage only passes in true if the move is the regular attack or a projectile.
        return: whether or not the Type-Advantage Master IQ skill should activate if the attacker has it. In practice, this corresponds to when the attack is super-effective, but technically true is also returned when the defender is an invalid entity.
    - name: CalcDamage
      address:
        EU: 0x230C620
        NA: 0x230BBAC
        JP: 0x230D100
      description: |-
        The damage calculation function.
        
        At a high level, the damage formula is:
          M * [(153/256)*(A + P) - 0.5*D + 50*ln(10*[L + (A - D)/8 + 50]) - 311]
        where:
          - A is the offensive stat (attack or special attack) with relevant modifiers applied (stat stages, certain items, certain abilities, etc.)
          - D is the defensive stat (defense or special defense) with relevant modifiers applied (stat stages, certain items, certain abilities, etc.)
          - L is the attacker's level
          - P is the move power with relevant modifiers applied
          - M is an aggregate damage multiplier from a variety of things, such as type-effectiveness, STAB, critical hits (which are also rolled in this function), certain items, certain abilities, certain statuses, etc.
        
        The calculations are done primarily with 64-bit fixed point arithmetic, and a bit of 32-bit fixed point arithmetic. There's also rounding/truncation/clamping at various steps in the process.
        
        r0: attacker pointer
        r1: defender pointer
        r2: attack type
        r3: attack power
        stack[0]: crit chance
        stack[1]: [output] struct containing info about the damage calculation
        stack[2]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[3]: move ID
        stack[4]: flag to account for certain effects (Flash Fire, Reflect, Light Screen, aura bows, Def. Scarf, Zinc Band). Only ever set to false when computing recoil damage for Jump Kick/Hi Jump Kick missing, which is based on the damage that would have been done if the move didn't miss.
    - name: ApplyDamageAndEffectsWrapper
      address:
        EU: 0x230DB90
        NA: 0x230D11C
        JP: 0x230E65C
      description: |-
        A wrapper for ApplyDamageAndEffects used for applying damage from sources such as statuses, traps, liquid ooze,
        hunger, and possibly more.
        
        r0: monster entity pointer
        r1: damage amount
        r2: damage message
        r3: damage source
    - name: CalcRecoilDamageFixed
      address:
        EU: 0x230DC00
        NA: 0x230D18C
        JP: 0x230E6CC
      description: |-
        Appears to calculate recoil damage to a monster.
        
        This function wraps CalcDamageFixed using the monster as both the attacker and the defender, after doing some basic checks (like if the monster is already at 0 HP) and applying a boost from the Reckless ability if applicable.
        
        r0: entity pointer
        r1: fixed damage
        r2: ?
        r3: [output] struct containing info about the damage calculation
        stack[0]: move ID (interestingly, this doesn't seem to be used by the function)
        stack[1]: attack type
        stack[2]: damage source
        stack[3]: damage message
        others: ?
    - name: CalcDamageFixed
      address:
        EU: 0x230DCB4
        NA: 0x230D240
        JP: 0x230E780
      description: |-
        Appears to calculate damage from a fixed-damage effect.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        r3: experience flag (see ApplyDamage)
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        stack[3]: damage source
        stack[4]: damage message
        others: ?
    - name: CalcDamageFixedNoCategory
      address:
        EU: 0x230DE1C
        NA: 0x230D3A8
        JP: 0x230E8E4
      description: |-
        A wrapper around CalcDamageFixed with the move category set to none.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        r3: experience flag (see ApplyDamage)
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: damage source
        stack[3]: damage message
        others: ?
    - name: CalcDamageFixedWrapper
      address:
        EU: 0x230DE68
        NA: 0x230D3F4
        JP: 0x230E930
      description: |-
        A wrapper around CalcDamageFixed.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        r3: experience flag (see ApplyDamage)
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        stack[3]: damage source
        stack[4]: damage message
        others: ?
    - name: UpdateShopkeeperModeAfterAttack
      address:
        EU: 0x230DEB4
        NA: 0x230D440
        JP: 0x230E97C
      description: |-
        Updates the shopkeeper mode of a monster in response to being struck by an attack.
        
        If the defender is in normal shopkeeper mode (not aggressive), nothing happens. Otherwise, the mode is set to SHOPKEEPER_MODE_ATTACK_TEAM if the attacker is a team member, or SHOPKEEPER_MODE_ATTACK_ENEMIES otherwise.
        
        r0: attacker pointer
        r1: defender pointer
    - name: UpdateShopkeeperModeAfterTrap
      address:
        EU: 0x230DEF0
        NA: 0x230D47C
        JP: 0x230E9B8
      description: |-
        Updates the shopkeeper mode of a monster in response to stepping on a trap.
        
        If in the normal shopkeeper mode (not aggressive), nothing happens. Otherwise, the mode is set to SHOPKEEPER_MODE_ATTACK_TEAM if the trap is from a team member or SHOPKEEPER_MODE_ATTACK_ENEMIES otherwise.
        
        r0: shopkeeper pointer
        r1: bool non team member trap
    - name: ResetDamageCalcDiagnostics
      address:
        EU: 0x230DF9C
        NA: 0x230D528
        JP: 0x230EA64
      description: |-
        Resets the damage calculation diagnostic info stored on the dungeon struct. Called unconditionally at the start of CalcDamage.
        
        No params.
    - name: SpecificRecruitCheck
      address:
        EU: 0x230E588
        NA: 0x230DB14
        JP: 0x230F054
      description: |-
        Checks if a specific monster can be recruited. Called by RecruitCheck.
        
        Will return false if dungeon::recruiting_enabled is false, if the monster is Mew and dungeon::dungeon_objective is OBJECTIVE_RESCUE or if the monster is any of the special Deoxys forms or any of the 3 regis.
        If this function returns false, RecruitCheck will return false as well.
        
        r0: Monster ID
        return: True if the monster can be recruited
    - name: RecruitCheck
      address:
        EU: 0x230E644
        NA: 0x230DBD0
        JP: 0x230F110
      description: |-
        Determines if a defeated enemy will attempt to join the team
        
        r0: user entity pointer
        r1: target entity pointer
        return: True if the target will attempt to join the team
    - name: TryRecruit
      address:
        EU: 0x230EAD8
        NA: 0x230E064
      description: |-
        Asks the player if they would like to recruit the enemy that was just defeated and handles the recruitment if they accept.
        
        r0: user entity pointer
        r1: monster to recruit entity pointer
        return: True if the monster was recruited, false if it wasn't
    - name: TrySpawnMonsterAndTickSpawnCounter
      address:
        EU: 0x230F130
        NA: 0x230E6BC
        JP: 0x230FBF8
      description: |-
        First ticks up the spawn counter, and if it's equal or greater than the spawn cooldown, it will try to spawn an enemy if the number of enemies is below the spawn cap.
        
        If the spawn counter is greater than 900, it will instead perform the special spawn caused by the ability Illuminate.
        
        No params.
    - name: TryNonLeaderItemPickUp
      address:
        EU: 0x230FBD8
        NA: 0x230F164
        JP: 0x23106A0
      description: |-
        Similar to TryLeaderItemPickUp, but for other monsters.
        
        Used both for enemies and team members.
        
        r0: entity pointer
    - name: AuraBowIsActive
      address:
        EU: 0x231013C
        NA: 0x230F6C8
        JP: 0x2310C04
      description: |-
        Checks if a monster is holding an aura bow that isn't disabled by Klutz.
        
        r0: entity pointer
        return: bool
    - name: ExclusiveItemOffenseBoost
      address:
        EU: 0x23101EC
        NA: 0x230F778
      description: |-
        Gets the exclusive item boost for attack/special attack for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: ExclusiveItemDefenseBoost
      address:
        EU: 0x23101FC
        NA: 0x230F788
      description: |-
        Gets the exclusive item boost for defense/special defense for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: TeamMemberHasItemActive
      address:
        EU: 0x231020C
        NA: 0x230F798
        JP: 0x2310CD4
      description: |-
        Checks if any team member is holding a certain item and puts them into the array given.
        
        r0: [output] pointer to array of monsters (expected to have space for at least 4 pointers)
        r1: item ID
        return: number of team members with the item active
    - name: TeamMemberHasExclusiveItemEffectActive
      address:
        EU: 0x23102B4
        NA: 0x230F840
        JP: 0x2310D7C
      description: |-
        Checks if any team member is under the effects of a certain exclusive item effect.
        
        r0: exclusive item effect ID
        return: bool
    - name: TrySpawnEnemyItemDrop
      address:
        EU: 0x231044C
        NA: 0x230F9D8
        JP: 0x2310F14
      description: |-
        Determine what item a defeated enemy should drop, if any, then (probably?) spawn that item underneath them.
        
        This function is called at the time when an enemy is defeated from ApplyDamage.
        
        r0: attacker entity (who defeated the enemy)
        r1: defender entity (who was defeated)
    - name: TickNoSlipCap
      address:
        EU: 0x2310604
        NA: 0x230FB90
        JP: 0x23110CC
      description: |-
        Checks if the entity is a team member and holds the No-Slip Cap, and if so attempts to make one item in the bag sticky.
        
        r0: pointer to entity
    - name: TickStatusAndHealthRegen
      address:
        EU: 0x2311AE8
        NA: 0x2311088
        JP: 0x23125B0
      description: |-
        Applies the natural HP regen effect by taking modifiers into account (Poison Heal, Heal Ribbon, weather-related regen). Then it ticks down counters for volatile status effects, and heals them if the counter reached zero.
        
        r0: pointer to entity
    - name: InflictSleepStatusSingle
      address:
        EU: 0x2312284
        NA: 0x2311824
        JP: 0x2312D3C
      description: |-
        This is called by TryInflictSleepStatus.
        
        r0: entity pointer
        r1: number of turns
    - name: TryInflictSleepStatus
      address:
        EU: 0x2312338
        NA: 0x23118D8
        JP: 0x2312DF0
      description: |-
        Inflicts the Sleep status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: IsProtectedFromSleepClassStatus
      address:
        EU: 0x2312444
        NA: 0x23119E4
        JP: 0x2312EFC
      description: |-
        Checks if the monster is immune to sleep class status conditions.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: ignore safeguard
        r3: ignore other protections (exclusive items + leaf guard)
        stack[0]: flag to log a message on failure
        return: bool
    - name: TryInflictNightmareStatus
      address:
        EU: 0x23126AC
        NA: 0x2311C4C
        JP: 0x2313158
      description: |-
        Inflicts the Nightmare status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictNappingStatus
      address:
        EU: 0x23127C0
        NA: 0x2311D60
        JP: 0x2313268
      description: |-
        Inflicts the Napping status condition (from Rest) on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictYawningStatus
      address:
        EU: 0x23128D0
        NA: 0x2311E70
        JP: 0x2313374
      description: |-
        Inflicts the Yawning status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictSleeplessStatus
      address:
        EU: 0x23129E0
        NA: 0x2311F80
        JP: 0x2313484
      description: |-
        Inflicts the Sleepless status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictPausedStatus
      address:
        EU: 0x2312ACC
        NA: 0x231206C
        JP: 0x2313570
      description: |-
        Inflicts the Paused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: ?
        r3: number of turns
        stack[0]: flag to log a message on failure
        stack[1]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictInfatuatedStatus
      address:
        EU: 0x2312C0C
        NA: 0x23121AC
        JP: 0x23136B0
      description: |-
        Inflicts the Infatuated status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatus
      address:
        EU: 0x2312D98
        NA: 0x2312338
        JP: 0x2313838
      description: |-
        Inflicts the Burn status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to apply some special effect alongside the burn?
        r3: flag to log a message on failure
        stack[0]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatusWholeTeam
      address:
        EU: 0x2313078
        NA: 0x2312618
        JP: 0x2313B14
      description: |-
        Inflicts the Burn status condition on all team members if possible.
        
        No params.
    - name: TryInflictPoisonedStatus
      address:
        EU: 0x23130C4
        NA: 0x2312664
        JP: 0x2313B60
      description: |-
        Inflicts the Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBadlyPoisonedStatus
      address:
        EU: 0x231339C
        NA: 0x231293C
        JP: 0x2313E34
      description: |-
        Inflicts the Badly Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictFrozenStatus
      address:
        EU: 0x2313658
        NA: 0x2312BF8
        JP: 0x23140EC
      description: |-
        Inflicts the Frozen status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
    - name: TryInflictConstrictionStatus
      address:
        EU: 0x2313880
        NA: 0x2312E20
        JP: 0x2314310
      description: |-
        Inflicts the Constriction status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: animation ID
        r3: flag to log a message on failure
    - name: TryInflictShadowHoldStatus
      address:
        EU: 0x23139D8
        NA: 0x2312F78
        JP: 0x2314468
      description: |-
        Inflicts the Shadow Hold (AKA Immobilized) status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
    - name: TryInflictIngrainStatus
      address:
        EU: 0x2313B90
        NA: 0x2313130
        JP: 0x231461C
      description: |-
        Inflicts the Ingrain status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictWrappedStatus
      address:
        EU: 0x2313C54
        NA: 0x23131F4
        JP: 0x23146E0
      description: |-
        Inflicts the Wrapped status condition on a target monster if possible.
        
        This also gives the user the Wrap status (Wrapped around foe).
        
        r0: user entity pointer
        r1: target entity pointer
    - name: FreeOtherWrappedMonsters
      address:
        EU: 0x2313E50
        NA: 0x23133F0
        JP: 0x23148DC
      description: |-
        Frees from the wrap status all monsters which are wrapped by/around the monster passed as parameter.
        
        r0: pointer to entity
    - name: TryInflictPetrifiedStatus
      address:
        EU: 0x2313ECC
        NA: 0x231346C
        JP: 0x2314958
      description: |-
        Inflicts the Petrified status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: LowerOffensiveStat
      address:
        EU: 0x231405C
        NA: 0x23135FC
        JP: 0x2314AE8
      description: |-
        Lowers the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: flag to check for being protected from stat drops
        stack[1]: flag to log a message on failure for IsProtectedFromStatDrops
    - name: LowerDefensiveStat
      address:
        EU: 0x2314274
        NA: 0x2313814
        JP: 0x2314CFC
      description: |-
        Lowers the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: flag to check for being protected from stat drops
        stack[1]: flag to log a message on failure for IsProtectedFromStatDrops
    - name: BoostOffensiveStat
      address:
        EU: 0x23143FC
        NA: 0x231399C
        JP: 0x2314E84
      description: |-
        Boosts the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: BoostDefensiveStat
      address:
        EU: 0x2314568
        NA: 0x2313B08
        JP: 0x2314FF0
      description: |-
        Boosts the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: FlashFireShouldActivate
      address:
        EU: 0x23146D4
        NA: 0x2313C74
        JP: 0x231515C
      description: |-
        Checks whether Flash Fire should activate, assuming the defender is being hit by a Fire-type move.
        
        This checks that the defender is valid and Flash Fire is active, and that Normalize isn't active on the attacker.
        
        r0: attacker pointer
        r1: defender pointer
        return: 2 if Flash Fire should activate and raise the defender's boost level, 1 if Flash Fire should activate but the defender's boost level is maxed out, 0 otherwise.
    - name: ActivateFlashFire
      address:
        EU: 0x2314744
        NA: 0x2313CE4
        JP: 0x23151C8
      description: |-
        Actually applies the Flash Fire boost with a message log and animation. Passes the same monster for attacker and
        defender, but the attacker goes unused.
        
        r0: attacker pointer?
        r1: defender pointer
    - name: ApplyOffensiveStatMultiplier
      address:
        EU: 0x23147A0
        NA: 0x2313D40
        JP: 0x2315224
      description: |-
        Applies a multiplier to the specified offensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::offensive_multipliers, for moves like Charm and Memento.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: ApplyDefensiveStatMultiplier
      address:
        EU: 0x23149C4
        NA: 0x2313F64
        JP: 0x2315444
      description: |-
        Applies a multiplier to the specified defensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::defensive_multipliers, for moves like Screech.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: BoostHitChanceStat
      address:
        EU: 0x2314B44
        NA: 0x23140E4
        JP: 0x23155C4
      description: |-
        Boosts the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
    - name: LowerHitChanceStat
      address:
        EU: 0x2314C8C
        NA: 0x231422C
        JP: 0x231570C
      description: |-
        Lowers the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ? (Irdkwia's notes say this is the number of stages, but I'm pretty sure that's incorrect)
    - name: TryInflictCringeStatus
      address:
        EU: 0x2314E48
        NA: 0x23143E8
        JP: 0x23158C4
      description: |-
        Inflicts the Cringe status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictParalysisStatus
      address:
        EU: 0x2314FA4
        NA: 0x2314544
        JP: 0x2315A1C
      description: |-
        Inflicts the Paralysis status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: BoostSpeed
      address:
        EU: 0x2315270
        NA: 0x2314810
        JP: 0x2315CE4
      description: |-
        Boosts the speed of the target monster.
        
        If the number of turns specified is 0, a random turn count will be selected using the default SPEED_BOOST_TURN_RANGE.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: number of turns
        stack[0]: flag to log a message on failure
    - name: BoostSpeedOneStage
      address:
        EU: 0x231539C
        NA: 0x231493C
        JP: 0x2315E10
      description: |-
        A wrapper around BoostSpeed with the number of stages set to 1.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: LowerSpeed
      address:
        EU: 0x23153B4
        NA: 0x2314954
        JP: 0x2315E28
      description: |-
        Lowers the speed of the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: flag to log a message on failure
    - name: TrySealMove
      address:
        EU: 0x231551C
        NA: 0x2314ABC
        JP: 0x2315F90
      description: |-
        Seals one of the target monster's moves. The move to be sealed is randomly selected.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        return: Whether or not a move was sealed
    - name: BoostOrLowerSpeed
      address:
        EU: 0x231568C
        NA: 0x2314C2C
        JP: 0x2316100
      description: |-
        Randomly boosts or lowers the speed of the target monster by one stage with equal probability.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ResetHitChanceStat
      address:
        EU: 0x23156EC
        NA: 0x2314C8C
        JP: 0x2316160
      description: |-
        Resets the specified hit chance stat (accuracy or evasion) back to normal on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ?
    - name: ExclusiveItemEffectIsActiveWithLogging
      address:
        EU: 0x23157A0
        NA: 0x2314D40
        JP: 0x2316214
      description: |-
        Calls ExclusiveItemEffectIsActive, then logs the specified message if indicated.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: whether a message should be logged if the effect is active
        r3: message ID to be logged if the effect is active
        stack[0]: exclusive item effect ID
        return: bool, same as ExclusiveItemEffectIsActive
    - name: TryActivateQuickFeet
      address:
        EU: 0x231587C
        NA: 0x2314E1C
        JP: 0x23162F0
      description: |-
        Activate the Quick Feet ability on the defender, if the monster has it and it's active.
        
        r0: attacker pointer
        r1: defender pointer
        return: bool, whether or not the ability was activated
    - name: TryInflictTerrifiedStatus
      address:
        EU: 0x23158C0
        NA: 0x2314E60
        JP: 0x2316334
      description: |-
        Inflicts the Terrified status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictGrudgeStatus
      address:
        EU: 0x2315918
        NA: 0x2314EB8
        JP: 0x231638C
      description: |-
        Inflicts the Grudge status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message
        return: Whether or not the status could be inflicted
    - name: TryInflictConfusedStatus
      address:
        EU: 0x2315998
        NA: 0x2314F38
        JP: 0x2316410
      description: |-
        Inflicts the Confused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictCoweringStatus
      address:
        EU: 0x2315BCC
        NA: 0x231516C
        JP: 0x2316644
      description: |-
        Inflicts the Cowering status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryRestoreHp
      address:
        EU: 0x2315CCC
        NA: 0x231526C
        JP: 0x2316744
      description: |-
        Restore HP of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: HP to restore
        return: success flag
    - name: TryIncreaseHp
      address:
        EU: 0x2315D44
        NA: 0x23152E4
        JP: 0x23167BC
      description: |-
        Restore HP and possibly boost max HP of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: HP to restore
        r3: max HP boost
        stack[0]: flag to log a message on failure
        return: Success flag
    - name: RevealItems
      address:
        EU: 0x2316070
        NA: 0x2315610
        JP: 0x2316AE8
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: RevealStairs
      address:
        EU: 0x2316100
        NA: 0x23156A0
        JP: 0x2316B78
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: RevealEnemies
      address:
        EU: 0x23161BC
        NA: 0x231575C
        JP: 0x2316C34
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictLeechSeedStatus
      address:
        EU: 0x231624C
        NA: 0x23157EC
        JP: 0x2316CC4
      description: |-
        Inflicts the Leech Seed status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictDestinyBondStatus
      address:
        EU: 0x23164B0
        NA: 0x2315A50
        JP: 0x2316F28
      description: |-
        Inflicts the Destiny Bond status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictSureShotStatus
      address:
        EU: 0x23165D0
        NA: 0x2315B70
        JP: 0x2317048
      description: |-
        Inflicts the Sure Shot status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictWhifferStatus
      address:
        EU: 0x2316660
        NA: 0x2315C00
        JP: 0x23170D8
      description: |-
        Inflicts the Whiffer status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictSetDamageStatus
      address:
        EU: 0x2316748
        NA: 0x2315CE8
        JP: 0x23171C0
      description: |-
        Inflicts the Set Damage status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictFocusEnergyStatus
      address:
        EU: 0x23167E4
        NA: 0x2315D84
        JP: 0x231725C
      description: |-
        Inflicts the Focus Energy status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictDecoyStatus
      address:
        EU: 0x2316884
        NA: 0x2315E24
        JP: 0x23172FC
      description: |-
        Inflicts the Decoy status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be inflicted
    - name: TryInflictCurseStatus
      address:
        EU: 0x2316B3C
        NA: 0x23160DC
        JP: 0x23175B4
      description: |-
        Inflicts the Curse status condition on a target monster if possible and if the user is
        a ghost type. Otherwise, just boost the user's defense and attack then lower the user's
        speed.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictSnatchStatus
      address:
        EU: 0x2316CE0
        NA: 0x2316280
        JP: 0x2317758
      description: |-
        Inflicts the Snatch status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictTauntStatus
      address:
        EU: 0x2316E08
        NA: 0x23163A8
        JP: 0x2317880
      description: |-
        Inflicts the Taunt status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be inflicted
    - name: TryInflictStockpileStatus
      address:
        EU: 0x2316F38
        NA: 0x23164D8
        JP: 0x23179AC
      description: |-
        Inflicts the Stockpile condition on a target monster if possible. Won't boost the level
        of stockpiling above 3.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be inflicted or boosted
    - name: TryInflictInvisibleStatus
      address:
        EU: 0x2316FDC
        NA: 0x231657C
        JP: 0x2317A50
      description: |-
        Attempts to turn the target invisible.
        
        The user pointer is only used when calling LogMessage functions.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictPerishSongStatus
      address:
        EU: 0x231708C
        NA: 0x231662C
        JP: 0x2317B00
      description: |-
        Inflicts the Perish Song status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictEncoreStatus
      address:
        EU: 0x2317180
        NA: 0x2316720
        JP: 0x2317BF4
      description: |-
        Inflicts the Encore status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryDecreaseBelly
      address:
        EU: 0x2317338
        NA: 0x23168D8
        JP: 0x2317DA8
      description: |-
        Tries to reduce the belly size of the target. Only when max belly shrink is 0, the
        current belly is reduced by belly to lose. If both are non-zero, only the max belly
        shrink is applied.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: belly to lose
        r3: max belly shrink
    - name: TryIncreaseBelly
      address:
        EU: 0x2317610
        NA: 0x2316BB0
        JP: 0x2318080
      description: |-
        Restore belly and possibly boost max belly of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: belly to restore
        r3: max belly boost (if belly is full)
        stack[0]: flag to log a message
    - name: TryInflictMuzzledStatus
      address:
        EU: 0x2317B84
        NA: 0x2317124
        JP: 0x23185F4
      description: |-
        Inflicts the Muzzled status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryTransform
      address:
        EU: 0x2317C7C
        NA: 0x231721C
        JP: 0x23186EC
      description: |-
        Attempts to transform the target into the species of a random monster contained in the list returned by MonsterSpawnListPartialCopy.
        
        The user pointer is only used when calling LogMessage functions.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictMobileStatus
      address:
        EU: 0x2317E6C
        NA: 0x231740C
        JP: 0x23188DC
      description: |-
        Inflicts the Mobile status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictExposedStatus
      address:
        EU: 0x2317F28
        NA: 0x23174C8
        JP: 0x2318998
      description: |-
        Inflicts the Exposed status condition on a target monster if possible. Only applies to
        Ghost types and monsters with raised evasion. If the animation effect ID is 0,
        defaults to animation ID 0xE (this fallback animation likely can't be seen in normal
        play).
        
        r0: user entity pointer
        r1: target entity pointer
        r2: animation effect ID
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryActivateIdentifyCondition
      address:
        EU: 0x23180A8
        NA: 0x2317648
        JP: 0x2318B18
      description: |-
        Sets the flag for the identify orb which causes monsters holding items to be shown with
        a blue exclamation mark status icon.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictBlinkerStatus
      address:
        EU: 0x231812C
        NA: 0x23176CC
        JP: 0x2318B9C
      description: |-
        Inflicts the Blinker status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
        r3: flag to log a message on failure
        return: Whether or not the status could be inflicted
    - name: IsBlinded
      address:
        EU: 0x2318244
        NA: 0x23177E4
        JP: 0x2318CB4
      description: |-
        Returns true if the monster has the blinded status (see statuses::blinded), or if it is not the leader and is holding Y-Ray Specs.
        
        r0: pointer to entity
        r1: flag for whether to check for the held item
        return: bool
    - name: TryInflictCrossEyedStatus
      address:
        EU: 0x23182A4
        NA: 0x2317844
        JP: 0x2318D14
      description: |-
        Inflicts the Cross-Eyed status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictEyedropStatus
      address:
        EU: 0x23183BC
        NA: 0x231795C
        JP: 0x2318E2C
      description: |-
        Inflicts the Eyedrop status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictSlipStatus
      address:
        EU: 0x231846C
        NA: 0x2317A0C
        JP: 0x2318EDC
      description: |-
        Inflicts the Slip status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be inflicted
    - name: TryInflictDropeyeStatus
      address:
        EU: 0x2318554
        NA: 0x2317AF4
        JP: 0x2318FC4
      description: |-
        Inflicts the Dropeye status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        return: Whether or not the status could be inflicted
    - name: RestoreAllMovePP
      address:
        EU: 0x2318680
        NA: 0x2317C20
        JP: 0x23190F0
      description: |-
        Restores the PP of all the target's moves by the specified amount.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: PP to restore
        r3: flag to suppress message logging
    - name: RestoreOneMovePP
      address:
        EU: 0x23187B8
        NA: 0x2317D58
        JP: 0x2319228
      description: |-
        Restores the PP the target's move in the specified move slot by the specified amount.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: move index
        r3: PP to restore
        stack[0]: flag to log message
    - name: RestoreRandomMovePP
      address:
        EU: 0x23188E8
        NA: 0x2317E88
        JP: 0x2319358
      description: |-
        Restores the PP of a random one of the target's moves by the specified amount.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: PP to restore
        r3: flag to log message
    - name: ApplyProteinEffect
      address:
        EU: 0x23189B0
        NA: 0x2317F50
        JP: 0x2319420
      description: |-
        Tries to boost the target's attack stat.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: attack boost
    - name: ApplyCalciumEffect
      address:
        EU: 0x2318A44
        NA: 0x2317FE4
        JP: 0x23194B4
      description: |-
        Tries to boost the target's special attack stat.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: special attack boost
    - name: ApplyIronEffect
      address:
        EU: 0x2318AD8
        NA: 0x2318078
        JP: 0x2319548
      description: |-
        Tries to boost the target's defense stat.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: defense boost
    - name: ApplyZincEffect
      address:
        EU: 0x2318B6C
        NA: 0x231810C
        JP: 0x23195DC
      description: |-
        Tries to boost the target's special defense stat.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: special defense boost
    - name: TryInflictLongTossStatus
      address:
        EU: 0x2318C00
        NA: 0x23181A0
        JP: 0x2319670
      description: |-
        Inflicts the Long Toss status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictPierceStatus
      address:
        EU: 0x2318C70
        NA: 0x2318210
        JP: 0x23196E0
      description: |-
        Inflicts the Pierce status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictGastroAcidStatus
      address:
        EU: 0x2318CDC
        NA: 0x231827C
        JP: 0x231974C
      description: |-
        Inflicts the Gastro Acid status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log message
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: SetAquaRingHealingCountdownTo4
      address:
        EU: 0x2318E20
        NA: 0x23183C0
        JP: 0x2319890
      description: |-
        Sets the countdown for Aqua Ring healing countdown to a global value (0x4).
        
        r0: pointer to entity
    - name: ApplyAquaRingHealing
      address:
        EU: 0x2318E48
        NA: 0x23183E8
        JP: 0x23198B8
      description: |-
        Applies the passive healing gained from the Aqua Ring status.
        
        r0: pointer to entity
    - name: TryInflictAquaRingStatus
      address:
        EU: 0x2318EBC
        NA: 0x231845C
        JP: 0x231992C
      description: |-
        Inflicts the Aqua Ring status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictLuckyChantStatus
      address:
        EU: 0x2318F68
        NA: 0x2318508
        JP: 0x23199D8
      description: |-
        Inflicts the Lucky Chant status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictHealBlockStatus
      address:
        EU: 0x2319008
        NA: 0x23185A8
        JP: 0x2319A78
      description: |-
        Inflicts the Heal Block status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log message
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: MonsterHasEmbargoStatus
      address:
        EU: 0x231912C
        NA: 0x23186CC
        JP: 0x2319B9C
      description: |-
        Returns true if the monster has the Embargo status condition.
        
        r0: pointer to entity
        return: bool
    - name: LogItemBlockedByEmbargo
      address:
        EU: 0x2319160
        NA: 0x2318700
        JP: 0x2319BD0
      description: |-
        Logs the error message when the usage of an item is blocked by Embargo.
        
        r0: pointer to entity
    - name: TryInflictEmbargoStatus
      address:
        EU: 0x231918C
        NA: 0x231872C
        JP: 0x2319BFC
      description: |-
        Inflicts the Embargo status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log message
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictMiracleEyeStatus
      address:
        EU: 0x23192B0
        NA: 0x2318850
        JP: 0x2319D20
      description: |-
        Inflicts the Miracle Eye status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to only perform the check for inflicting without actually inflicting
    - name: TryInflictMagnetRiseStatus
      address:
        EU: 0x23193E4
        NA: 0x2318984
        JP: 0x2319E54
      description: |-
        Inflicts the Magnet Rise status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: IsFloating
      address:
        EU: 0x23194AC
        NA: 0x2318A4C
        JP: 0x2319F1C
      description: |-
        Checks if a monster is currently floating for reasons other than its typing or ability.
        
        In particular, this checks for Gravity and Magnet Rise.
        
        r0: entity pointer
        return: bool
    - name: TryInflictSafeguardStatus
      address:
        EU: 0x23198D0
        NA: 0x2318E70
        JP: 0x231A340
      description: |-
        Inflicts the Safeguard status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictMistStatus
      address:
        EU: 0x2319970
        NA: 0x2318F10
        JP: 0x231A3E0
      description: |-
        Inflicts the Mist status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictWishStatus
      address:
        EU: 0x2319A0C
        NA: 0x2318FAC
        JP: 0x231A47C
      description: |-
        Inflicts the Wish status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictMagicCoatStatus
      address:
        EU: 0x2319AAC
        NA: 0x231904C
        JP: 0x231A51C
      description: |-
        Inflicts the Magic Coat status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictLightScreenStatus
      address:
        EU: 0x2319B4C
        NA: 0x23190EC
        JP: 0x231A5BC
      description: |-
        Inflicts the Light Screen status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictReflectStatus
      address:
        EU: 0x2319BEC
        NA: 0x231918C
        JP: 0x231A65C
      description: |-
        Inflicts the Reflect status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictProtectStatus
      address:
        EU: 0x2319C8C
        NA: 0x231922C
        JP: 0x231A6FC
      description: |-
        Inflicts the Protect status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictMirrorCoatStatus
      address:
        EU: 0x2319D3C
        NA: 0x23192DC
        JP: 0x231A7AC
      description: |-
        Inflicts the Mirror Coat status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictEndureStatus
      address:
        EU: 0x2319DD8
        NA: 0x2319378
        JP: 0x231A848
      description: |-
        Inflicts the Endure status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictMirrorMoveStatus
      address:
        EU: 0x2319E78
        NA: 0x2319418
        JP: 0x231A8E8
      description: |-
        Inflicts the Mirror Move status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictConversion2Status
      address:
        EU: 0x2319F18
        NA: 0x23194B8
        JP: 0x231A988
      description: |-
        Inflicts the Conversion2 status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictVitalThrowStatus
      address:
        EU: 0x2319FE4
        NA: 0x2319584
        JP: 0x231AA54
      description: |-
        Inflicts the Vital Throw status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryResetStatChanges
      address:
        EU: 0x231A084
        NA: 0x2319624
        JP: 0x231AAF4
      description: |-
        Tries to reset the stat changes of the defender.
        
        r0: attacker entity pointer
        r1: defender entity pointer
        r3: bool to force animation
    - name: MirrorMoveIsActive
      address:
        EU: 0x231A1A8
        NA: 0x2319748
        JP: 0x231AC18
      description: |-
        Checks if the monster is under the effect of Mirror Move.
        
        Returns 1 if the effects is a status, 2 if it comes from an exclusive item, 0 otherwise.
        
        r0: pointer to entity
        return: int
    - name: MistIsActive
      address:
        EU: 0x231A22C
        NA: 0x23197CC
        JP: 0x231AC9C
      description: |-
        Checks if the monster is under the effect of Mist.
        
        Returns 1 if the effects is a status, 2 if it comes from an exclusive item, 0 otherwise.
        
        r0: pointer to entity
        return: int
    - name: Conversion2IsActive
      address:
        EU: 0x231A274
        NA: 0x2319814
        JP: 0x231ACE4
      description: |-
        Checks if the monster is under the effect of Conversion 2 (its type was changed).
        
        Returns 1 if the effects is a status, 2 if it comes from an exclusive item, 0 otherwise.
        
        r0: pointer to entity
        return: int
    - name: AiConsiderMove
      address:
        EU: 0x231A2E0
        NA: 0x2319880
        JP: 0x231AD50
      description: |-
        The AI uses this function to check if a move has any potential targets, to calculate the list of potential targets and to calculate the move's special weight.
        This weight will be higher if the pokémon has weak-type picker and the target is weak to the move (allies only, enemies always get a result of 1 even if the move is super effective). More things could affect the result.
        This function also sets the flag can_be_used on the ai_possible_move struct if it makes sense to use it.
        More research is needed. There's more documentation about this special weight. Does all the documented behavior happen in this function?
        
        r0: ai_possible_move struct for this move
        r1: Entity pointer
        r2: Move pointer
        return: Move's calculated special weight
    - name: TryAddTargetToAiTargetList
      address:
        EU: 0x231AA10
        NA: 0x2319FB0
        JP: 0x231B480
      description: |-
        Checks if the specified target is eligible to be targeted by the AI and if so adds it to the list of targets. This function also fills an array that seems to contain the directions in which the user should turn to look at each of the targets in the list, as well as a third unknown array.
        
        r0: Number of existing targets in the list
        r1: Move's AI range field
        r2: User entity pointer
        r3: Target entity pointer
        stack[0]: Move pointer
        stack[1]: check_all_conditions parameter to pass to IsAiTargetEligible
        return: New number of targets in the target list
    - name: IsAiTargetEligible
      address:
        EU: 0x231AB04
        NA: 0x231A0A4
        JP: 0x231B574
      description: |-
        Checks if a given target is eligible to be targeted by the AI with a certain move
        
        r0: Move's AI range field
        r1: User entity pointer
        r2: Target entity pointer
        r3: Move pointer
        stack[0]: True to check all the possible move_ai_condition values, false to only check for move_ai_condition::AI_CONDITION_RANDOM (if the move has a different ai condition, the result will be false).
        return: True if the target is eligible, false otherwise
    - name: IsTargetInRange
      address:
        EU: 0x231B0F4
        NA: 0x231A694
        JP: 0x231BB64
      description: |-
        Returns true if the target is within range of the user's move, false otherwise.
        
        If the user does not have Course Checker, it simply checks if the distance between user and target is less or equal than the move range.
        Otherwise, it will iterate through all tiles in the direction specified, checking for walls or other monsters in the way, and return false if they are found.
        
        r0: user pointer
        r1: target pointer
        r2: direction ID
        r3: move range (in number of tiles)
    - name: ShouldUsePp
      address:
        EU: 0x231B200
        NA: 0x231A7A0
        JP: 0x231BC70
      description: |-
        Checks if a monster should use PP when using a move. It also displays the corresponding animation if PP Saver triggers and prints the required messages to the message log.
        
        r0: entity pointer
        return: True if the monster should not use PP, false if it should.
    - name: GetEntityMoveTargetAndRange
      address:
        EU: 0x231B70C
        NA: 0x231ACAC
        JP: 0x231C17C
      description: |-
        Gets the move target-and-range field when used by a given entity. See struct move_target_and_range in the C headers.
        
        r0: entity pointer
        r1: move pointer
        r2: AI flag (same as GetMoveTargetAndRange)
        return: move target and range
    - name: GetEntityNaturalGiftInfo
      address:
        EU: 0x231B8F0
        NA: 0x231AE90
        JP: 0x231C360
      description: |-
        Gets the relevant entry in NATURAL_GIFT_ITEM_TABLE based on the entity's held item, if possible.
        
        r0: entity pointer
        return: pointer to a struct natural_gift_item_info, or null if none was found
    - name: GetEntityWeatherBallType
      address:
        EU: 0x231B96C
        NA: 0x231AF0C
        JP: 0x231C3DC
      description: |-
        Gets the current Weather Ball type for the given entity, based on the apparent weather.
        
        r0: entity pointer
        return: type ID
    - name: ActivateMotorDrive
      address:
        EU: 0x231BAC0
        NA: 0x231B060
      description: |-
        Displays the message and applies the speed boost for the ability Motor Drive.
        
        r0: monster pointer
    - name: TryActivateFrisk
      address:
        EU: 0x231BB04
        NA: 0x231B0A4
        JP: 0x231C570
      description: |-
        Tries to activate the Frisk ability on the defender. The attacker has to be on the team and the defender has to be
        holding an item or be able to drop a treasure box.
        
        r0: attacker pointer
        r1: defender pointer
    - name: TryActivateBadDreams
      address:
        EU: 0x231BC18
        NA: 0x231B1B8
        JP: 0x231C684
      description: |-
        Tries to apply the damage from Bad Dreams to all sleeping monsters in the room.
        
        r0: monster pointer
    - name: ActivateStench
      address:
        EU: 0x231BD9C
        NA: 0x231B33C
        JP: 0x231C808
      description: |-
        Activate the Stench ability on the monster.
        
        r0: monster pointer
    - name: TryActivateSteadfast
      address:
        EU: 0x231BDC4
        NA: 0x231B364
        JP: 0x231C830
      description: |-
        Activate the Steadfast ability on the defender, if the monster has it and it's active.
        
        r0: attacker pointer
        r1: defender pointer
    - name: IsInSpawnList
      address:
        EU: 0x231BE5C
        NA: 0x231B3FC
        JP: 0x231C8C8
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: spawn_list_ptr
        r1: monster ID
        return: bool
    - name: ChangeShayminForme
      address:
        EU: 0x231BF4C
        NA: 0x231B4EC
        JP: 0x231C9B8
      description: |-
        forme:
          1: change from Land to Sky
          2: change from Sky to Land
        result:
          0: not Shaymin
          1: not correct Forme
          2: frozen
          3: ok
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: Target
        r1: forme
        return: result
    - name: ApplyItemEffect
      address:
        EU: 0x231C0EC
        NA: 0x231B68C
        JP: 0x231CB58
      description: |-
        Seems to apply an item's effect via a giant switch statement?
        
        r3: attacker pointer
        stack[0]: defender pointer
        stack[1]: thrown item pointer
        others: ?
    - name: ApplyCheriBerryEffect
      address:
        EU: 0x231D654
        NA: 0x231CBEC
        JP: 0x231E0B8
      description: |-
        Tries to heal the paralysis status condition. Prints a message on failure.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyPechaBerryEffect
      address:
        EU: 0x231D680
        NA: 0x231CC18
        JP: 0x231E0E4
      description: |-
        Tries to heal the poisoned and badly poisoned status condition. Prints a message on
        failure.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyRawstBerryEffect
      address:
        EU: 0x231D6B4
        NA: 0x231CC4C
        JP: 0x231E118
      description: |-
        Tries to heal the burn status condition. Prints a message on failure.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyHungerSeedEffect
      address:
        EU: 0x231D6FC
        NA: 0x231CC94
        JP: 0x231E160
      description: |-
        Empties the targets belly to cause Hungry Pal status in non-leader monsters and
        Famished in the leader monster.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyVileSeedEffect
      address:
        EU: 0x231D7E8
        NA: 0x231CD80
        JP: 0x231E24C
      description: |-
        Reduces the targets defense and special defense stages to the lowest level.
        
        r0: attacker pointer
        r1: defender pointer
    - name: ApplyViolentSeedEffect
      address:
        EU: 0x231D884
        NA: 0x231CE1C
      description: |-
        Boosts the target's offensive stats stages to the max.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyGinsengEffect
      address:
        EU: 0x231D8D0
        NA: 0x231CE68
        JP: 0x231E32C
      description: |-
        Boosts the power of the move at the top of the target's Move List. Appears to have a
        leftover check to boost the power of a move by 3 instead of 1 that always fails because
        the chance is 0.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyBlastSeedEffect
      address:
        EU: 0x231D9EC
        NA: 0x231CF84
        JP: 0x231E44C
      description: |-
        If thrown, unfreeze and deal fixed damage to the defender. If not thrown, try to find 
        a monster in front of the attacker. If a monster is found unfreeze and dedal fixed 
        damage to the defender. Appears to have a leftover check for if the current fixed room is a boss fight and loads a different pointer for the damage when used in a boss room.
        However, this isn't noticeable because both the normal and boss damage is the same.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: bool thrown
    - name: ApplyGummiBoostsDungeonMode
      address:
        EU: 0x231DB28
        NA: 0x231D0C0
        JP: 0x231E588
      description: |-
        Applies the IQ and possible stat boosts from eating a Gummi to the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: Gummi type ID
        r3: Stat boost amount, if a random stat boost occurs
    - name: CanMonsterUseItem
      address:
        EU: 0x231DF0C
        NA: 0x231D4A4
        JP: 0x231E96C
      description: |-
        Checks whether a monster can use a certain item.
        
        Returns false if the item is sticky, or if the monster is under the STATUS_MUZZLED status and the item is edible.
        Also prints failure messages if required.
        
        r0: Monster entity pointer
        r1: Item pointer
        return: True if the monster can use the item, false otherwise
    - name: ApplyGrimyFoodEffect
      address:
        EU: 0x231DF9C
        NA: 0x231D534
        JP: 0x231E9FC
      description: |-
        Randomly inflicts poison, shadow hold, burn, paralysis, or an offensive stat debuff
        to the target. If the survivalist iq skill or gluttony ability is active, the target
        has a 50% chance not to be affected.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyMixElixirEffect
      address:
        EU: 0x231E0E8
        NA: 0x231D680
        JP: 0x231EB48
      description: |-
        If the target monster is a Linoone, restores all the PP of all the target's moves.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyDoughSeedEffect
      address:
        EU: 0x231E148
        NA: 0x231D6E0
        JP: 0x231EBA8
      description: |-
        If the target monster is a team member, set dough_seed_extra_poke_flag to true to 
        make extra poke spawn on the next floor. Otherwise, do nothing.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyViaSeedEffect
      address:
        EU: 0x231E1B4
        NA: 0x231D74C
        JP: 0x231EC14
      description: |-
        Tries to randomly teleport the target with a message for eating the seed.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyGravelyrockEffect
      address:
        EU: 0x231E228
        NA: 0x231D7C0
        JP: 0x231EC88
      description: |-
        Restores 10 hunger to the target and will raise the target's IQ if they are a bonsly
        or sudowoodo.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyGonePebbleEffect
      address:
        EU: 0x231E2A0
        NA: 0x231D838
        JP: 0x231ED00
      description: |-
        Causes a few visual effects, temporarily changes the dungeon music to the Goodnight
        track, and gives the target the enduring status.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ApplyGracideaEffect
      address:
        EU: 0x231E428
        NA: 0x231D9C0
        JP: 0x231EE7C
      description: |-
        If the target is Shaymin, attempt to change the target's form to Shaymin Sky Forme. Otherwise, do nothing.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ShouldTryEatItem
      address:
        EU: 0x231F3F8
        NA: 0x231E990
        JP: 0x231FE3C
      description: |-
        Checks if a given item should be eaten by the TryEatItem effect.
        
        Returns false if the ID is lower than 0x45, greater than 0x8A or if it's listed in the EAT_ITEM_EFFECT_IGNORE_LIST array.
        
        r0: Item ID
        return: True if the item should be eaten by TryEatItem.
    - name: GetMaxPpWrapper
      address:
        EU: 0x231F458
        NA: 0x231E9F0
        JP: 0x231FE9C
      description: |-
        Gets the maximum PP for a given move. A wrapper around the function in the ARM 9 binary.
        
        r0: move pointer
        return: max PP for the given move, capped at 99
    - name: MoveIsNotPhysical
      address:
        EU: 0x231F480
        NA: 0x231EA18
        JP: 0x231FEC4
      description: |-
        Checks if a move isn't a physical move.
        
        r0: move ID
        return: bool
    - name: CategoryIsNotPhysical
      address:
        EU: 0x231F498
        NA: 0x231EA30
        JP: 0x231FEDC
      description: |-
        Checks that a move category is not CATEGORY_PHYSICAL.
        
        r0: move category ID
        return: bool
    - name: TryDrought
      address:
        EU: 0x231FFFC
        NA: 0x231F594
        JP: 0x2320A40
      description: |-
        Attempts to drain all water from the current floor.
        
        Fails if orbs are disabled on the floor or if the current tileset has the is_water_tileset flag set.
        
        r0: user pointer
    - name: TryPounce
      address:
        EU: 0x2320688
        NA: 0x231FC20
        JP: 0x23210CC
      description: |-
        Makes the target monster execute the Pounce action in a given direction if possible.
        
        If the direction ID is 8, the target will pounce in the direction it's currently facing.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryBlowAway
      address:
        EU: 0x2320848
        NA: 0x231FDE0
        JP: 0x232128C
      description: |-
        Blows away the target monster in a given direction if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryExplosion
      address:
        EU: 0x2320EB0
        NA: 0x2320448
      description: |-
        Creates an explosion if possible.
        
        The target monster is considered the source of the explosion.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: coordinates where the explosion should take place (center)
        r3: explosion radius (only works correctly with 1 and 2)
        stack[0]: damage type
        stack[1]: damage source
    - name: TryAftermathExplosion
      address:
        EU: 0x23211F0
        NA: 0x2320788
      description: |-
        Creates the explosion for the ability aftermath if possible.
        
        The target monster is considered the source of the explosion.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: coordinates where the explosion should take place (center)
        r3: explosion radius (only works correctly with 1 and 2)
        stack[0]: damage type
        stack[1]: damage source (normally DAMAGE_SOURCE_EXPLOSION)
    - name: TryWarp
      address:
        EU: 0x2321770
        NA: 0x2320D08
        JP: 0x23221B4
      description: |-
        Makes the target monster warp if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: warp type
        r3: position (if warp type is position-based)
    - name: EnsureCanStandCurrentTile
      address:
        EU: 0x2321B6C
        NA: 0x2321104
        JP: 0x23225B0
      description: |-
        Checks that the given monster is standing on a tile it can stand on given its movement type, and warps it to a random location if it's not.
        
        r0: Entity pointer
    - name: TryActivateNondamagingDefenderAbility
      address:
        EU: 0x23224E0
        NA: 0x2321A78
        JP: 0x2322F24
      description: |-
        Applies the effects of a defender's ability on an attacker. After a move is used,
        this function is called to see if any of the bitflags for an ability were set and
        applies the corresponding effect. (The way leech seed removes certain statuses is
        also handled here.)
        
        r0: entity pointer
    - name: TryActivateNondamagingDefenderExclusiveItem
      address:
        EU: 0x2322758
        NA: 0x2321CF0
        JP: 0x232319C
      description: |-
        Applies the effects of a defender's item on an attacker. After a move is used,
        this function is called to see if any of the bitflags for an item were set and
        applies the corresponding effect.
        
        r0: attacker entity pointer
        r1: defender entity pointer
    - name: GetMoveRangeDistance
      address:
        EU: 0x2322D0C
        NA: 0x23222A4
        JP: 0x2323750
      description: |-
        Returns the maximum reach distance of a move, based on its AI range value.
        
        If the move doesn't have an AI range value of RANGE_FRONT_10, RANGE_FRONT_WITH_CORNER_CUTTING or RANGE_FRONT_2_WITH_CORNER_CUTTING, returns 0.
        If r2 is true, the move is a two-turn move and the user isn't charging said move, returns 0.
        
        r0: User entity pointer
        r1: Move pointer
        r2: True to perform the two-turn move check
        return: Maximum reach distance of the move, in tiles.
    - name: MoveHitCheck
      address:
        EU: 0x23246B0
        NA: 0x2323C48
        JP: 0x23250E8
      description: |-
        Determines if a move used hits or misses the target. It gets called twice per target, once with r3 = false and a second time with r3 = true.
        
        r0: Attacker
        r1: Defender
        r2: Pointer to move data
        r3: False if the move's first accuracy (accuracy1) should be used, true if its second accuracy (accuracy2) should be used instead.
        stack[0]: If true, always hit if the attacker and defender are the same. Otherwise, moves can miss no matter what the attacker and defender are.
        returns: True if the move hits, false if it misses.
    - name: IsHyperBeamVariant
      address:
        EU: 0x2324F9C
        NA: 0x2324534
        JP: 0x23259C4
      description: |-
        Checks if a move is a Hyper Beam variant that requires a a turn to recharge.
        
        Include moves: Frenzy Plant, Hydro Cannon, Hyper Beam, Blast Burn, Rock Wrecker, Giga Impact, Roar of Time
        
        r0: move
        return: bool
    - name: IsChargingTwoTurnMove
      address:
        EU: 0x232500C
        NA: 0x23245A4
        JP: 0x2325A34
      description: |-
        Checks if a monster is currently charging the specified two-turn move.
        
        r0: User entity pointer
        r1: Move pointer
        return: True if the user is charging the specified two-turn move, false otherwise.
    - name: HasMaxGinsengBoost99
      address:
        EU: 0x2325200
        NA: 0x2324798
        JP: 0x2325C28
      description: |-
        Checks if a move has a max Ginseng boost value of 99
        
        r0: Move
        return: True if the move's max Ginseng boost is 99, false otherwise.
    - name: TwoTurnMoveForcedMiss
      address:
        EU: 0x23252BC
        NA: 0x2324854
      description: |-
        Checks if a move should miss a monster due to the monster being in the middle of Fly, Bounce, Dive, Dig, Shadow Force, or some other two-turn move that grants pseudo-invincibility.
        
        r0: entity pointer
        r1: move
        return: true if the move should miss
    - name: DungeonRandOutcomeUserTargetInteraction
      address:
        EU: 0x232539C
        NA: 0x2324934
        JP: 0x2325DC4
      description: |-
        Like DungeonRandOutcome, but specifically for user-target interactions.
        
        This modifies the underlying random process depending on factors like Serene Grace, and whether or not either entity has fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: base success percentage (100*p). 0 is treated specially and guarantees success.
        returns: True if the random check passed, false otherwise.
    - name: DungeonRandOutcomeUserAction
      address:
        EU: 0x2325488
        NA: 0x2324A20
        JP: 0x2325EAC
      description: |-
        Like DungeonRandOutcome, but specifically for user actions.
        
        This modifies the underlying random process to factor in Serene Grace (and checks whether the user is a valid entity).
        
        r0: entity pointer
        r1: base success percentage (100*p). 0 is treated specially and guarantees success.
        returns: True if the random check passed, false otherwise.
    - name: CanAiUseMove
      address:
        EU: 0x23254DC
        NA: 0x2324A74
        JP: 0x2325F00
      description: |-
        Checks if an AI-controlled monster can use a move.
        Will return false if the any of the flags move::f_exists, move::f_subsequent_in_link_chain or move::f_disabled is true. The function does not check if the flag move::f_enabled_for_ai is set. This function also returns true if the call to CanMonsterUseMove is true.
        The function contains a loop that is supposed to check other moves after the specified one, but the loop breaks after it finds a move that isn't linked, which is always true given the checks in place at the start of the function.
        
        r0: Entity pointer
        r1: Move index
        r2: extra_checks parameter when calling CanMonsterUseMove
        return: True if the AI can use the move (not accounting for move::f_enabled_for_ai)
    - name: CanMonsterUseMove
      address:
        EU: 0x232558C
        NA: 0x2324B24
        JP: 0x2325FB0
      description: |-
        Checks if a monster can use the given move.
        Will always return true for the regular attack. Will return false if the move if the flag move::f_disabled is true, if the flag move::f_sealed is true. More things will be checked if the extra_checks parameter is true.
        
        r0: Entity pointer
        r1: Move pointer
        r2: True to check whether the move is out of PP, whether it can be used under the taunted status and whether the encore status prevents using the move
        return: True if the monster can use the move, false otherwise.
    - name: UpdateMovePp
      address:
        EU: 0x23257F4
        NA: 0x2324D8C
        JP: 0x2326218
      description: |-
        Updates the PP of any moves that were used by a monster, if PP should be consumed.
        
        r0: entity pointer
        r1: flag for whether or not PP should be consumed
    - name: GetDamageSourceWrapper
      address:
        EU: 0x23258AC
        NA: 0x2324E44
        JP: 0x23262D0
      description: |-
        Wraps GetDamageSource (in arm9) for a move info struct rather than a move ID.
        
        r0: move info pointer
        r1: item ID
        return: damage source
    - name: LowerSshort
      address:
        EU: 0x23258CC
        NA: 0x2324E64
        JP: 0x23262F0
      description: |-
        Gets the lower 2 bytes of a 4-byte number and interprets it as a signed short.
        
        r0: 4-byte number x
        return: (short) x
    - name: PlayMoveAnimation
      address:
        EU: 0x232611C
        NA: 0x23256B4
        JP: 0x2326B40
      description: |-
        Handles the process of getting and playing all the animations for a move. Waits
        until the animation has no more frames before returning.
        
        r0: Pointer to the entity that used the move
        r1: Pointer to the entity that is the target
        r2: Move pointer
        r3: position
    - name: GetMoveAnimationId
      address:
        EU: 0x2326578
        NA: 0x2325B10
        JP: 0x2326F9C
      description: |-
        Returns the move animation ID that should be played for a move.
        It contains a check for weather ball. After that, if the parameter should_play_alternative_animation is false, the move ID is returned. If it's true, there's a bunch of manual ID checks that result on a certain hardcoded return value.
        
        r0: Move ID
        r1: Apparent weather for the monster who used the move
        r2: Result of ShouldMovePlayADifferentAnimation
        return: Move animation ID
    - name: ShouldMovePlayAlternativeAnimation
      address:
        EU: 0x23266E0
        NA: 0x2325C78
        JP: 0x2327104
      description: |-
        Checks whether a moved used by a monster should play its alternative animation. Includes checks for Curse, Snore, Sleep Talk, Solar Beam and 2-turn moves.
        
        r0: Pointer to the entity that used the move
        r1: Move pointer
        return: True if the move should play its alternative animation
    - name: ExecuteMoveEffect
      address:
        EU: 0x232F2A4
        NA: 0x232E864
        JP: 0x232FC60
      description: |-
        Handles the effects that happen after a move is used. Includes a loop that is run for each target, mutiple ability checks and the giant switch statement that executes the effect of the move used given its ID.
        
        r0: pointer to some struct
        r1: attacker pointer
        r2: pointer to move data
        r3: ?
        stack[0]: ?
    - name: DoMoveDamageInlined
      address:
        EU: 0x23334B0
        NA: 0x2332A70
        JP: 0x2333E60
      description: |-
        Exactly the same as DoMoveDamage, except it appears DealDamage was inlined.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DealDamage
      address:
        EU: 0x2333560
        NA: 0x2332B20
        JP: 0x2333F10
      description: |-
        Deals damage from a move or item used by an attacking monster on a defending monster.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[0]: item ID
        return: amount of damage dealt
    - name: DealDamageWithTypeAndPowerBoost
      address:
        EU: 0x23335F8
        NA: 0x2332BB8
        JP: 0x2333FA8
      description: |-
        Same as DealDamage, except with an explicit move type and a base power boost.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[0]: item ID
        stack[1]: move type
        stack[2]: base power boost
        return: amount of damage dealt
    - name: DealDamageProjectile
      address:
        EU: 0x233368C
        NA: 0x2332C4C
        JP: 0x233403C
      description: |-
        Deals damage from a variable-damage projectile.
        
        r0: entity pointer 1?
        r1: entity pointer 2?
        r2: move pointer
        r3: move power
        stack[0]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[1]: item ID of the projectile
        return: Calculated damage
    - name: DealDamageWithType
      address:
        EU: 0x233371C
        NA: 0x2332CDC
        JP: 0x23340CC
      description: |-
        Same as DealDamage, except with an explicit move type.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move type
        r3: move
        stack[0]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[1]: item ID
        return: amount of damage dealt
    - name: PerformDamageSequence
      address:
        EU: 0x23337AC
        NA: 0x2332D6C
        JP: 0x233415C
      description: |-
        Performs the "damage sequence" given the results of the damage calculation. This includes running the accuracy roll with MoveHitCheck, calling ApplyDamageAndEffects, and some other miscellaneous bits of state bookkeeping (including handling the effects of Illuminate).
        
        This is the last function called by DealDamage. The result of this call is the return value of DealDamage and its relatives.
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Move pointer
        r3: [output] struct containing info about the damage calculation
        stack[0]: Damage source
        return: Calculated damage
    - name: StatusCheckerCheck
      address:
        EU: 0x2333AB4
        NA: 0x2333074
        JP: 0x2334460
      description: |-
        Determines if using a given move against its intended targets would be redundant because all of them already have the effect caused by said move.
        
        r0: Pointer to the entity that is considering using the move
        r1: Move pointer
        return: True if it makes sense to use the move, false if it would be redundant given the effects it causes and the effects that all the targets already have.
    - name: GetApparentWeather
      address:
        EU: 0x2335748
        NA: 0x2334D08
        JP: 0x23360F4
      description: |-
        Get the weather, as experienced by a specific entity.
        
        r0: entity pointer
        return: weather ID
    - name: TryWeatherFormChange
      address:
        EU: 0x2335BB0
        NA: 0x2335170
        JP: 0x233655C
      description: |-
        Tries to change a monster into one of its weather-related alternative forms. Applies to Castform and Cherrim, and checks for their unique abilities.
        
        r0: pointer to entity
    - name: ActivateSportCondition
      address:
        EU: 0x2335E8C
        NA: 0x233544C
        JP: 0x2336838
      description: |-
        Activates the Mud Sport or Water Sport condition on the dungeon floor for some number of turns.
        
        r0: water sport flag (false for Mud Sport, true for Water Sport)
    - name: TryActivateWeather
      address:
        EU: 0x2335F04
        NA: 0x23354C4
        JP: 0x23368B0
      description: |-
        Tries to change the weather based upon the information for each weather type in the
        dungeon struct. Returns whether the weather was succesfully changed or not.
        
        r0: bool to log message and play animation?
        r1: bool to force weather change and animation?
        return: True if the weather changed
    - name: DigitCount
      address:
        EU: 0x23360B0
        NA: 0x2335670
        JP: 0x2336A5C
      description: |-
        Counts the number of digits in a nonnegative integer.
        
        If the number is negative, it is cast to a uint16_t before counting digits.
        
        r0: int
        return: number of digits in int
    - name: LoadTextureUi
      address:
        EU: 0x2336100
        NA: 0x23356C0
        JP: 0x2336AAC
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: DisplayNumberTextureUi
      address:
        EU: 0x23362CC
        NA: 0x2335880
        JP: 0x2336C50
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: x position
        r1: y position
        r2: number
        r3: ally_mode
        return: xsize
    - name: DisplayCharTextureUi
      address:
        EU: 0x23363D4
        NA: 0x2335988
        JP: 0x2336D58
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: render_3d_element
        r1: x position
        r2: y position
        r3: char_id
        stack[0]: ?
        return: ?
    - name: DisplayUi
      address:
        EU: 0x233645C
        NA: 0x2335A10
        JP: 0x2336DE0
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: GetTile
      address:
        EU: 0x2336CCC
        NA: 0x23360FC
        JP: 0x23374CC
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: GetTileSafe
      address:
        EU: 0x2336D34
        NA: 0x2336164
        JP: 0x2337534
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a pointer to a copy of the default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: IsFullFloorFixedRoom
      address:
        EU: 0x2336DA4
        NA: 0x23361D4
        JP: 0x23375A4
      description: |-
        Checks if the current fixed room on the dungeon generation info corresponds to a fixed, full-floor layout.
        
        The first non-full-floor fixed room is 0xA5, which is for Sealed Chambers.
        
        return: bool
    - name: IsCurrentTilesetBackground
      address:
        EU: 0x2336DD4
        NA: 0x2336204
      description: |-
        Calls IsBackgroundTileset with the current tileset ID
        
        return: True if the current dungeon tileset is a background, false if it's a regular tileset.
    - name: TrySpawnGoldenChamber
      address:
        EU: 0x2336DF4
        NA: 0x2336224
        JP: 0x23375F4
      description: |-
        Changes the tileset and fixed room id of the floor for the Golden Chamber if the floor should be a
        Golden Chamber.
        
        No params.
    - name: CountItemsOnFloorForAcuteSniffer
      address:
        EU: 0x2336E30
        NA: 0x2336260
        JP: 0x2337630
      description: |-
        Counts the number of items on the floor by checking every tile for an item and stores it into
        dungeon::item_sniffer_item_count
        
        No params.
    - name: GetStairsSpawnPosition
      address:
        EU: 0x2336F90
        NA: 0x23363C0
      description: |-
        Gets the spawn position for the stairs and stores it at the passed pointers.
        
        r0: [output] pointer to x coordinate
        r1: [output] pointer to y coordinate
    - name: PositionIsOnStairs
      address:
        EU: 0x2336FBC
        NA: 0x23363EC
        JP: 0x23377BC
      description: |-
        Checks if this location is on top of the staircase. In the game it is only used to check if an outlaw has reached
        the staircase.
        
        r0: x coordinate
        r1: y coordinate
        return: bool
    - name: GetStairsRoom
      address:
        EU: 0x2336FF8
        NA: 0x2336428
        JP: 0x23377F8
      description: |-
        Returns the index of the room that contains the stairs
        
        return: Room index
    - name: GetDefaultTileTextureId
      address:
        NA: 0x2336450
      description: |-
        Returns the texture_id of the default tile?
        
        return: texture_id
    - name: DetermineAllTilesWalkableNeighbors
      address:
        EU: 0x233761C
        NA: 0x2336A4C
        JP: 0x2337E14
      description: |-
        Evaluates the walkable_neighbor_flags for all tiles.
        
        No params.
    - name: DetermineTileWalkableNeighbors
      address:
        EU: 0x2337654
        NA: 0x2336A84
        JP: 0x2337E4C
      description: |-
        Evaluates the walkable_neighbor_flags for the this tile by checking the 8 adjacent tiles.
        
        r0: x coordinate
        r1: y coordinate
    - name: UpdateTrapsVisibility
      address:
        EU: 0x2337B1C
        NA: 0x2336F4C
        JP: 0x2338314
      description: |-
        Exact purpose unknown. Gets called whenever a trap tile is shown or hidden.
        
        No params.
    - name: DrawTileGrid
      address:
        EU: 0x2337FF8
        NA: 0x2337428
        JP: 0x23387F0
      description: |-
        Draws a grid on the nearby walkable tiles. Triggered by pressing Y.
        
        r0: Coordinates of the entity around which the grid will be drawn
        r1: ?
        r2: ?
        r3: ?
    - name: HideTileGrid
      address:
        EU: 0x233836C
        NA: 0x233779C
        JP: 0x2338B60
      description: |-
        Hides the grid on the nearby walkable tiles. Triggered by releasing Y.
        
        No params.
    - name: DiscoverMinimap
      address:
        EU: 0x233860C
        NA: 0x2337A3C
        JP: 0x2338E00
      description: |-
        Discovers the tiles around the specified position on the minimap.
        
        The discovery radius depends on the visibility range of the floor. If display_data::blinded is true, the function returns early without doing anything.
        
        r0: Position around which the map should be discovered
    - name: PositionHasItem
      address:
        EU: 0x23386FC
        NA: 0x2337B2C
        JP: 0x2338EF0
      description: |-
        Checks if the tile at the position has an item on it.
        
        r0: Position to check
        return: bool
    - name: PositionHasMonster
      address:
        EU: 0x2338738
        NA: 0x2337B68
        JP: 0x2338F2C
      description: |-
        Checks if the tile at the position has a monster on it.
        
        r0: Position to check
        return: bool
    - name: TrySmashWall
      address:
        EU: 0x233876C
        NA: 0x2337B9C
        JP: 0x2338F60
      description: |-
        Checks if the tile at the position is a wall. If so, smash it (turn it into a floor tile), play an animation
        
        r0: Wall position to smash
        return: bool
    - name: IsWaterTileset
      address:
        EU: 0x2338A64
        NA: 0x2337E94
      description: |-
        Returns flag tileset_property::is_water_tileset for the current tileset
        
        return: True if the current tileset is a water tileset
    - name: GetRandomSpawnMonsterID
      address:
        EU: 0x2338B68
        NA: 0x2337F98
        JP: 0x233935C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        return: monster ID?
    - name: NearbyAllyIqSkillIsEnabled
      address:
        EU: 0x2338E58
        NA: 0x2338288
        JP: 0x233964C
      description: |-
        Appears to check whether or not the given monster has any allies nearby (within 1 tile) that have the given IQ skill active.
        
        r0: entity pointer
        r1: IQ skill ID
        return: bool
    - name: ResetGravity
      address:
        EU: 0x2338F3C
        NA: 0x233836C
        JP: 0x2339730
      description: |-
        Resets gravity (and the byte after it?) in the dungeon struct back to 0.
        
        No params.
    - name: GravityIsActive
      address:
        EU: 0x2338F60
        NA: 0x2338390
      description: |-
        Checks if gravity is active on the floor.
        
        return: bool
    - name: ShouldBoostKecleonShopSpawnChance
      address:
        EU: 0x2339090
        NA: 0x23384C0
      description: |-
        Gets the boost_kecleon_shop_spawn_chance field on the dungeon struct.
        
        return: bool
    - name: SetShouldBoostKecleonShopSpawnChance
      address:
        EU: 0x23390A8
        NA: 0x23384D8
      description: |-
        Sets the boost_kecleon_shop_spawn_chance field on the dungeon struct to the given value.
        
        r0: bool to set the flag to
    - name: UpdateShouldBoostKecleonShopSpawnChance
      address:
        EU: 0x23390C0
        NA: 0x23384F0
        JP: 0x23398B4
      description: |-
        Sets the boost_kecleon_shop_spawn_chance field on the dungeon struct depending on if a team member has the exclusive item effect for more kecleon shops.
        
        No params.
    - name: SetDoughSeedFlag
      address:
        EU: 0x2339118
        NA: 0x2338548
      description: |-
        Sets the dough_seed_extra_money_flag field on the dungeon struct to the given value.
        
        r0: bool to set the flag to
    - name: TrySpawnDoughSeedPoke
      address:
        EU: 0x2339130
        NA: 0x2338560
        JP: 0x2339924
      description: |-
        Checks the dough_seed_extra_money_flag field on the dungeon struct and tries to spawn
        extra poke if it is set.
        
        No params.
    - name: IsSecretBazaar
      address:
        EU: 0x2339194
        NA: 0x23385C4
      description: |-
        Checks if the current floor is the Secret Bazaar.
        
        return: bool
    - name: ShouldBoostHiddenStairsSpawnChance
      address:
        EU: 0x23391BC
        NA: 0x23385EC
      description: |-
        Gets the boost_hidden_stairs_spawn_chance field on the dungeon struct.
        
        return: bool
    - name: SetShouldBoostHiddenStairsSpawnChance
      address:
        EU: 0x23391D4
        NA: 0x2338604
      description: |-
        Sets the boost_hidden_stairs_spawn_chance field on the dungeon struct to the given value.
        
        r0: bool to set the flag to
    - name: UpdateShouldBoostHiddenStairsSpawnChance
      address:
        EU: 0x23391EC
        NA: 0x233861C
        JP: 0x23399E0
      description: |-
        Sets the boost_hidden_stairs_spawn_chance field on the dungeon struct depending on if a team member has the exclusive item effect for more hidden stairs.
        
        No params.
    - name: IsSecretRoom
      address:
        EU: 0x233922C
        NA: 0x233865C
      description: |-
        Checks if the current floor is the Secret Room fixed floor (from hidden stairs).
        
        return: bool
    - name: IsSecretFloor
      address:
        EU: 0x2339254
        NA: 0x2338684
        JP: 0x2339A48
      description: |-
        Checks if the current floor is a secret bazaar or a secret room.
        
        return: bool
    - name: HiddenStairsPresent
      address:
        EU: 0x23392A8
        NA: 0x23386D8
        JP: 0x2339A9C
      description: |-
        Checks if the hidden stairs are present on this floor.
        
        The function checks that dungeon_generation_info::hidden_stairs_pos isn't (-1, -1)
        
        return: True if the hidden stairs are present on this floor, false otherwise.
    - name: HiddenStairsTrigger
      address:
        EU: 0x2339364
        NA: 0x2338794
        JP: 0x2339B58
      description: |-
        Called whenever the leader steps on the hidden stairs.
        
        If the stairs hadn't been revealed yet, plays the corresponding animation.
        
        r0: True to display a message if the stairs are revealed, false to omit it.
    - name: GetDungeonGenInfoUnk0C
      address:
        EU: 0x2339450
        NA: 0x2338880
      description: "return: dungeon_generation_info::field_0xc"
    - name: GetMinimapData
      address:
        EU: 0x2339CE8
        NA: 0x2339118
      description: |-
        Returns a pointer to the minimap_display_data struct in the dungeon struct.
        
        return: minimap_display_data*
    - name: DrawMinimapTile
      address:
        EU: 0x2339DBC
        NA: 0x23391EC
        JP: 0x233A5B0
      description: |-
        Draws a single tile on the minimap.
        
        r0: X position
        r1: Y position
    - name: UpdateMinimap
      address:
        EU: 0x233A8B8
        NA: 0x2339CE8
        JP: 0x233B0AC
      description: |-
        Graphically updates the minimap
        
        No params.
    - name: SetMinimapDataE447
      address:
        EU: 0x233ADE8
        NA: 0x233A218
        JP: 0x233B5DC
      description: |-
        Sets minimap_display_data::field_0xE447 to the specified value
        
        r0: Value to set the field to
    - name: GetMinimapDataE447
      address:
        EU: 0x233AE00
      description: |-
        Exclusive to the EU ROM. Returns minimap_display_data::field_0xE447.
        
        return: minimap_display_data::field_0xE447
    - name: SetMinimapDataE448
      address:
        EU: 0x233AE14
        NA: 0x233A230
        JP: 0x233B5F4
      description: |-
        Sets minimap_display_data::field_0xE448 to the specified value
        
        r0: Value to set the field to
    - name: InitWeirdMinimapMatrix
      address:
        EU: 0x233AE74
        NA: 0x233A290
        JP: 0x233B654
      description: |-
        Initializes the matrix at minimap_display_data+0xE000. Seems to overflow said matrix when doing so.
        
        No params.
    - name: InitMinimapDisplayTile
      address:
        EU: 0x233AED4
        NA: 0x233A2F0
        JP: 0x233B6B4
      description: |-
        Used to initialize an instance of struct minimap_display_tile
        
        r0: Pointer to struct to init
        r1: Seems to be a pointer to the file that stores minimap icons or something like that
    - name: LoadFixedRoomDataVeneer
      address:
        EU: 0x233B208
        NA: 0x233A624
      description: |-
        Likely a linker-generated veneer for LoadFixedRoomData.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: IsNormalFloor
      address:
        EU: 0x233B238
        NA: 0x233A654
        JP: 0x233BA18
      description: |-
        Checks if the current floor is a normal layout.
        
        "Normal" means any layout that is NOT one of the following:
        - Hidden stairs floors
        - Golden Chamber
        - Challenge Request floor
        - Outlaw hideout
        - Treasure Memo floor
        - Full-room fixed floors (ID < 0xA5) [0xA5 == Sealed Chamber]
        
        return: bool
    - name: GenerateFloor
      address:
        EU: 0x233B2BC
        NA: 0x233A6D8
        JP: 0x233BA9C
      description: |-
        This is the master function that generates the dungeon floor.
        
        Very loosely speaking, this function first tries to generate a valid floor layout. Then it tries to spawn entities in a valid configuration. Finally, it performs cleanup and post-processing depending on the dungeon.
        
        If a spawn configuration is invalid, the entire floor layout is scrapped and regenerated. If the generated floor layout is invalid 10 times in a row, or a valid spawn configuration isn't generated within 10 attempts, the generation algorithm aborts and the default one-room Monster House floor is generated as a fallback.
        
        No params.
    - name: GetTileTerrain
      address:
        EU: 0x233BA5C
        NA: 0x233AE78
        JP: 0x233C23C
      description: |-
        Gets the terrain type of a tile.
        
        r0: tile pointer
        return: terrain ID
    - name: DungeonRand100
      address:
        EU: 0x233BA68
        NA: 0x233AE84
        JP: 0x233C248
      description: |-
        Compute a pseudorandom integer on the interval [0, 100) using the dungeon PRNG.
        
        return: pseudorandom integer
    - name: ClearHiddenStairs
      address:
        EU: 0x233BA78
        NA: 0x233AE94
        JP: 0x233C258
      description: |-
        Clears the tile (terrain and spawns) on which Hidden Stairs are spawned, if applicable.
        
        No params.
    - name: FlagHallwayJunctions
      address:
        EU: 0x233BAF0
        NA: 0x233AF0C
        JP: 0x233C2D0
      description: |-
        Sets the junction flag (bit 3 of the terrain flags) on any hallway junction tiles in some range [x0, x1), [y0, y1). This leaves tiles within rooms untouched.
        
        A hallway tile is considered a junction if it has at least 3 cardinal neighbors with open terrain.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
    - name: GenerateStandardFloor
      address:
        EU: 0x233BC0C
        NA: 0x233B028
        JP: 0x233C3EC
      description: |-
        Generate a standard floor with the given parameters.
        
        Broadly speaking, a standard floor is generated as follows:
        1. Generating the grid
        2. Creating a room or hallway anchor in each grid cell
        3. Creating hallways between grid cells
        4. Generating special features (maze room, Kecleon shop, Monster House, extra hallways, room imperfections, secondary structures)
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: GenerateOuterRingFloor
      address:
        EU: 0x233BD74
        NA: 0x233B190
        JP: 0x233C554
      description: |-
        Generates a floor layout with a 4x2 grid of rooms, surrounded by an outer ring of hallways.
        
        r0: floor properties
    - name: GenerateCrossroadsFloor
      address:
        EU: 0x233C200
        NA: 0x233B61C
        JP: 0x233C9E0
      description: |-
        Generates a floor layout with a mesh of hallways on the interior 3x2 grid, surrounded by a boundary of rooms protruding from the interior like spikes, excluding the corner cells.
        
        r0: floor properties
    - name: GenerateLineFloor
      address:
        EU: 0x233C660
        NA: 0x233BA7C
        JP: 0x233CE40
      description: |-
        Generates a floor layout with 5 grid cells in a horizontal line.
        
        r0: floor properties
    - name: GenerateCrossFloor
      address:
        EU: 0x233C7C0
        NA: 0x233BBDC
        JP: 0x233CFA0
      description: |-
        Generates a floor layout with 5 rooms arranged in a cross ("plus sign") formation.
        
        r0: floor properties
    - name: GenerateBeetleFloor
      address:
        EU: 0x233C958
        NA: 0x233BD74
        JP: 0x233D138
      description: |-
        Generates a floor layout in a "beetle" formation, which is created by taking a 3x3 grid of rooms, connecting the rooms within each row, and merging the central column into one big room.
        
        r0: floor properties
    - name: MergeRoomsVertically
      address:
        EU: 0x233CB14
        NA: 0x233BF30
        JP: 0x233D2F4
      description: |-
        Merges two vertically stacked rooms into one larger room.
        
        r0: x grid coordinate of the rooms to merge
        r1: y grid coordinate of the upper room
        r2: dy, where the lower room has a y grid coordinate of y+dy
        r3: grid to update
    - name: GenerateOuterRoomsFloor
      address:
        EU: 0x233CC60
        NA: 0x233C07C
        JP: 0x233D440
      description: |-
        Generates a floor layout with a ring of rooms on the grid boundary and nothing in the interior.
        
        Note that this function is bugged, and won't properly connect all the rooms together for grid_size_x < 4.
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: IsNotFullFloorFixedRoom
      address:
        EU: 0x233CEF4
        NA: 0x233C310
        JP: 0x233D6D4
      description: |-
        Checks if a fixed room ID does not correspond to a fixed, full-floor layout.
        
        The first non-full-floor fixed room is 0xA5, which is for Sealed Chambers.
        
        r0: fixed room ID
        return: bool
    - name: GenerateFixedRoom
      address:
        EU: 0x233CF10
        NA: 0x233C32C
      description: |-
        Handles fixed room generation if the floor contains a fixed room.
        
        r0: fixed room ID
        r1: floor properties
        return: bool
    - name: GenerateOneRoomMonsterHouseFloor
      address:
        EU: 0x233D358
        NA: 0x233C774
        JP: 0x233DB34
      description: |-
        Generates a floor layout with just a large, one-room Monster House.
        
        This is the default layout if dungeon generation fails.
        
        No params.
    - name: GenerateTwoRoomsWithMonsterHouseFloor
      address:
        EU: 0x233D428
        NA: 0x233C844
        JP: 0x233DC04
      description: |-
        Generate a floor layout with two rooms (left and right), one of which is a Monster House.
        
        No params.
    - name: GenerateExtraHallways
      address:
        EU: 0x233D5CC
        NA: 0x233C9E8
        JP: 0x233DDA8
      description: |-
        Generate extra hallways on the floor via a series of random walks.
        
        Each random walk starts from a random tile in a random room, leaves the room in a random cardinal direction, and from there tunnels through obstacles through a series of random turns, leaving open terrain in its wake. The random walk stops when it reaches open terrain, goes out of bounds, or reaches an impassable obstruction.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of extra hallways to generate
    - name: GetGridPositions
      address:
        EU: 0x233DB68
        NA: 0x233CF84
        JP: 0x233E344
      description: |-
        Get the grid cell positions for a given set of floor grid dimensions.
        
        r0: [output] pointer to array of the starting x coordinates of each grid column
        r1: [output] pointer to array of the starting y coordinates of each grid row
        r2: grid size x
        r3: grid size y
    - name: InitDungeonGrid
      address:
        EU: 0x233DBE8
        NA: 0x233D004
        JP: 0x233E3C4
      description: |-
        Initialize a dungeon grid with defaults.
        
        The grid is an array of grid cells stored in column-major order (such that grid cells with the same x value are stored contiguously), with a fixed column size of 15. If the grid size in the y direction is less than this, the last (15 - grid_size_y) entries of each column will be uninitialized.
        
        Note that the grid size arguments define the maximum size of the grid from a programmatic standpoint. However, grid cells can be invalidated if they exceed the configured floor size in the dungeon generation status struct. Thus, the dimensions of the ACTIVE grid can be smaller.
        
        r0: [output] grid (expected to have space for at least (15*(grid_size_x-1) + grid_size_y) dungeon grid cells)
        r1: grid size x
        r2: grid size y
    - name: AssignRooms
      address:
        EU: 0x233DCE8
        NA: 0x233D104
        JP: 0x233E4C4
      description: |-
        Randomly selects a subset of grid cells to become rooms.
        
        The given number of grid cells will become rooms. If any of the selected grid cells are invalid, fewer rooms will be generated. The number of rooms assigned will always be at least 2 and never exceed 36.
        
        Cells not marked as rooms will become hallway anchors. A hallway anchor is a single tile in a non-room grid cell to which hallways will be connected later, thus "anchoring" hallway generation.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of rooms; if positive, a random value between [n_rooms, n_rooms+2] will be used. If negative, |n_rooms| will be used exactly.
    - name: CreateRoomsAndAnchors
      address:
        EU: 0x233DEFC
        NA: 0x233D318
        JP: 0x233E6D8
      description: |-
        Creates rooms and hallway anchors in each grid cell as designated by AssignRooms.
        
        This function creates a rectangle of open terrain for each room (with some margin relative to the grid cell border). A single open tile is created in hallway anchor cells, and a hallway anchor indicator is set for later reference.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: room bitflags; only uses bit 2 (mask: 0b100), which enables room imperfections
    - name: GenerateSecondaryStructures
      address:
        EU: 0x233E258
        NA: 0x233D674
        JP: 0x233EA34
      description: |-
        Try to generate secondary structures in flagged rooms.
        
        If a valid room with no special features is flagged to have a secondary structure, try to generate a random one in the room, based on the result of a dice roll:
          0: no secondary structure
          1: maze, or a central water/lava "plus sign" as fallback, or a single water/lava tile in the center as a second fallback
          2: checkerboard pattern of water/lava
          3: central pool of water/lava
          4: central "island" with items and a Warp Tile, surrounded by a "moat" of water/lava
          5: horizontal or vertical divider of water/lava splitting the room in two
        
        If the room isn't the right shape, dimension, or otherwise doesn't support the selected secondary structure, it is left untouched.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: AssignGridCellConnections
      address:
        EU: 0x233EC40
        NA: 0x233E05C
        JP: 0x233F41C
      description: |-
        Randomly assigns connections between adjacent grid cells.
        
        Connections are created via a random walk with momentum, starting from the grid cell at (cursor x, cursor y). A connection is drawn in a random direction from the current cursor, and this process is repeated a certain number of times (the "floor connectivity" specified in the floor properties). The direction of the random walk has "momentum"; there's a 50% chance it will be the same as the previous step (or rotated counterclockwise if on the boundary). This helps to reduce the number of dead ends and forks in the road caused by the random walk "doubling back" on itself.
        
        If dead ends are disabled in the floor properties, there is an additional phase to remove dead end hallway anchors (only hallway anchors, not rooms) by drawing additional connections. Note that the actual implementation contains a bug: the grid cell validity checks use the wrong index, so connections may be drawn to invalid cells.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: cursor x
        stack[0]: cursor y
        stack[1]: floor properties
    - name: CreateGridCellConnections
      address:
        EU: 0x233F020
        NA: 0x233E43C
        JP: 0x233F7FC
      description: |-
        Create grid cell connections either by creating hallways or merging rooms.
        
        When creating a hallway connecting a hallway anchor, the exact anchor coordinates are used as the endpoint. When creating a hallway connecting a room, a random point on the room edge facing the hallway is used as the endpoint. The grid cell boundaries are used as the middle coordinates for kinks (see CreateHallway).
        
        If room merging is enabled, there is a 9.75% chance that two connected rooms will be merged into a single larger room (9.75% comes from two 5% rolls, one for each of the two rooms being merged). A room can only participate in a merge once.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: disable room merging flag
    - name: GenerateRoomImperfections
      address:
        EU: 0x233F918
        NA: 0x233ED34
        JP: 0x23400F4
      description: |-
        Attempt to generate room imperfections for each room in the floor layout, if enabled.
        
        Each room has a 40% chance of having imperfections if its grid cell is flagged to allow room imperfections. Imperfections are generated by randomly growing the walls of the room inwards for a certain number of iterations, starting from the corners.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: CreateHallway
      address:
        EU: 0x233FD04
        NA: 0x233F120
        JP: 0x23404E0
      description: |-
        Create a hallway between two points.
        
        If the two points share no coordinates in common (meaning the line connecting them is diagonal), a "kinked" hallway is created, with the kink at a specified "middle" coordinate (in practice the grid cell boundary). For example, with a kinked horizontal hallway, there are two horizontal lines extending out from the endpoints, connected by a vertical line on the middle x coordinate.
        
        If a hallway would intersect with an existing open tile (like an existing hallway), the hallway will only be created up to the point where it intersects with the open tile.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
        stack[0]: vertical flag (true for vertical hallway, false for horizontal)
        stack[1]: middle x coordinate for kinked horizontal hallways
        stack[2]: middle y coordinate for kinked vertical hallways
    - name: EnsureConnectedGrid
      address:
        EU: 0x2340008
        NA: 0x233F424
        JP: 0x23407E4
      description: |-
        Ensure the grid forms a connected graph (all valid cells are reachable) by adding hallways to unreachable grid cells.
        
        If a grid cell cannot be connected for some reason, remove it entirely.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
    - name: SetTerrainObstacleChecked
      address:
        EU: 0x23404E4
        NA: 0x233F900
        JP: 0x2340CC0
      description: |-
        Set the terrain of a specific tile to be an obstacle (wall or secondary terrain).
        
        Secondary terrain (water/lava) can only be placed in the specified room. If the tile room index does not match, a wall will be placed instead.
        
        r0: tile pointer
        r1: use secondary terrain flag (true for water/lava, false for wall)
        r2: room index
    - name: FinalizeJunctions
      address:
        EU: 0x2340520
        NA: 0x233F93C
        JP: 0x2340CFC
      description: |-
        Finalizes junction tiles by setting the junction flag (bit 3 of the terrain flags) and ensuring open terrain.
        
        Note that this implementation is slightly buggy. This function scans tiles left-to-right, top-to-bottom, and identifies junctions as any open, non-hallway tile (room_index != 0xFF) adjacent to an open, hallway tile (room_index == 0xFF). This interacts poorly with hallway anchors (room_index == 0xFE). This function sets the room index of any hallway anchors to 0xFF within the same loop, so a hallway anchor may or may not be identified as a junction depending on the orientation of connected hallways.
        
        For example, in the following configuration, the "o" tile would be marked as a junction because the neighboring hallway tile to its left comes earlier in iteration, while the "o" tile still has the room index 0xFE, causing the algorithm to mistake it for a room tile:
          xxxxx
          ---ox
          xxx|x
          xxx|x
        However, in the following configuration, the "o" tile would NOT be marked as a junction because it comes earlier in iteration than any of its neighboring hallway tiles, so its room index is set to 0xFF before it can be marked as a junction. This is actually the ONLY possible configuration where a hallway anchor will not be marked as a junction.
          xxxxx
          xo---
          x|xxx
          x|xxx
        
        No params.
    - name: GenerateKecleonShop
      address:
        EU: 0x23407CC
        NA: 0x233FBE8
        JP: 0x2340FA8
      description: |-
        Possibly generate a Kecleon shop on the floor.
        
        A Kecleon shop will be generated with a probability determined by the Kecleon shop spawn chance parameter. A Kecleon shop will be generated in a random room that is valid, connected, has no other special features, and has dimensions of at least 5x4. Kecleon shops will occupy the entire room interior, leaving a one tile margin from the room walls.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Kecleon shop spawn chance (percentage from 0-100)
    - name: GenerateMonsterHouse
      address:
        EU: 0x2340B80
        NA: 0x233FF9C
        JP: 0x234135C
      description: |-
        Possibly generate a Monster House on the floor.
        
        A Monster House will be generated with a probability determined by the Monster House spawn chance parameter, and only if the current floor can support one (no non-Monster-House outlaw missions or special floor types). A Monster House will be generated in a random room that is valid, connected, and is not a merged or maze room.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Monster House spawn chance (percentage from 0-100)
    - name: GenerateMazeRoom
      address:
        EU: 0x2340E08
        NA: 0x2340224
        JP: 0x23415E4
      description: |-
        Possibly generate a maze room on the floor.
        
        A maze room will be generated with a probability determined by the maze room chance parameter. A maze will be generated in a random room that is valid, connected, has odd dimensions, and has no other features.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: maze room chance (percentage from 0-100)
    - name: GenerateMaze
      address:
        EU: 0x234103C
        NA: 0x2340458
        JP: 0x2341818
      description: |-
        Generate a maze room within a given grid cell.
        
        A "maze" is generated within the room using a series of random walks to place obstacle terrain (walls or secondary terrain) in a maze-like arrangement. "Maze lines" (see GenerateMazeLine) are generated using every other tile around the room's border, as well as every other interior tile, as a starting point. This ensures that there are stripes of walkable open terrain surrounded by stripes of obstacles (the maze walls).
        
        r0: grid cell pointer
        r1: use secondary terrain flag (true for water/lava, false for walls)
    - name: GenerateMazeLine
      address:
        EU: 0x23412B8
        NA: 0x23406D4
        JP: 0x2341A94
      description: |-
        Generate a "maze line" from a given starting point, within the given bounds.
        
        A "maze line" is a random walk starting from (x0, y0). The random walk proceeds with a stride of 2 in a random direction, laying down obstacles as it goes. The random walk terminates when it gets trapped and there are no more neighboring tiles that are open and in-bounds.
        
        r0: x0
        r1: y0
        r2: xmin
        r3: ymin
        stack[0]: xmax
        stack[1]: ymax
        stack[2]: use secondary terrain flag (true for water/lava, false for walls)
        stack[3]: room index
    - name: SetSpawnFlag5
      address:
        EU: 0x2341460
        NA: 0x234087C
        JP: 0x2341C3C
      description: |-
        Set spawn flag 5 (0b100000 or 0x20) on all tiles in a room.
        
        r0: grid cell
    - name: IsNextToHallway
      address:
        EU: 0x23414B4
        NA: 0x23408D0
        JP: 0x2341C90
      description: |-
        Checks if a tile position is either in a hallway or next to one.
        
        r0: x
        r1: y
        return: bool
    - name: ResolveInvalidSpawns
      address:
        EU: 0x2341558
        NA: 0x2340974
        JP: 0x2341D34
      description: |-
        Resolve invalid spawn flags on tiles.
        
        Spawn flags can be invalid due to terrain. For example, traps can't spawn on obstacles. Spawn flags can also be invalid due to multiple being set on a single tile, in which case one will take precedence. For example, stair spawns trump trap spawns.
        
        No params.
    - name: ConvertSecondaryTerrainToChasms
      address:
        EU: 0x23415F0
        NA: 0x2340A0C
        JP: 0x2341DCC
      description: |-
        Converts all secondary terrain tiles (water/lava) to chasms.
        
        No params.
    - name: EnsureImpassableTilesAreWalls
      address:
        EU: 0x234165C
        NA: 0x2340A78
        JP: 0x2341E38
      description: |-
        Ensures all tiles with the impassable flag are walls.
        
        No params.
    - name: InitializeTile
      address:
        EU: 0x23416B8
        NA: 0x2340AD4
        JP: 0x2341E94
      description: |-
        Initialize a tile struct.
        
        r0: tile pointer
    - name: ResetFloor
      address:
        EU: 0x23416F0
        NA: 0x2340B0C
        JP: 0x2341ECC
      description: |-
        Resets the floor in preparation for a floor generation attempt.
        
        Resets all tiles, resets the border to be impassable, and clears entity spawns.
        
        No params.
    - name: PosIsOutOfBounds
      address:
        EU: 0x2341890
        NA: 0x2340CAC
        JP: 0x234206C
      description: |-
        Checks if a position (x, y) is out of bounds on the map: !((0 <= x <= 55) && (0 <= y <= 31)).
        
        r0: x
        r1: y
        return: bool
    - name: ShuffleSpawnPositions
      address:
        EU: 0x23418C8
        NA: 0x2340CE4
        JP: 0x23420A4
      description: |-
        Randomly shuffle an array of spawn positions.
        
        r0: spawn position array containing bytes {x1, y1, x2, y2, ...}
        r1: number of (x, y) pairs in the spawn position array
    - name: MarkNonEnemySpawns
      address:
        EU: 0x2341930
        NA: 0x2340D4C
        JP: 0x234210C
      description: |-
        Mark tiles for all non-enemy entities, which includes stairs, items, traps, and the player. Note that this only marks tiles; actual spawning is handled later.
        
        Most entities are spawned randomly on a subset of permissible tiles.
        
        Stairs are spawned if they don't already exist on the floor, and hidden stairs of the specified type are also spawned if configured as long as there are at least 2 floors left in the dungeon. Stairs can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an enemy spawn, isn't a hallway junction, and isn't a special tile like a Key door.
        
        Items are spawned both normally in rooms, as well as in walls and Monster Houses. Normal items can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop or Monster House, isn't a hallway junction, and isn't a special tile like a Key door. Buried items can spawn on any wall tile. Monster House items can spawn on any Monster House tile that isn't in a Kecleon shop and isn't a hallway junction.
        
        Traps are similarly spawned both normally in rooms, as well as in Monster Houses. Normal traps can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an item or enemy spawn, and isn't a special tile like a Key door. Monster House traps follow the same conditions as Monster House items.
        
        The player can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, isn't a hallway junction, doesn't already have an item, enemy, or trap spawn, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: MarkEnemySpawns
      address:
        EU: 0x2342054
        NA: 0x2341470
        JP: 0x2342830
      description: |-
        Mark tiles for all enemies, which includes normal enemies and those in Monster Houses. Note that this only marks tiles; actual spawning is handled later in SpawnInitialMonsters.
        
        Normal enemies can spawn on any tile that has open terrain, isn't in a Kecleon shop, doesn't already have another entity spawn, and isn't a special tile like a Key door.
        
        Monster House enemies can spawn on any Monster House tile that isn't in a Kecleon shop, isn't where the player spawns, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: SetSecondaryTerrainOnWall
      address:
        EU: 0x2342350
        NA: 0x234176C
        JP: 0x2342B2C
      description: |-
        Set a specific tile to have secondary terrain (water/lava), but only if it's a passable wall.
        
        r0: tile pointer
    - name: GenerateSecondaryTerrainFormations
      address:
        EU: 0x2342390
        NA: 0x23417AC
        JP: 0x2342B6C
      description: |-
        Generate secondary terrain (water/lava) formations.
        
        This includes "rivers" that flow from top-to-bottom (or bottom-to-top), as well as "lakes" both standalone and after rivers. Water/lava formations will never cut through rooms, but they can pass through rooms to the opposite side.
        
        Rivers are generated by a top-down or bottom-up random walk that ends when existing secondary terrain is reached or the walk goes out of bounds. Some rivers also end prematurely in a lake. Lakes are a large collection of secondary terrain generated around a central point.
        
        r0: bit index to test in the floor properties room flag bitvector (formations are only generated if the bit is set)
        r1: floor properties
    - name: StairsAlwaysReachable
      address:
        EU: 0x2342A50
        NA: 0x2341E6C
        JP: 0x234322C
      description: |-
        Checks that the stairs are reachable from every walkable tile on the floor.
        
        This runs a graph traversal algorithm that is very similar to breadth-first search (the order in which nodes are visited is slightly different), starting from the stairs. If any tile is walkable but wasn't reached by the traversal algorithm, then the stairs must not be reachable from that tile.
        
        r0: x coordinate of the stairs
        r1: y coordinate of the stairs
        r2: flag to always return true, but set a special bit on all walkable tiles that aren't reachable from the stairs
        return: bool
    - name: GetNextFixedRoomAction
      address:
        EU: 0x23430B4
        NA: 0x23424D0
        JP: 0x2343890
      description: |-
        Returns the next action that needs to be performed when spawning a fixed room tile.
        
        return: Next action ID
    - name: ConvertWallsToChasms
      address:
        EU: 0x234312C
        NA: 0x2342548
        JP: 0x2343908
      description: |-
        Converts all wall tiles to chasms.
        
        No params.
    - name: ResetInnerBoundaryTileRows
      address:
        EU: 0x2343760
        NA: 0x2342B7C
        JP: 0x2343F3C
      description: |-
        Reset the inner boundary tile rows (y == 1 and y == 30) to their initial state of all wall tiles, with impassable walls at the edges (x == 0 and x == 55).
        
        No params.
    - name: ResetImportantSpawnPositions
      address:
        EU: 0x234384C
        NA: 0x2342C68
        JP: 0x2344028
      description: |-
        Resets important spawn positions (the player, stairs, and hidden stairs) back to their default values.
        
        r0: dungeon generation info pointer (a field on the dungeon struct)
    - name: SpawnStairs
      address:
        EU: 0x2343870
        NA: 0x2342C8C
        JP: 0x234404C
      description: |-
        Spawn stairs at the given location.
        
        If the hidden stairs type is something other than HIDDEN_STAIRS_NONE, hidden stairs of the specified type will be spawned instead of normal stairs.
        
        If spawning normal stairs and the current floor is a rescue floor, the room containing the stairs will be converted into a Monster House.
        
        If attempting to spawn hidden stairs but the spawn is blocked, the floor generation status's hidden stairs spawn position will be updated, but it won't be transferred to the dungeon generation info struct.
        
        r0: position (two-byte array for {x, y})
        r1: dungeon generation info pointer (a field on the dungeon struct)
        r2: hidden stairs type
    - name: GetHiddenStairsType
      address:
        EU: 0x2343980
        NA: 0x2342D9C
      description: |-
        Gets the hidden stairs type for a given floor.
        
        This function reads the floor properties and resolves any randomness (such as HIDDEN_STAIRS_RANDOM_SECRET_BAZAAR_OR_SECRET_ROOM and the floor_properties::hidden_stairs_spawn_chance) into a concrete hidden stairs type.
        
        r0: dungeon generation info pointer
        r1: floor properties pointer
        return: enum hidden_stairs_type
    - name: GetFinalKecleonShopSpawnChance
      address:
        EU: 0x2343AA0
        NA: 0x2342EBC
        JP: 0x2344280
      description: |-
        Gets the kecleon shop spawn chance for the floor.
        
        When dungeon::boost_kecleon_shop_spawn_chance is false, returns the same value as the input. When it's true, returns the input (chance * 1.2).
        
        r0: base kecleon shop spawn chance, floor_properties::kecleon_shop_spawn_chance
        return: int
    - name: ResetHiddenStairsSpawn
      address:
        EU: 0x2343AEC
        NA: 0x2342F08
        JP: 0x23442CC
      description: |-
        Resets hidden stairs spawn information for the floor. This includes the position on the floor generation status as well as the flag indicating whether the spawn was blocked.
        
        No params.
    - name: PlaceFixedRoomTile
      address:
        EU: 0x2343B14
        NA: 0x2342F30
        JP: 0x23442F4
      description: |-
        Used to spawn a single tile when generating a fixed room. The tile might contain an item or a monster.
        
        r0: Pointer to the tile to spawn
        r1: Fixed room action to perform. Controls what exactly will be spawned. The action is actually 12 bits long, the highest 4 bits are used as a parameter that represents a direction (for example, when spawning a monster).
        r2: Tile X position
        r3: Tile Y position
    - name: FixedRoomActionParamToDirection
      address:
        EU: 0x2344550
        NA: 0x234396C
        JP: 0x2344D30
      description: |-
        Converts the parameter stored in a fixed room action value to a direction ID.
        
        The conversion is performed by subtracting 1 to the value. If the parameter had a value of 0, DIR_NONE is returned.
        
        r0: Parameter value
        return: Direction
    - name: ApplyKeyEffect
      address:
        EU: 0x23448BC
        NA: 0x2343CD8
        JP: 0x234509C
      description: |-
        Attempts to open a locked door in front of the target if a locked door has not already
        been open on the floor.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: LoadFixedRoomData
      address:
        EU: 0x2344974
        NA: 0x2343D90
        JP: 0x2345154
      description: |-
        Loads fixed room data from BALANCE/fixed.bin into the buffer pointed to by FIXED_ROOM_DATA_PTR.
        
        No params.
    - name: LoadFixedRoom
      address:
        EU: 0x2344A04
        NA: 0x2343E20
        JP: 0x23451E4
      description: "Note: unverified, ported from Irdkwia's notes"
    - name: OpenFixedBin
      address:
        EU: 0x2344C38
        NA: 0x2344054
        JP: 0x2345418
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: CloseFixedBin
      address:
        EU: 0x2344C6C
        NA: 0x2344088
        JP: 0x234544C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: AreOrbsAllowed
      address:
        EU: 0x2344C90
        NA: 0x23440AC
        JP: 0x2345470
      description: |-
        Checks if orbs are usable in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreTileJumpsAllowed
      address:
        EU: 0x2344CC0
        NA: 0x23440DC
        JP: 0x23454A0
      description: |-
        Checks if tile jumps (warping, being blown away, and leaping) are allowed in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreTrawlOrbsAllowed
      address:
        EU: 0x2344CF0
        NA: 0x234410C
        JP: 0x23454D0
      description: |-
        Checks if Trawl Orbs work in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreOrbsAllowedVeneer
      address:
        EU: 0x2344D20
        NA: 0x234413C
        JP: 0x2345500
      description: |-
        Likely a linker-generated veneer for InitMemAllocTable.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: fixed room ID
        return: bool
    - name: AreLateGameTrapsEnabled
      address:
        EU: 0x2344D2C
        NA: 0x2344148
        JP: 0x234550C
      description: |-
        Check if late-game traps (Summon, Pitfall, and Pokémon traps) work in the given fixed room.
        
        Or disabled? This function, which Irdkwia's notes label as a disable check, check the struct field labeled in End's notes as an enable flag.
        
        r0: fixed room ID
        return: bool
    - name: AreMovesEnabled
      address:
        EU: 0x2344D44
        NA: 0x2344160
        JP: 0x2345524
      description: |-
        Checks if moves (excluding the regular attack) are usable in the given fixed room.
        
        r0: fixed room ID
        return: bool
    - name: IsRoomIlluminated
      address:
        EU: 0x2344D5C
        NA: 0x2344178
        JP: 0x234553C
      description: |-
        Checks if the given fixed room is fully illuminated.
        
        r0: fixed room ID
        return: bool
    - name: GetMatchingMonsterId
      address:
        EU: 0x2344D74
        NA: 0x2344190
        JP: 0x2345554
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        r1: ?
        r2: ?
        return: monster ID
    - name: GenerateItemExplicit
      address:
        EU: 0x2344F98
        NA: 0x23443B4
        JP: 0x2345778
      description: |-
        Initializes an item struct with the given information.
        
        This calls InitStandardItem, then explicitly sets the quantity and stickiness. If quantity == 0 for Poké, GenerateCleanItem is used instead.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: quantity
        r3: sticky flag
    - name: GenerateAndSpawnItem
      address:
        EU: 0x2345014
        NA: 0x2344430
        JP: 0x23457F4
      description: |-
        A convenience function that generates an item with GenerateItemExplicit, then spawns it with SpawnItem.
        
        If the check-in-bag flag is set and the player's bag already contains an item with the given ID, a Reviver Seed will be spawned instead.
        
        It seems like this function is only ever called in one place, with an item ID of 0x49 (Reviver Seed).
        
        r0: item ID
        r1: x position
        r2: y position
        r3: quantity
        stack[0]: sticky flag
        stack[1]: check-in-bag flag
    - name: IsHiddenStairsFloor
      address:
        EU: 0x23450F0
        NA: 0x234450C
        JP: 0x23458D0
      description: |-
        Checks if the current floor is either the Secret Bazaar or a Secret Room.
        
        return: bool
    - name: IsSecretBazaarVeneer
      address:
        NA: 0x2344538
      description: |-
        Likely a linker-generated veneer for IsSecretBazaar.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        return: bool
    - name: GenerateStandardItem
      address:
        EU: 0x23457B4
        NA: 0x2344BD0
        JP: 0x2345F94
      description: |-
        Wrapper around GenerateItem with quantity set to 0
        
        r0: pointer to item to initialize
        r1: item ID
        r2: stickiness type
    - name: GenerateCleanItem
      address:
        EU: 0x23457C8
        NA: 0x2344BE4
        JP: 0x2345FA8
      description: |-
        Wrapper around GenerateItem with quantity set to 0 and stickiness type set to SPAWN_STICKY_NEVER.
        
        r0: pointer to item to initialize
        r1: item ID
    - name: TryLeaderItemPickUp
      address:
        EU: 0x2345C40
        NA: 0x2345058
        JP: 0x234641C
      description: |-
        Checks the tile at the specified position and determines if the leader should pick up an item.
        
        r0: position
        r1: flag for whether or not a message should be logged upon the leader failing to obtain the item
    - name: SpawnItem
      address:
        EU: 0x2346120
        NA: 0x2345538
        JP: 0x23468FC
      description: |-
        Spawns an item on the floor. Fails if there are more than 64 items already on the floor.
        
        This calls SpawnItemEntity, fills in the item info struct, sets the entity to be visible, binds the entity to the tile it occupies, updates the n_items counter on the dungeon struct, and various other bits of bookkeeping.
        
        r0: position
        r1: item pointer
        r2: some flag?
        return: success flag
    - name: RemoveGroundItem
      address:
        EU: 0x23462A8
        NA: 0x23456BC
        JP: 0x2346A80
      description: |-
        Removes an item lying on the ground.
        
        Also updates dungeon::n_items.
        
        r0: Position where the item is located
        r1: If true, update dungeon::poke_buy_kecleon_shop and dungeon::poke_sold_kecleon_shop
    - name: SpawnDroppedItemWrapper
      address:
        EU: 0x2346628
        NA: 0x2345A3C
        JP: 0x2346E00
      description: |-
        Wraps SpawnDroppedItem in a more convenient interface.
        
        r0: entity
        r1: position
        r2: item
        r3: ?
    - name: SpawnDroppedItem
      address:
        EU: 0x23466C4
        NA: 0x2345AD8
        JP: 0x2346E9C
      description: |-
        Used to spawn an item that was thrown or dropped, with a log message.
        
        Determines where exactly the item will land, if it bounces on a trap, etc.
        Used for thrown items that hit a wall, for certain enemy drops (such as Unown stones or Treasure Boxes), for certain moves (like Pay Day and Knock Off), and possibly other things.
        
        r0: entity that dropped or threw the item
        r1: item entity. Contains the coordinates where the item should try to land first.
        r2: item info
        r3: ?
        stack[0]: pointer to int16_t[2] for x/y direction (corresponding to DIRECTIONS_XY)
        stack[1]: ?
    - name: TryGenerateUnownStoneDrop
      address:
        EU: 0x2346C4C
        NA: 0x2346060
        JP: 0x2347424
      description: |-
        Determine if a defeated monster should drop a Unown Stone, and generate the item if so.
        
        Checks that the current dungeon isn't a Marowak Dojo training maze, and that the monster is an Unown. If so, there's a 21% chance that an Unown Stone will be generated.
        
        r0: [output] item
        r1: monster ID
        return: whether or not an Unown Stone was generated
    - name: HasHeldItem
      address:
        EU: 0x23473D0
        NA: 0x23467E4
        JP: 0x2347B94
      description: |-
        Checks if a monster has a certain held item.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: GenerateMoneyQuantity
      address:
        EU: 0x2347420
        NA: 0x2346834
        JP: 0x2347BE4
      description: |-
        Set the quantity code on an item (assuming it's Poké), given some maximum acceptable money amount.
        
        r0: item pointer
        r1: max money amount (inclusive)
    - name: CheckTeamItemsFlags
      address:
        EU: 0x23477CC
        NA: 0x2346BD8
        JP: 0x2347F8C
      description: |-
        Checks whether any of the items in the bag or any of the items carried by team members has any of the specified flags set in its flags field.
        
        r0: Flag(s) to check (0 = f_exists, 1 = f_in_shop, 2 = f_unpaid, etc.)
        return: True if any of the items of the team has the specified flags set, false otherwise.
    - name: AddHeldItemToBag
      address:
        EU: 0x2347B10
        NA: 0x2346F14
        JP: 0x23482D4
      description: |-
        Adds the monster's held item to the bag. This is only called on monsters on the exploration team.
        monster::is_not_team_member should be checked to be false before calling.
        
        r0: monster pointer
    - name: RemoveEmptyItemsInBagWrapper
      address:
        EU: 0x2347C2C
        NA: 0x2347030
        JP: 0x23483F0
      description: |-
        Calls RemoveEmptyItemsInBag, then some other function that seems to update the minimap, the map surveyor flag, and other stuff.
        
        No params.
    - name: GenerateItem
      address:
        EU: 0x2347EC4
        NA: 0x23472C4
        JP: 0x2348684
      description: |-
        Initializes an item struct with the given information.
        
        This wraps InitItem, but with extra logic to resolve the item's stickiness. It also calls GenerateMoneyQuantity for Poké.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: quantity
        r3: stickiness type (enum gen_item_stickiness)
    - name: CheckActiveChallengeRequest
      address:
        EU: 0x2349D4C
        NA: 0x234914C
        JP: 0x234A474
      description: |-
        Checks if there's an active challenge request on the current dungeon.
        
        return: True if there's an active challenge request on the current dungeon in the list of missions.
    - name: GetMissionDestination
      address:
        EU: 0x2349DA4
        NA: 0x23491A4
        JP: 0x234A4CC
      description: |-
        Returns the current mission destination on the dungeon struct.
        
        return: &dungeon::mission_destination
    - name: IsOutlawOrChallengeRequestFloor
      address:
        EU: 0x2349DC4
        NA: 0x23491C4
        JP: 0x234A4EC
      description: |-
        Checks if the current floor is an active mission destination of type MISSION_TAKE_ITEM_FROM_OUTLAW, MISSION_ARREST_OUTLAW or MISSION_CHALLENGE_REQUEST.
        
        return: bool
    - name: IsDestinationFloor
      address:
        EU: 0x2349E08
        NA: 0x2349208
        JP: 0x234A530
      description: |-
        Checks if the current floor is a mission destination floor.
        
        return: bool
    - name: IsCurrentMissionType
      address:
        EU: 0x2349E1C
        NA: 0x234921C
        JP: 0x234A544
      description: |-
        Checks if the current floor is an active mission destination of a given type (and any subtype).
        
        r0: mission type
        return: bool
    - name: IsCurrentMissionTypeExact
      address:
        EU: 0x2349E50
        NA: 0x2349250
        JP: 0x234A578
      description: |-
        Checks if the current floor is an active mission destination of a given type and subtype.
        
        r0: mission type
        r1: mission subtype
        return: bool
    - name: IsOutlawMonsterHouseFloor
      address:
        EU: 0x2349E8C
        NA: 0x234928C
        JP: 0x234A5B4
      description: |-
        Checks if the current floor is a mission destination for a Monster House outlaw mission.
        
        return: bool
    - name: IsGoldenChamber
      address:
        EU: 0x2349EB0
        NA: 0x23492B0
        JP: 0x234A5D8
      description: |-
        Checks if the current floor is a Golden Chamber floor.
        
        return: bool
    - name: IsLegendaryChallengeFloor
      address:
        EU: 0x2349ED4
        NA: 0x23492D4
        JP: 0x234A5FC
      description: |-
        Checks if the current floor is a boss floor for a Legendary Challenge Letter mission.
        
        return: bool
    - name: IsJirachiChallengeFloor
      address:
        EU: 0x2349F14
        NA: 0x2349314
        JP: 0x234A63C
      description: |-
        Checks if the current floor is the boss floor in Star Cave Pit for Jirachi's Challenge Letter mission.
        
        return: bool
    - name: IsDestinationFloorWithMonster
      address:
        EU: 0x2349F4C
        NA: 0x234934C
        JP: 0x234A674
      description: |-
        Checks if the current floor is a mission destination floor with a special monster.
        
        See FloorHasMissionMonster for details.
        
        return: bool
    - name: LoadMissionMonsterSprites
      address:
        EU: 0x2349FF8
        NA: 0x23493F8
        JP: 0x234A720
      description: |-
        Loads the sprites of monsters that appear on the current floor because of a mission, if applicable.
        
        This includes monsters to be rescued, outlaws and its minions.
        
        No params.
    - name: MissionTargetEnemyIsDefeated
      address:
        EU: 0x234A070
        NA: 0x2349470
        JP: 0x234A798
      description: |-
        Checks if the target enemy of the mission on the current floor has been defeated.
        
        return: bool
    - name: SetMissionTargetEnemyDefeated
      address:
        EU: 0x234A090
        NA: 0x2349490
        JP: 0x234A7B8
      description: |-
        Set the flag for whether or not the target enemy of the current mission has been defeated.
        
        r0: new flag value
    - name: IsDestinationFloorWithFixedRoom
      address:
        EU: 0x234A0A4
        NA: 0x23494A4
        JP: 0x234A7CC
      description: |-
        Checks if the current floor is a mission destination floor with a fixed room.
        
        The entire floor can be a fixed room layout, or it can just contain a Sealed Chamber.
        
        return: bool
    - name: GetItemToRetrieve
      address:
        EU: 0x234A0CC
        NA: 0x23494CC
        JP: 0x234A7F4
      description: |-
        Get the ID of the item that needs to be retrieve on the current floor for a mission, if one exists.
        
        return: item ID
    - name: GetItemToDeliver
      address:
        EU: 0x234A0F0
        NA: 0x23494F0
        JP: 0x234A818
      description: |-
        Get the ID of the item that needs to be delivered to a mission client on the current floor, if one exists.
        
        return: item ID
    - name: GetSpecialTargetItem
      address:
        EU: 0x234A11C
        NA: 0x234951C
        JP: 0x234A844
      description: |-
        Get the ID of the special target item for a Sealed Chamber or Treasure Memo mission on the current floor.
        
        return: item ID
    - name: IsDestinationFloorWithItem
      address:
        EU: 0x234A164
        NA: 0x2349564
        JP: 0x234A88C
      description: |-
        Checks if the current floor is a mission destination floor with a special item.
        
        This excludes missions involving taking an item from an outlaw.
        
        return: bool
    - name: IsDestinationFloorWithHiddenOutlaw
      address:
        EU: 0x234A1C4
        NA: 0x23495C4
        JP: 0x234A8EC
      description: |-
        Checks if the current floor is a mission destination floor with a "hidden outlaw" that behaves like a normal enemy.
        
        return: bool
    - name: IsDestinationFloorWithFleeingOutlaw
      address:
        EU: 0x234A1E8
        NA: 0x23495E8
        JP: 0x234A910
      description: |-
        Checks if the current floor is a mission destination floor with a "fleeing outlaw" that runs away.
        
        return: bool
    - name: GetMissionTargetEnemy
      address:
        EU: 0x234A220
        NA: 0x2349620
        JP: 0x234A948
      description: |-
        Get the monster ID of the target enemy to be defeated on the current floor for a mission, if one exists.
        
        return: monster ID
    - name: GetMissionEnemyMinionGroup
      address:
        EU: 0x234A238
        NA: 0x2349638
        JP: 0x234A960
      description: |-
        Get the monster ID of the specified minion group on the current floor for a mission, if it exists.
        
        Note that a single minion group can correspond to multiple actual minions of the same species. There can be up to 2 minion groups.
        
        r0: minion group index (0-indexed)
        return: monster ID
    - name: SetTargetMonsterNotFoundFlag
      address:
        EU: 0x234A2C4
        NA: 0x23496C4
        JP: 0x234A9EC
      description: |-
        Sets dungeon::target_monster_not_found_flag to the specified value.
        
        r0: Value to set the flag to
    - name: GetTargetMonsterNotFoundFlag
      address:
        EU: 0x234A2D8
        NA: 0x23496D8
        JP: 0x234AA00
      description: |-
        Gets the value of dungeon::target_monster_not_found_flag.
        
        return: dungeon::target_monster_not_found_flag
    - name: FloorHasMissionMonster
      address:
        EU: 0x234A348
        NA: 0x2349748
        JP: 0x234AA70
      description: |-
        Checks if a given floor is a mission destination with a special monster, either a target to rescue or an enemy to defeat.
        
        Mission types with a monster on the destination floor:
        - Rescue client
        - Rescue target
        - Escort to target
        - Deliver item
        - Search for target
        - Take item from outlaw
        - Arrest outlaw
        - Challenge Request
        
        r0: mission destination info pointer
        return: bool
    - name: GenerateMissionEggMonster
      address:
        EU: 0x234A4A0
        NA: 0x23498A0
        JP: 0x234AB90
      description: |-
        Generates the monster ID in the egg from the given mission. Uses the base form of the monster.
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: mission struct
    - name: LogMessageByIdWithPopupCheckParticipants
      address:
        EU: 0x234BE50
        NA: 0x234B250
        JP: 0x234C4C0
      description: |-
        Logs the appropriate message based on the participating entites; this function calls LogMessageByIdWithPopupCheckUserTarget is both the user and target pointers are non-null, otherwise it calls LogMessageByIdWithPopupCheckUser if the user pointer is non-null, otherwise doesn't log anything.
        
        This function also seems to set some global table entry to some value?
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
        r3: index into some table?
        stack[0]: value to set at the table index specified by r3?
    - name: LogMessageByIdWithPopupCheckUser
      address:
        EU: 0x234BEA4
        NA: 0x234B2A4
        JP: 0x234C514
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopupCheckUser
      address:
        EU: 0x234BEE4
        NA: 0x234B2E4
        JP: 0x234C554
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdQuiet
      address:
        EU: 0x234BF1C
        NA: 0x234B31C
        JP: 0x234C58C
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageQuiet
      address:
        EU: 0x234BF40
        NA: 0x234B340
        JP: 0x234C5B0
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdWithPopupCheckUserTarget
      address:
        EU: 0x234BF50
        NA: 0x234B350
        JP: 0x234C5C0
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageWithPopupCheckUserTarget
      address:
        EU: 0x234BFA4
        NA: 0x234B3A4
        JP: 0x234C614
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message string
    - name: LogMessageByIdQuietCheckUserTarget
      address:
        EU: 0x234BFF0
        NA: 0x234B3F0
        JP: 0x234C660
      description: |-
        Logs a message in the message log (but without a message popup), if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageByIdWithPopupCheckUserUnknown
      address:
        EU: 0x234C044
        NA: 0x234B444
        JP: 0x234C6B4
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted and some other unknown check.
        
        r0: user entity pointer
        r1: ?
        r2: message ID
    - name: LogMessageByIdWithPopup
      address:
        EU: 0x234C098
        NA: 0x234B498
        JP: 0x234C708
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopup
      address:
        EU: 0x234C0BC
        NA: 0x234B4BC
        JP: 0x234C72C
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessage
      address:
        EU: 0x234C108
        NA: 0x234B508
        JP: 0x234C778
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message string
        r2: bool, whether or not to present a message popup
    - name: LogMessageById
      address:
        EU: 0x234C314
        NA: 0x234B714
        JP: 0x234C984
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message ID
        r2: bool, whether or not to present a message popup
    - name: InitPortraitDungeon
      address:
        EU: 0x234C6C0
        NA: 0x234BAC0
        JP: 0x234CD24
      description: |-
        Initialize the portrait box structure for the given monster and expression
        
        r0: pointer the portrait box data structure to initialize
        r1: monster id
        r2: emotion id
    - name: OpenMessageLog
      address:
        EU: 0x234C75C
        NA: 0x234BB5C
        JP: 0x234CDC0
      description: |-
        Opens the message log window.
        
        r0: ?
        r1: ?
    - name: RunDungeonMode
      address:
        EU: 0x234CB28
        NA: 0x234BF28
        JP: 0x234D18C
      description: |-
        This appears to be the top-level function for running dungeon mode.
        
        It gets called by MainGame right after doing the dungeon fade transition, and once it exits, the dungeon results are processed.
        
        This function is presumably in charge of allocating the dungeon struct, setting it up, launching the dungeon engine, etc.
    - name: DisplayDungeonTip
      address:
        EU: 0x234DAF0
        NA: 0x234CEF0
        JP: 0x234E154
      description: |-
        Checks if a given dungeon tip should be displayed at the start of a floor and if so, displays it. Called up to 4 times at the start of each new floor, with a different r0 parameter each time.
        
        r0: Pointer to the message_tip struct of the message that should be displayed
        r1: True to log the message in the message log
    - name: SetBothScreensWindowColorToDefault
      address:
        EU: 0x234DB60
        NA: 0x234CF60
        JP: 0x234E1C4
      description: |-
        This changes the palettes of windows in both screens to an appropiate value depending on the playthrough
        If you're in a special episode, they turn green , otherwise, they turn blue or pink depending on your character's sex
        
        No params
    - name: GetPersonalityIndex
      address:
        EU: 0x234DBEC
        NA: 0x234CFEC
        JP: 0x234E250
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster pointer
        return: ?
    - name: DisplayMessage
      address:
        EU: 0x234DE58
        NA: 0x234D258
        JP: 0x234E4E4
      description: |-
        Displays a message in a dialogue box that optionally waits for player input before closing.
        
        r0: pointer to the structure representing the desired state of the portrait
        r1: ID of the string to display
        r2: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
    - name: DisplayMessage2
      address:
        EU: 0x234DEAC
        NA: 0x234D2AC
        JP: 0x234E538
      description: Very similar to DisplayMessage
    - name: YesNoMenu
      address:
        EU: 0x234E118
        NA: 0x234D518
        JP: 0x234E7A4
      description: |-
        Opens a menu where the user can choose "Yes" or "No" and waits for input before returning.
        
        r0: ?
        r1: ID of the string to display in the textbox
        r2: Option that the cursor will be on by default. 0 for "Yes", 1 for "No"
        r3: ?
        return: True if the user chooses "Yes", false if the user chooses "No"
    - name: DisplayMessageInternal
      address:
        EU: 0x234E190
        NA: 0x234D590
        JP: 0x234E81C
      description: |-
        Called by DisplayMessage. Seems to be the function that handles the display of the dialogue box. It won't return until all the characters have been written and after the player manually closes the dialogue box (if the corresponding parameter was set).
        
        r0: ID of the string to display
        r1: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
        r2: pointer to the structure representing the desired state of the portrait
        r3: ?
        stack[0]: ?
        stack[1]: ?
    - name: OpenMenu
      address:
        EU: 0x234E9F4
        NA: 0x234DDF4
        JP: 0x234F080
      description: |-
        Opens a menu. The menu to open depends on the specified parameter.
        
        It looks like the function takes a parameter in r0, but doesn't use it. r1 doesn't even get set when this function is called.
        
        r0: (?) Unused by the function. Seems to be 1 byte long.
        r1: (?) Unused by the function. Seems to be 1 byte long.
        r2: True to open the bag menu, false to open the main dungeon menu
    - name: OthersMenuLoop
      address:
        EU: 0x23503CC
        NA: 0x234F7C0
        JP: 0x2350A40
      description: |-
        Called on each frame while the in-dungeon "others" menu is open.
        
        It contains a switch to determine whether an option has been chosen or not and a second switch that determines what to do depending on which option was chosen.
        
        return: int (Actually, this is probably some sort of enum shared by all the MenuLoop functions)
    - name: OthersMenu
      address:
        EU: 0x2350630
        NA: 0x234FA24
        JP: 0x2350CA4
      description: |-
        Called when the in-dungeon "others" menu is open. Does not return until the menu is closed.
        
        return: Always 0
  data:
    - name: DUNGEON_STRUCT_SIZE
      address:
        EU:
          - 0x22DF3B8
          - 0x22DF3EC
        NA:
          - 0x22DEA78
          - 0x22DEAAC
      length:
        EU: 0x4
        NA: 0x4
      description: Size of the dungeon struct (0x2CB14)
    - name: MAX_HP_CAP
      address:
        EU:
          - 0x22E4780
          - 0x2312274
          - 0x2318EB4
        NA:
          - 0x22E3DD0
          - 0x230B7B8
          - 0x2311814
          - 0x2318454
          - 0x2324020
      length:
        EU: 0x4
        NA: 0x4
      description: The maximum amount of HP a monster can have (999).
    - name: OFFSET_OF_DUNGEON_FLOOR_PROPERTIES
      address:
        EU:
          - 0x22E83A8
          - 0x233BA4C
        NA:
          - 0x22E79F8
          - 0x233AE68
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the floor properties field in the dungeon struct (0x286B2)
    - name: SPAWN_RAND_MAX
      address:
        EU: 0x22E8800
        NA: 0x22E7E50
      length:
        EU: 0x4
        NA: 0x4
      description: "Equal to 10,000 (0x2710). Used as parameter for DungeonRandInt to generate the random number which determines the entity to spawn."
    - name: DUNGEON_PRNG_LCG_MULTIPLIER
      address:
        EU:
          - 0x22EB378
          - 0x22EB43C
        NA:
          - 0x22EA9C8
          - 0x22EAA8C
      length:
        EU: 0x4
        NA: 0x4
      description: "The multiplier shared by all of the dungeon PRNG's LCGs, 1566083941 (0x5D588B65)."
    - name: DUNGEON_PRNG_LCG_INCREMENT_SECONDARY
      address:
        EU: 0x22EB444
        NA: 0x22EAA94
      length:
        EU: 0x4
        NA: 0x4
      description: "The increment for the dungeon PRNG's secondary LCGs, 2531011 (0x269EC3). This happens to be the same increment that the Microsoft Visual C++ runtime library uses in its implementation of the rand() function."
    - name: KECLEON_FEMALE_ID
      address:
        EU: 0x22F7DBC
        NA: 0x22F7404
        JP: 0x22F89CC
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "0x3D7 (983). Used when spawning Kecleon on an even numbered floor."
    - name: KECLEON_MALE_ID
      address:
        EU: 0x22F7DC0
        NA: 0x22F7408
        JP: 0x22F89D0
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "0x17F (383). Used when spawning Kecleon on an odd numbered floor."
    - name: MSG_ID_SLOW_START
      address:
        EU: 0x22F9CDC
        NA: 0x22F92D0
      length:
        EU: 0x4
        NA: 0x4
      description: ID of the message printed when a monster has the ability Slow Start at the beginning of the floor.
    - name: EXPERIENCE_POINT_GAIN_CAP
      address:
        EU: 0x23030F4
        NA: 0x23026C8
      length:
        EU: 0x4
        NA: 0x4
      description: A cap on the experience that can be given to a monster in one call to AddExpSpecial
    - name: JUDGMENT_MOVE_ID
      address:
        EU: 0x230CECC
        NA: 0x230C458
        JP: 0x230D9A8
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Move ID for Judgment (0x1D3)
        
        type: enum move_id
    - name: REGULAR_ATTACK_MOVE_ID
      address:
        EU: 0x230CED0
        NA: 0x230C45C
        JP: 0x230D9AC
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Move ID for the regular attack (0x163)
        
        type: enum move_id
    - name: DEOXYS_ATTACK_ID
      address:
        EU: 0x230CED4
        NA: 0x230C460
        JP: 0x230D9B0
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Monster ID for Deoxys in Attack Forme (0x1A3)
        
        type: enum monster_id
    - name: DEOXYS_SPEED_ID
      address:
        EU: 0x230CED8
        NA: 0x230C464
        JP: 0x230D9B4
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Monster ID for Deoxys in Speed Forme (0x1A5)
        
        type: enum monster_id
    - name: GIRATINA_ALTERED_ID
      address:
        EU: 0x230CEDC
        NA: 0x230C468
        JP: 0x230D9B8
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Monster ID for Giratina in Altered Forme (0x211)
        
        type: enum monster_id
    - name: PUNISHMENT_MOVE_ID
      address:
        EU: 0x230CEE0
        NA: 0x230C46C
        JP: 0x230D9BC
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        Move ID for Punishment (0x1BD)
        
        type: enum move_id
    - name: OFFENSE_STAT_MAX
      address:
        EU: 0x230CF10
        NA: 0x230C49C
      length:
        EU: 0x4
        NA: 0x4
      description: "Cap on an attacker's modified offense (attack or special attack) stat after boosts. Used during damage calculation."
    - name: PROJECTILE_MOVE_ID
      address:
        EU:
          - 0x230DAF0
          - 0x231D160
        NA:
          - 0x230D07C
          - 0x231C700
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        The move ID of the special "projectile" move (0x195)
        
        type: enum move_id
    - name: BELLY_LOST_PER_TURN
      address:
        EU: 0x23114D0
        NA: 0x2310A70
        JP: 0x2311F98
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        The base value by which belly is decreased every turn.
        
        Its raw value is 0x199A, which encodes a binary fixed-point number (16 fraction bits) with value (0x199A * 2^-16), and is the closest approximation to 0.1 representable in this number format.
    - name: MONSTER_HEAL_HP_MAX
      address:
        NA: 0x23152E0
      length:
        NA: 0x4
      description: The maximum amount of HP a monster can have (999).
    - name: MOVE_TARGET_AND_RANGE_SPECIAL_USER_HEALING
      address:
        EU: 0x231B794
        NA: 0x231AD34
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        The move target and range code for special healing moves that target just the user (0x273).
        
        type: struct move_target_and_range (+ padding)
    - name: PLAIN_SEED_STRING_ID
      address:
        EU: 0x231D1A8
        NA: 0x231C748
      length:
        EU: 0x4
        NA: 0x4
      description: The string ID for eating a Plain Seed (0xBE9).
    - name: MAX_ELIXIR_PP_RESTORATION
      address:
        EU: 0x231D1AC
        NA: 0x231C74C
      length:
        EU: 0x4
        NA: 0x4
      description: The amount of PP restored per move by ingesting a Max Elixir (0x3E7).
    - name: SLIP_SEED_FAIL_STRING_ID
      address:
        EU: 0x231D614
        NA: 0x231CBAC
      length:
        EU: 0x4
        NA: 0x4
      description: The string ID for when eating the Slip Seed fails (0xC75).
    - name: ROCK_WRECKER_MOVE_ID
      address:
        NA: 0x23245A0
      length:
        NA: 0x4
      description: The move ID for Rock Wrecker (453).
    - name: CASTFORM_NORMAL_FORM_MALE_ID
      address:
        EU: 0x2335E78
        NA: 0x2335438
        JP: 0x2336824
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "Castform's male normal form ID (0x17B)"
    - name: CASTFORM_NORMAL_FORM_FEMALE_ID
      address:
        EU: 0x2335E7C
        NA: 0x233543C
        JP: 0x2336828
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "Castform's female normal form ID (0x3D3)"
    - name: CHERRIM_SUNSHINE_FORM_MALE_ID
      address:
        EU: 0x2335E80
        NA: 0x2335440
        JP: 0x233682C
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "Cherrim's male sunshine form ID (0x1CD)"
    - name: CHERRIM_OVERCAST_FORM_FEMALE_ID
      address:
        EU: 0x2335E84
        NA: 0x2335444
        JP: 0x2336830
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "Cherrim's female overcast form ID (0x424)"
    - name: CHERRIM_SUNSHINE_FORM_FEMALE_ID
      address:
        EU: 0x2335E88
        NA: 0x2335448
        JP: 0x2336834
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: "Cherrim's female sunshine form ID (0x425)"
    - name: FLOOR_GENERATION_STATUS_PTR
      address:
        EU:
          - 0x233BA50
          - 0x233BAEC
          - 0x233BD70
          - 0x233C1FC
          - 0x233C65C
          - 0x233C7BC
          - 0x233C954
          - 0x233CB10
          - 0x233CEF0
          - 0x233D350
          - 0x233DB64
          - 0x233DCE4
          - 0x233DEF4
          - 0x233E254
          - 0x233EC3C
          - 0x2340B74
          - 0x2340E00
          - 0x23412B4
          - 0x2342040
          - 0x2342348
          - 0x2342D5C
          - 0x23430F4
          - 0x23433C4
          - 0x2343758
          - 0x2343848
          - 0x234397C
          - 0x2343B0C
        NA:
          - 0x233AE6C
          - 0x233AF08
          - 0x233B18C
          - 0x233B618
          - 0x233BA78
          - 0x233BBD8
          - 0x233BD70
          - 0x233BF2C
          - 0x233C30C
          - 0x233C76C
          - 0x233CF80
          - 0x233D100
          - 0x233D310
          - 0x233D670
          - 0x233E058
          - 0x233FF90
          - 0x234021C
          - 0x23406D0
          - 0x234145C
          - 0x2341764
          - 0x2342178
          - 0x2342510
          - 0x23427E0
          - 0x2342B74
          - 0x2342C64
          - 0x2342D98
          - 0x2342F28
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Pointer to the global FLOOR_GENERATION_STATUS
        
        type: struct floor_generation_status*
    - name: OFFSET_OF_DUNGEON_N_NORMAL_ITEM_SPAWNS
      address:
        EU:
          - 0x233BA58
          - 0x2342048
        NA:
          - 0x233AE74
          - 0x2341464
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the (number of base items + 1) field on the dungeon struct (0x12AFA)
    - name: DUNGEON_GRID_COLUMN_BYTES
      address:
        EU:
          - 0x233C1F8
          - 0x233C658
          - 0x233C950
          - 0x233CB0C
          - 0x233CEEC
          - 0x233D354
          - 0x233D5C8
          - 0x233DB5C
          - 0x233DCE0
          - 0x233DEF8
          - 0x233E250
          - 0x233EC38
          - 0x233F01C
          - 0x233F914
          - 0x233FCF8
          - 0x23404E0
          - 0x2340B78
          - 0x2340E04
          - 0x2341038
          - 0x23430B0
        NA:
          - 0x233B614
          - 0x233BA74
          - 0x233BD6C
          - 0x233BF28
          - 0x233C308
          - 0x233C770
          - 0x233C9E4
          - 0x233CF78
          - 0x233D0FC
          - 0x233D314
          - 0x233D66C
          - 0x233E054
          - 0x233E438
          - 0x233ED30
          - 0x233F114
          - 0x233F8FC
          - 0x233FF94
          - 0x2340220
          - 0x2340454
          - 0x23424CC
      length:
        EU: 0x4
        NA: 0x4
      description: "The number of bytes in one column of the dungeon grid cell array, 450, which corresponds to a column of 15 grid cells."
    - name: DEFAULT_MAX_POSITION
      address:
        EU: 0x2340B7C
        NA: 0x233FF98
      length:
        EU: 0x4
        NA: 0x4
      description: A large number (9999) to use as a default position for keeping track of min/max position values
    - name: OFFSET_OF_DUNGEON_GUARANTEED_ITEM_ID
      address:
        EU:
          - 0x2342044
          - 0x2345A64
        NA:
          - 0x2341460
          - 0x2344E80
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the guaranteed item ID field in the dungeon struct (0x2C9E8)
    - name: FIXED_ROOM_TILE_SPAWN_TABLE
      address:
        EU: 0x23509DC
        NA: 0x234FDD0
        JP: 0x2351050
      length:
        EU: 0x2C
        NA: 0x2C
        JP: 0x2C
      description: |-
        Table of tiles that can spawn in fixed rooms, pointed into by the FIXED_ROOM_TILE_SPAWN_TABLE.
        
        This is an array of 11 4-byte entries containing info about one tile each. Info includes the trap ID if a trap, room ID, and flags.
        
        type: struct fixed_room_tile_spawn_entry[11]
    - name: TREASURE_BOX_1_ITEM_IDS
      address:
        EU: 0x2350A08
        NA: 0x234FDFC
        JP: 0x235107C
      length:
        EU: 0x18
        NA: 0x18
        JP: 0x18
      description: |-
        Item IDs for variant 1 of each of the treasure box items (ITEM_*_BOX_1).
        
        type: struct item_id_16[12]
    - name: FIXED_ROOM_REVISIT_OVERRIDES
      address:
        EU: 0x2350A20
        NA: 0x234FE14
        JP: 0x2351094
      length:
        EU: 0x100
        NA: 0x100
        JP: 0x100
      description: |-
        Table of fixed room IDs, which if nonzero, overrides the normal fixed room ID for a floor (which is used to index the table) if the dungeon has already been cleared previously.
        
        Overrides are used to substitute different fixed room data for things like revisits to story dungeons.
        
        type: struct fixed_room_id_8[256]
    - name: FIXED_ROOM_MONSTER_SPAWN_TABLE
      address:
        EU: 0x2350B20
        NA: 0x234FF14
        JP: 0x2351194
      length:
        EU: 0x1E0
        NA: 0x1E0
        JP: 0x1E0
      description: |-
        Table of monsters that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 120 4-byte entries containing info about one monster each. Info includes the monster ID, stats, and behavior type.
        
        type: struct fixed_room_monster_spawn_entry[120]
    - name: FIXED_ROOM_ITEM_SPAWN_TABLE
      address:
        EU: 0x2350D00
        NA: 0x23500F4
        JP: 0x2351374
      length:
        EU: 0x1F8
        NA: 0x1F8
        JP: 0x1F8
      description: |-
        Table of items that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 63 8-byte entries containing one item ID each.
        
        type: struct fixed_room_item_spawn_entry[63]
    - name: FIXED_ROOM_ENTITY_SPAWN_TABLE
      address:
        EU: 0x2350EF8
        NA: 0x23502EC
        JP: 0x235156C
      length:
        EU: 0xC9C
        NA: 0xC9C
        JP: 0xC9C
      description: |-
        Table of entities (items, monsters, tiles) that can spawn in fixed rooms, which is indexed into by the main data structure for each fixed room.
        
        This is an array of 269 entries. Each entry contains 3 pointers (one into FIXED_ROOM_ITEM_SPAWN_TABLE, one into FIXED_ROOM_MONSTER_SPAWN_TABLE, and one into FIXED_ROOM_TILE_SPAWN_TABLE), and represents the entities that can spawn on one specific tile in a fixed room.
        
        type: struct fixed_room_entity_spawn_entry[269]
    - name: STATUS_ICON_ARRAY_MUZZLED
      address:
        EU: 0x2351DC8
        NA: 0x23511BC
      length:
        EU: 0x10
        NA: 0x10
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::muzzled * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_MAGNET_RISE
      address:
        EU: 0x2351DD8
        NA: 0x23511CC
      length:
        EU: 0x10
        NA: 0x10
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::magnet_rise * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_MIRACLE_EYE
      address:
        EU: 0x2351DF8
        NA: 0x23511EC
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::miracle_eye * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_LEECH_SEED
      address:
        EU: 0x2351E08
        NA: 0x23511FC
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::leech_seed * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_LONG_TOSS
      address:
        EU: 0x2351E20
        NA: 0x2351214
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::long_toss * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BLINDED
      address:
        EU: 0x2351E78
        NA: 0x235126C
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::blinded * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BURN
      address:
        EU: 0x2351EA0
        NA: 0x2351294
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::burn * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_SURE_SHOT
      address:
        EU: 0x2351EC8
        NA: 0x23512BC
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::sure_shot * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_INVISIBLE
      address:
        EU: 0x2351EF0
        NA: 0x23512E4
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::invisible * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_SLEEP
      address:
        EU: 0x2351F18
        NA: 0x235130C
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::sleep * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_CURSE
      address:
        EU: 0x2351F48
        NA: 0x235133C
      length:
        EU: 0x38
        NA: 0x38
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::curse * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_FREEZE
      address:
        EU: 0x2351F80
        NA: 0x2351374
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::freeze * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_CRINGE
      address:
        EU: 0x2351FC0
        NA: 0x23513B4
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::cringe * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BIDE
      address:
        EU: 0x2352000
        NA: 0x23513F4
      length:
        EU: 0x70
        NA: 0x70
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::bide * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_REFLECT
      address:
        EU: 0x2352100
        NA: 0x23514F4
      length:
        EU: 0x90
        NA: 0x90
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::reflect * 8. See UpdateStatusIconFlags for details."
    - name: DIRECTIONS_XY
      address:
        EU: 0x2352328
        NA: 0x235171C
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        An array mapping each direction index to its x and y displacements.
        
        Directions start with 0=down and proceed counterclockwise (see enum direction_id). Displacements for x and y are interleaved and encoded as 2-byte signed integers. For example, the first two integers are [0, 1], which correspond to the x and y displacements for the "down" direction (positive y means down).
    - name: DISPLACEMENTS_WITHIN_2_LARGEST_FIRST
      address:
        NA: 0x23517DC
      length:
        NA: 0x68
      description: |-
        An array of displacement vectors with max norm <= 2, ordered in descending order by norm.
        
        The last element, (99, 99), is invalid and used as an end marker.
        
        type: position[26]
    - name: DISPLACEMENTS_WITHIN_2_SMALLEST_FIRST
      address:
        NA: 0x2351844
      length:
        NA: 0x68
      description: |-
        An array of displacement vectors with max norm <= 2, ordered in ascending order by norm.
        
        The last element, (99, 99), is invalid and used as an end marker.
        
        type: position[26]
    - name: DISPLACEMENTS_WITHIN_3
      address:
        NA: 0x23518AC
      length:
        NA: 0xC8
      description: |-
        An array of displacement vectors with max norm <= 3. The elements are vaguely in ascending order by norm, but not exactly.
        
        The last element, (99, 99), is invalid and used as an end marker.
        
        type: position[50]
    - name: ITEM_CATEGORY_ACTIONS
      address:
        EU: 0x2352C1C
        NA: 0x2352010
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        Action ID associated with each item category. Used by GetItemAction.
        
        Each entry is 2 bytes long.
    - name: FRACTIONAL_TURN_SEQUENCE
      address:
        EU: 0x2352EC2
        NA: 0x2352284
      length:
        EU: 0xFA
        NA: 0xFA
      description: |-
        Read by certain functions that are called by RunFractionalTurn to see if they should be executed.
        
        Array is accessed via a pointer added to some multiple of fractional_turn, so that if the resulting memory location is zero, the function returns.
    - name: BELLY_DRAIN_IN_WALLS_INT
      address:
        EU: 0x2353374
        NA: 0x2352768
        JP: 0x23539E8
      length:
        EU: 0x2
        NA: 0x2
        JP: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (integer part)
    - name: BELLY_DRAIN_IN_WALLS_THOUSANDTHS
      address:
        EU: 0x2353376
        NA: 0x235276A
        JP: 0x23539EA
      length:
        EU: 0x2
        NA: 0x2
        JP: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (fractional thousandths)
    - name: DAMAGE_MULTIPLIER_0_5
      address:
        NA: 0x235283C
      length:
        NA: 0x8
      description: "A generic damage multiplier of 0.5 used in various places, as a 64-bit fixed-point number with 16 fraction bits."
    - name: DAMAGE_MULTIPLIER_1_5
      address:
        NA: 0x2352844
      length:
        NA: 0x8
      description: "A generic damage multiplier of 1.5 used in various places, as a 64-bit fixed-point number with 16 fraction bits."
    - name: DAMAGE_MULTIPLIER_2
      address:
        NA: 0x235284C
      length:
        NA: 0x8
      description: "A generic damage multiplier of 2 used in various places, as a 64-bit fixed-point number with 16 fraction bits."
    - name: CLOUDY_DAMAGE_MULTIPLIER
      address:
        NA: 0x235285C
      length:
        NA: 0x8
      description: "The extra damage multiplier for non-Normal-type moves when the weather is Cloudy, as a 64-bit fixed-point number with 16 fraction bits (0.75)."
    - name: SOLID_ROCK_MULTIPLIER
      address:
        NA: 0x2352864
      length:
        NA: 0x8
      description: "The extra damage multiplier for super-effective moves when Solid Rock or Filter is active, as a 64-bit fixed-point number with 16 fraction bits (0.75)."
    - name: DAMAGE_FORMULA_MAX_BASE
      address:
        NA: 0x235286C
      length:
        NA: 0x8
      description: "The maximum value of the base damage formula (after DAMAGE_FORMULA_NON_TEAM_MEMBER_MODIFIER application, if relevant), as a 64-bit binary fixed-point number with 16 fraction bits (999)."
    - name: WONDER_GUARD_MULTIPLIER
      address:
        NA: 0x2352874
      length:
        NA: 0x8
      description: "The damage multiplier for moves affected by Wonder Guard, as a 64-bit fixed-point number with 16 fraction bits (0)."
    - name: DAMAGE_FORMULA_MIN_BASE
      address:
        NA: 0x235287C
      length:
        NA: 0x8
      description: "The minimum value of the base damage formula (after DAMAGE_FORMULA_NON_TEAM_MEMBER_MODIFIER application, if relevant), as a 64-bit binary fixed-point number with 16 fraction bits (1)."
    - name: TYPE_DAMAGE_NEGATING_EXCLUSIVE_ITEM_EFFECTS
      address:
        NA: 0x23528A4
      length:
        NA: 0xE0
      description: |-
        List of exclusive item effects that negate damage of a certain type, terminated by a TYPE_NEUTRAL entry.
        
        type: struct damage_negating_exclusive_eff_entry[28]
    - name: TWO_TURN_MOVES_AND_STATUSES
      address:
        EU: 0x23536B8
        NA: 0x2352AAC
      length:
        EU: 0x2C
        NA: 0x2C
      description: List that matches two-turn move IDs to their corresponding status ID. The last entry is null.
    - name: SPATK_STAT_IDX
      address:
        EU: 0x23536F4
        NA: 0x2352AE8
      length:
        EU: 0x4
        NA: 0x4
      description: "The index (1) of the special attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: ATK_STAT_IDX
      address:
        EU: 0x23536F8
        NA: 0x2352AEC
      length:
        EU: 0x4
        NA: 0x4
      description: "The index (0) of the attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: ROLLOUT_DAMAGE_MULT_TABLE
      address:
        NA: 0x2352AF0
      length:
        NA: 0x28
      description: |-
        A table of damage multipliers for each successive hit of Rollout/Ice Ball. Each entry is a binary fixed-point number with 8 fraction bits.
        
        type: int32_t[10]
    - name: MAP_COLOR_TABLE
      address:
        NA: 0x2352FD0
      length:
        NA: 0x24
      description: |-
        In order: white, black, red, green, blue, magenta, dark pink, chartreuse, light orange
        
        Note: unverified, ported from Irdkwia's notes
        
        type: struct rgba[9]
    - name: CORNER_CARDINAL_NEIGHBOR_IS_OPEN
      address:
        EU: 0x2353C24
        NA: 0x2353010
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        An array mapping each (corner index, neighbor direction index) to whether or not that neighbor is expected to be open floor.
        
        Corners start with 0=top-left and proceed clockwise. Directions are enumerated as with DIRECTIONS_XY. The array is indexed by i=(corner_index * N_DIRECTIONS + direction). An element of 1 (0) means that starting from the specified corner of a room, moving in the specified direction should lead to an open floor tile (non-open terrain like a wall).
        
        Note that this array is only used for the cardinal directions. The elements at odd indexes are unused and unconditionally set to 0.
        
        This array is used by the dungeon generation algorithm when generating room imperfections. See GenerateRoomImperfections.
    - name: GUMMI_LIKE_STRING_IDS
      address:
        NA: 0x23532D0
      length:
        NA: 0x8
      description: List that holds the message IDs for how much a monster liked a gummi in decreasing order.
    - name: GUMMI_IQ_STRING_IDS
      address:
        NA: 0x23532D0
      length:
        NA: 0xA
      description: "List that holds the message IDs for how much a monster's IQ was raised by in decreasing order."
    - name: DAMAGE_STRING_IDS
      address:
        NA: 0x2353330
      length:
        NA: 0x36
      description: List that matches the damage_message ID to their corresponding message ID. The null entry at 0xE in the middle is for hunger. The last entry is null.
    - name: DUNGEON_PTR
      address:
        EU: 0x2354138
        NA: 0x2353538
        JP: 0x23547B8
      length:
        EU: 0x4
        NA: 0x4
        JP: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "working copy" of DUNGEON_PTR_MASTER. The main dungeon engine uses this pointer (or rather pointers to this pointer) when actually running dungeon mode.
        
        type: struct dungeon*
    - name: DUNGEON_PTR_MASTER
      address:
        EU: 0x235413C
        NA: 0x235353C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "master copy" of the dungeon pointer. The game uses this pointer when doing low-level memory work (allocation, freeing, zeroing). The normal DUNGEON_PTR is used for most other dungeon mode work.
        
        type: struct dungeon*
    - name: LEADER_PTR
      address:
        EU: 0x235415C
        NA: 0x235355C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Pointer to the current leader of the team.
        
        type: struct entity*
    - name: DUNGEON_PRNG_STATE
      address:
        EU: 0x2354170
        NA: 0x2353570
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        [Runtime] The global PRNG state for dungeon mode, not including the current values in the secondary sequences.
        
        This struct holds state for the primary LCG, as well as the current configuration controlling which LCG to use when generating random numbers. See DungeonRand16Bit for more information on how the dungeon PRNG works.
        
        type: struct prng_state
    - name: DUNGEON_PRNG_STATE_SECONDARY_VALUES
      address:
        EU: 0x2354184
        NA: 0x2353584
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        [Runtime] An array of 5 integers corresponding to the last value generated for each secondary LCG sequence.
        
        Based on the assembly, this appears to be its own global array, separate from DUNGEON_PRNG_STATE.
    - name: LOADED_ATTACK_SPRITE_FILE_INDEX
      address:
        EU: 0x23541AC
      length:
        EU: 0x2
      description: |-
        [Runtime] The file index of the currently loaded attack sprite.
        
        type: uint16_t
    - name: LOADED_ATTACK_SPRITE_PACK_ID
      address:
        EU: 0x23541AE
      length:
        EU: 0x2
      description: |-
        [Runtime] The pack id of the currently loaded attack sprite. Should correspond to the id of m_attack.bin
        
        type: enum pack_file_id
    - name: EXCL_ITEM_EFFECTS_WEATHER_ATK_SPEED_BOOST
      address:
        EU: 0x23541B0
        NA: 0x23535B0
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that increase attack speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_MOVE_SPEED_BOOST
      address:
        EU: 0x23541B8
        NA: 0x23535B8
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that increase movement speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_NO_STATUS
      address:
        EU: 0x23541C0
        NA: 0x23535C0
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that grant status immunity with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_EVASION_BOOST
      address:
        EU: 0x2354310
        NA: 0x2353710
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that grant an evasion boost with certain weather conditions.
    - name: DEFAULT_TILE
      address:
        EU: 0x235433C
        NA: 0x2353724
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        The default tile struct.
        
        This is just a struct full of zeroes, but is used as a fallback in various places where a "default" tile is needed, such as when a grid index is out of range.
        
        type: struct tile
    - name: HIDDEN_STAIRS_SPAWN_BLOCKED
      address:
        EU: 0x23543A4
        NA: 0x235378C
      length:
        EU: 0x1
        NA: 0x1
      description: |-
        [Runtime] A flag for when Hidden Stairs could normally have spawned on the floor but didn't.
        
        This is set either when the Hidden Stairs just happen not to spawn by chance, or when the current floor is a rescue or mission destination floor.
        
        This appears to be part of a larger (8-byte?) struct. It seems like this value is at least followed by 3 bytes of padding and a 4-byte integer field.
    - name: FIXED_ROOM_DATA_PTR
      address:
        EU: 0x23543AC
        NA: 0x2353794
      length:
        EU: 0x4
        NA: 0x4
      description: "[Runtime] Pointer to decoded fixed room data loaded from the BALANCE/fixed.bin file."
