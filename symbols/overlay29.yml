overlay29:
  versions:
    - NA
    - EU
    - JP
  address:
    NA: 0x22DC240
    EU: 0x22DCB80
    JP: 0x22DD8E0
  length:
    NA: 0x77620
    EU: 0x77900
    JP: 0x77200
  description: |-
    The dungeon engine.
    
    This is the "main" overlay of dungeon mode. It controls most things that happen in a Mystery Dungeon, such as dungeon layout generation, dungeon menus, enemy AI, and generally just running each turn while within a dungeon.
  functions:
    - name: DungeonAlloc
      address:
        NA: 0x22DEA5C
        EU: 0x22DF39C
        JP: 0x22E00FC
      description: |-
        Allocates a new dungeon struct.
        
        This updates the master dungeon pointer and returns a copy of that pointer.
        
        return: pointer to a newly allocated dungeon struct
    - name: GetDungeonPtrMaster
      address:
        NA: 0x22DEA80
        EU: 0x22DF3C0
      description: |-
        Returns the master dungeon pointer (a global, see DUNGEON_PTR_MASTER).
        
        return: pointer to a newly allocated dungeon struct
    - name: DungeonZInit
      address:
        NA: 0x22DEA90
        EU: 0x22DF3D0
        JP: 0x22E0130
      description: |-
        Zero-initializes the dungeon struct pointed to by the master dungeon pointer.
        
        No params.
    - name: DungeonFree
      address:
        NA: 0x22DEAB0
        EU: 0x22DF3F0
      description: |-
        Frees the dungeons struct pointer to by the master dungeon pointer, and nullifies the pointer.
        
        No params.
    - name: InitializeDungeon
      address:
        NA: 0x22DEF38
        EU: 0x22DF878
        JP: 0x22E05D8
      description: Seems to initialize the dungeon struct from specified dungeon data.
    - name: EntityIsValid
      address:
        NA:
          - 0x22E0354
          - 0x22E1A1C
          - 0x22E32E8
          - 0x22E37B8
          - 0x22E95F4
          - 0x22EC608
          - 0x22ECDC0
          - 0x22EE348
          - 0x22EF7A0
          - 0x22F0590
          - 0x22F528C
          - 0x22F62A8
          - 0x22F7364
          - 0x22FC99C
          - 0x22FED98
          - 0x23000E4
          - 0x2302A38
          - 0x23047B8
          - 0x230558C
          - 0x2305C04
          - 0x2307EF8
          - 0x230827C
          - 0x2308FBC
          - 0x230E8F0
          - 0x230F008
          - 0x2311010
          - 0x23118B4
          - 0x2315118
          - 0x2318D34
          - 0x2318E4C
          - 0x2319F8C
          - 0x231B194
          - 0x231CBC8
          - 0x231EDD8
          - 0x231F570
          - 0x231FBFC
          - 0x232017C
          - 0x2320764
          - 0x2321438
          - 0x2325620
          - 0x232800C
          - 0x232A3D8
          - 0x232C500
          - 0x232E250
          - 0x232E840
          - 0x2333FAC
          - 0x23350D8
          - 0x2337CA8
          - 0x2344AF8
          - 0x2345698
          - 0x2347BA4
          - 0x234987C
          - 0x234DDD0
          - 0x234EC14
        EU:
          - 0x22E0C94
          - 0x22E235C
          - 0x22E2947
          - 0x22E3C98
          - 0x22E4168
          - 0x22E9FA4
          - 0x22ECFB8
          - 0x22ED770
          - 0x22EECF8
          - 0x22F0154
          - 0x22F0F44
          - 0x22F5C48
          - 0x22F6C60
          - 0x22F7D1C
          - 0x22FD398
          - 0x22FEEB8
          - 0x2300B10
          - 0x2303464
          - 0x23051E4
          - 0x2305FB8
          - 0x2306630
          - 0x2308924
          - 0x23099E8
          - 0x230F364
          - 0x230FA7C
          - 0x2311A70
          - 0x2312314
          - 0x2315B78
          - 0x2319794
          - 0x23198AC
          - 0x231A9EC
          - 0x231BBF4
          - 0x231D630
          - 0x231F840
          - 0x231FFD8
          - 0x2320664
          - 0x2320BE4
          - 0x23211CC
          - 0x2326088
          - 0x2328A78
          - 0x232AE44
          - 0x232CF70
          - 0x232EC90
          - 0x232F280
          - 0x23349EC
          - 0x2335B18
          - 0x2338878
          - 0x23456DC
          - 0x2346284
          - 0x23487A4
          - 0x234A47C
          - 0x234E9D0
          - 0x234F820
      description: |-
        Checks if an entity pointer points to a valid entity (not entity type 0, which represents no entity).
        
        r0: entity pointer
        return: bool
    - name: GetFloorType
      address:
        NA: 0x22E03B0
        EU: 0x22E0CF0
        JP: 0x22E1A48
      description: |-
        Get the current floor type.
        
        Floor types:
          0 appears to mean the current floor is "normal"
          1 appears to mean the current floor is a fixed floor
          2 means the current floor has a rescue point
        
        return: floor type
    - name: TryForcedLoss
      address:
        NA: 0x22E0620
        EU: 0x22E0F60
        JP: 0x22E1CAC
      description: |-
        Attempts to trigger a forced loss of the type specified in dungeon::forced_loss_reason.
        
        r0: if true, the function will not check for the end of the floor condition and will skip other (unknown) actions in case of forced loss.
        return: true if the forced loss happens, false otherwise
    - name: FixedRoomIsSubstituteRoom
      address:
        NA: 0x22E08CC
        EU: 0x22E120C
      description: |-
        Checks if the current fixed room is the "substitute room" (ID 0x6E).
        
        return: bool
    - name: ShouldGameOverOnImportantTeamMemberFaint
      address:
        NA: 0x22E0928
        EU: 0x22E1268
      description: |-
        Returns true if you should get kicked out of the dungeon if an important team member (like the partner or certain story allies) faints.
        
        return: dungeon::nonstory_flag || dungeon::hidden_land_flag
    - name: GetTileAtEntity
      address:
        NA: 0x22E1628
        EU: 0x22E1F68
        JP: 0x22E2CB8
      description: |-
        Returns a pointer to the tile where an entity is located.
        
        r0: pointer to entity
        returns: pointer to tile
    - name: SubstitutePlaceholderStringTags
      address:
        NA: 0x22E2AD8
        EU: 0x22E3418
        JP: 0x22E416C
      description: |-
        Replaces instances of a given placeholder tag by the string representation of the given entity.
        
        From the eos-move-effects docs (which are somewhat nebulous): "Replaces the string at StringID [r0] by the string representation of the target [r1] (aka its name). Any message with the string manipulator '[string:StringID]' will use that string".
        
        The game uses various placeholder tags in its strings, which you can read about here: https://textbox.skytemple.org/.
        
        r0: string ID (unclear what this means)
        r1: entity pointer
        r2: ?
    - name: UpdateMapSurveyorFlag
      address:
        NA: 0x22E2DD8
        EU: 0x22E375C
      description: |-
        Sets the Map Surveyor flag in the dungeon struct to true if a team member has Map Surveyor, sets it to false otherwise.
        
        This function has two variants: in the EU ROM, it will return true if the flag was changed. The NA version will return the new value of the flag instead.
        
        return: bool
    - name: ItemIsActive
      address:
        NA:
          - 0x22E330C
          - 0x22EE318
          - 0x22F5994
          - 0x22FF898
          - 0x23026CC
          - 0x2307F1C
          - 0x230A9DC
          - 0x230E578
          - 0x230F810
          - 0x2311034
          - 0x2311BF8
          - 0x231513C
          - 0x2347B50
        EU:
          - 0x22E3CBC
          - 0x22EECC8
          - 0x22F6350
          - 0x23002C4
          - 0x23030F8
          - 0x2308948
          - 0x230B450
          - 0x230EFEC
          - 0x2310284
          - 0x2311A94
          - 0x2312658
          - 0x2315B9C
          - 0x2348750
      description: |-
        Checks if a monster is holding a certain item that isn't disabled by Klutz.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: IsOnMonsterSpawnList
      address:
        NA: 0x22E7D4C
        EU: 0x22E86FC
      description: |-
        Returns true if the specified monster is included in the floor's monster spawn list (the modified list after a maximum of 14 different species were chosen, not the raw list read from the mappa file).
        
        r0: Monster ID
        return: bool
    - name: GetMonsterIdToSpawn
      address:
        NA: 0x22E7DA0
        EU: 0x22E8750
        JP: 0x22E9408
      description: |-
        Get the id of the monster to be randomly spawned.
        
        r0: the spawn weight to use (0 for normal, 1 for monster house)
        return: monster ID
    - name: GetMonsterLevelToSpawn
      address:
        NA: 0x22E7E58
        EU: 0x22E8808
        JP: 0x22E94C0
      description: |-
        Get the level of the monster to be spawned, given its id.
        
        r0: monster ID
        return: Level of the monster to be spawned, or 1 if the specified ID can't be found on the floor's spawn table.
    - name: GetLeader
      address:
        NA: 0x22E9580
        EU: 0x22E9F30
      description: |-
        Gets the pointer to the entity that is currently leading the team, or null if none of the first 4 entities is a valid monster with its is_team_leader flag set. It also sets LEADER_PTR to the result before returning it.
        
        return: Pointer to the current leader of the team or null if there's no valid leader.
    - name: TickStatusTurnCounter
      address:
        NA: 0x22E9A44
        EU: 0x22EA3F4
        JP: 0x22EB0AC
      description: |-
        Ticks down a turn counter for a status condition. If the counter equals 0x7F, it will not be decreased.
        
        r0: pointer to the status turn counter
        return: new counter value
    - name: GenerateDungeonRngSeed
      address:
        NA: 0x22EA980
        EU: 0x22EB330
        JP: 0x22EBFE8
      description: |-
        Generates a seed with which to initialize the dungeon PRNG.
        
        The seed is calculated by starting with a different seed, the "preseed" x0 (defaults to 1, but can be set by other functions). The preseed is iterated twice with the same recurrence relation used in the primary LCG to generate two pseudorandom 32-bit numbers x1 and x2. The output seed is then computed as
          seed = (x1 & 0xFF0000) | (x2 >> 0x10) | 1
        The value x1 is then saved as the new preseed.
        
        This method of seeding the dungeon PRNG appears to be used only sometimes, depending on certain flags in the data for a given dungeon.
        
        return: RNG seed
    - name: GetDungeonRngPreseed
      address:
        NA: 0x22EA9CC
        EU: 0x22EB37C
        JP: 0x22EC034
      description: |-
        Gets the current preseed stored in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        return: current dungeon RNG preseed
    - name: SetDungeonRngPreseed
      address:
        NA: 0x22EA9DC
        EU: 0x22EB38C
        JP: 0x22EC044
      description: |-
        Sets the preseed in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        r0: preseed
    - name: InitDungeonRng
      address:
        NA: 0x22EA9EC
        EU: 0x22EB39C
        JP: 0x22EC054
      description: |-
        Initialize (or reinitialize) the dungeon PRNG with a given seed. The primary LCG and the five secondary LCGs are initialized jointly, and with the same seed.
        
        r0: seed
    - name: DungeonRand16Bit
      address:
        NA: 0x22EAA20
        EU: 0x22EB3D0
        JP: 0x22EC088
      description: |-
        Computes a pseudorandom 16-bit integer using the dungeon PRNG.
        
        Note that the dungeon PRNG is only used in dungeon mode (as evidenced by these functions being in overlay 29). The game uses another lower-quality PRNG (see arm9.yml) for other needs.
        
        Random numbers are generated with a linear congruential generator (LCG). The game actually maintains 6 separate sequences that can be used for generation: a primary LCG and 5 secondary LCGs. The generator used depends on parameters set on the global PRNG state.
        
        All dungeon LCGs have a modulus of 2^32 and a multiplier of 1566083941 (see DUNGEON_PRNG_LCG_MULTIPLIER). The primary LCG uses an increment of 1, while the secondary LCGs use an increment of 2531011 (see DUNGEON_PRNG_LCG_INCREMENT_SECONDARY). So, for example, the primary LCG uses the recurrence relation:
          x = (1566083941*x_prev + 1) % 2^32
        
        Since the dungeon LCGs generate 32-bit integers rather than 16-bit, the primary LCG yields 16-bit values by taking the upper 16 bits of the computed 32-bit value. The secondary LCGs yield 16-bit values by taking the lower 16 bits of the computed 32-bit value.
        
        All of the dungeon LCGs have a hard-coded default seed of 1, but in practice the seed is set with a call to InitDungeonRng during dungeon initialization.
        
        return: pseudorandom int on the interval [0, 65535]
    - name: DungeonRandInt
      address:
        NA: 0x22EAA98
        EU: 0x22EB448
        JP: 0x22EC100
      description: |-
        Compute a pseudorandom integer under a given maximum value using the dungeon PRNG.
        
        r0: high
        return: pseudorandom integer on the interval [0, high - 1]
    - name: DungeonRandRange
      address:
        NA: 0x22EAAC0
        EU: 0x22EB470
        JP: 0x22EC128
      description: |-
        Compute a pseudorandom value between two integers using the dungeon PRNG.
        
        r0: x
        r1: y
        return: pseudorandom integer on the interval [min(x, y), max(x, y) - 1]
    - name: DungeonRandOutcome
      address:
        NA:
          - 0x22EAB20
          - 0x22EAB50
        EU:
          - 0x22EB4D0
          - 0x22EB500
      description: |-
        Returns the result of a possibly biased coin flip (a Bernoulli random variable) with some success probability p, using the dungeon PRNG.
        
        r0: success percentage (100*p)
        return: true with probability p, false with probability (1-p)
    - name: CalcStatusDuration
      address:
        NA: 0x22EAB80
        EU: 0x22EB530
        JP: 0x22EC1E8
      description: |-
        Seems to calculate the duration of a volatile status on a monster.
        
        r0: entity pointer
        r1: pointer to a turn range (an array of two shorts {lower, higher})
        r2: flag for whether or not to factor in the Self Curer IQ skill and the Natural Cure ability
        return: number of turns for the status condition
    - name: DungeonRngUnsetSecondary
      address:
        NA: 0x22EAC34
        EU: 0x22EB5E4
        JP: 0x22EC29C
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation, and also resets the secondary LCG index back to 0.
        
        Similar to DungeonRngSetPrimary, but DungeonRngSetPrimary doesn't modify the secondary LCG index if it was already set to something other than 0.
        
        No params.
    - name: DungeonRngSetSecondary
      address:
        NA: 0x22EAC4C
        EU: 0x22EB5FC
        JP: 0x22EC2B4
      description: |-
        Sets the dungeon PRNG to use one of the 5 secondary LCGs for subsequent random number generation.
        
        r0: secondary LCG index
    - name: DungeonRngSetPrimary
      address:
        NA: 0x22EAC64
        EU: 0x22EB614
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation.
        
        No params.
    - name: TrySwitchPlace
      address:
        NA: 0x22EB178
        EU: 0x22EBB28
        JP: 0x22EC7E0
      description: |-
        The user entity attempts to switch places with the target entity (i.e. by the effect of the Switcher Orb). 
        
        The function checks for the Suction Cups ability for both the user and the target, and for the Mold Breaker ability on the user.
        
        r0: pointer to user entity
        r1: pointer to target entity
    - name: RunFractionalTurn
      address:
        NA: 0x22EBD08
        EU: 0x22EC6B8
        JP: 0x22ED370
      description: |-
        The main function which executes the actions that take place in a fractional turn. Called in a loop by InitializeDungeon while FloorIsOver returns false.
        
        r0: first loop flag (true when the function is first called during a floor)
    - name: TrySpawnMonsterAndActivatePlusMinus
      address:
        NA: 0x22EC6DC
        EU: 0x22ED08C
        JP: 0x22EDD44
      description: |-
        Called at the beginning of RunFractionalTurn. Executed only if FRACTIONAL_TURN_SEQUENCE[fractional_turn * 2] is not 0.
        
        First it calls TrySpawnMonsterAndTickSpawnCounter, then tries to activate the Plus and Minus abilities for both allies and enemies, and finally calls TryForcedLoss.
        
        No params.
    - name: FloorIsOver
      address:
        NA: 0x22EC7E8
        EU: 0x22ED198
        JP: 0x22EDE50
      description: |-
        Checks if the current floor should end, and updates dungeon::floor_loop_status if required.
        If the player has been defeated, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_LEADER_FAINTED.
        If dungeon::end_floor_flag is 1 or 2, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_NEXT_FLOOR.
        
        return: true if the current floor should end
    - name: SetForcedLossReason
      address:
        NA: 0x22ED008
        EU: 0x22ED9B8
      description: |-
        Sets dungeon::forced_loss_reason to the specified value
        
        r0: Forced loss reason
    - name: GetForcedLossReason
      address:
        NA: 0x22ED01C
        EU: 0x22ED9CC
      description: |-
        Returns dungeon::forced_loss_reason
        
        return: forced_loss_reason
    - name: ResetDamageDesc
      address:
        NA: 0x22F6E18
        EU: 0x22F77D0
        JP: 0x22F83FC
      description: |-
        Seems to zero some damage description struct, which is output by the damage calculation function.
        
        r0: damage description pointer
    - name: GetSpriteIndex
      address:
        NA: 0x22F7388
        EU: 0x22F7D40
      description: |-
        Gets the sprite index of the specified monster on this floor
        
        r0: Monster ID
        return: Sprite index of the specified monster ID
    - name: FloorNumberIsEven
      address:
        NA: 0x22F73B4
        EU: 0x22F7D6C
        JP: 0x22F897C
      description: |-
        Checks if the current dungeon floor number is even.
        
        Has a special check to return false for Labyrinth Cave B10F (the Gabite boss fight).
        
        return: bool
    - name: GetKecleonIdToSpawnByFloor
      address:
        NA: 0x22F73EC
        EU: 0x22F7DA4
        JP: 0x22F89B4
      description: |-
        If the current floor number is even, returns female Kecleon's id (0x3D7), otherwise returns male Kecleon's id (0x17F).
        
        return: monster ID
    - name: HandleFaint
      address:
        NA: 0x22F7F30
        EU: 0x22F8938
      description: |-
        Handles a fainted pokémon (reviving does not count as fainting).
        
        r0: Fainted entity
        r1: Faint reason (move ID or greater than the max move id for other causes)
        r2: Entity responsible of the fainting
    - name: TryActivateSlowStart
      address:
        NA: 0x22F923C
        EU: 0x22F9C48
        JP: 0x22FA800
      description: |-
        Runs a check over all monsters on the field for the ability Slow Start, and lowers the speed of those who have it.
        
        No params
    - name: TryActivateArtificialWeatherAbilities
      address:
        NA: 0x22F92D8
        EU: 0x22F9CE4
        JP: 0x22FA89C
      description: |-
        Runs a check over all monsters on the field for abilities that affect the weather and changes the floor's weather accordingly.
        
        No params
    - name: DefenderAbilityIsActive
      address:
        NA:
          - 0x22F96CC
          - 0x2301A0C
          - 0x230A940
          - 0x2311B94
          - 0x2322D64
          - 0x2328634
          - 0x2329F14
          - 0x232BDD0
          - 0x232DE20
          - 0x2332A0C
        EU:
          - 0x22FA0D8
          - 0x2302438
          - 0x230B3B4
          - 0x23125F4
          - 0x23237CC
          - 0x23290A0
          - 0x232A980
          - 0x232C840
          - 0x232E860
          - 0x233344C
      description: |-
        Checks if a defender has an active ability that isn't disabled by an attacker's Mold Breaker.
        
        There are two versions of this function, which share the same logic but have slightly different assembly. This is probably due to differences in compiler optimizations at different addresses.
        
        r0: attacker pointer
        r1: defender pointer
        r2: ability ID to check on the defender
        r3: flag for whether the attacker's ability is enabled
        return: bool
    - name: IsMonster
      address:
        NA:
          - 0x22F9720
          - 0x2301A60
          - 0x230A994
          - 0x230F980
          - 0x2318AB0
          - 0x231A9D4
          - 0x231B318
          - 0x2322DB8
          - 0x234D460
        EU:
          - 0x22FA12C
          - 0x230248C
          - 0x230B408
          - 0x23103F4
          - 0x2319510
          - 0x231B434
          - 0x231BD78
          - 0x2323820
          - 0x234E060
      description: |-
        Checks if an entity is a monster (entity type 1).
        
        r0: entity pointer
        return: bool
    - name: TryActivateTruant
      address:
        NA: 0x22F97F0
        EU: 0x22FA1FC
        JP: 0x22FADA8
      description: |-
        Checks if an entity has the ability Truant, and if so tries to apply the pause status to it.
        
        r0: pointer to entity
    - name: RestorePpAllMovesSetFlags
      address:
        NA: 0x22F9A74
        EU: 0x22FA480
      description: |-
        Restores PP for all moves, clears flags move::f_consume_2_pp, move::flags2_unk5 and move::flags2_unk7, and sets flag move::f_consume_pp.
        Called when a monster is revived.
        
        r0: pointer to entity whose moves will be restored
    - name: MewSpawnCheck
      address:
        NA: 0x22FA5F0
        EU: 0x22FAFFC
        JP: 0x22FBB98
      description: |-
        If the monster id parameter is 0x97 (Mew), returns false if either dungeon::mew_cannot_spawn or the second parameter are true.
        
        Called before spawning an enemy, appears to be checking if Mew can spawn on the current floor.
        
        r0: monster id
        r1: return false if the monster id is Mew
        return: bool
    - name: ExclusiveItemEffectIsActive
      address:
        NA:
          - 0x22FAC98
          - 0x22FFF28
          - 0x230A9B8
          - 0x230F8AC
          - 0x2311064
          - 0x23147EC
          - 0x23197A8
          - 0x231A87C
          - 0x2323918
          - 0x23329E8
          - 0x2347B80
          - 0x23482B0
        EU:
          - 0x22FB6A4
          - 0x2300954
          - 0x230B42C
          - 0x2310320
          - 0x2311AC4
          - 0x231524C
          - 0x231A208
          - 0x231B2DC
          - 0x2324380
          - 0x2333428
          - 0x2348780
          - 0x2348EB0
      description: |-
        Checks if a monster is a team member under the effects of a certain exclusive item effect.
        
        r0: entity pointer
        r1: exclusive item effect ID
        return: bool
    - name: GetTeamMemberWithIqSkill
      address:
        NA: 0x22FAFF8
        EU: 0x22FBA04
        JP: 0x22FC580
      description: |-
        Returns an entity pointer to the first team member which has the specified iq skill.
        
        r0: iq skill id
        return: pointer to entity
    - name: TeamMemberHasEnabledIqSkill
      address:
        NA: 0x22FB064
        EU: 0x22FBA70
        JP: 0x22FC5EC
      description: |-
        Returns true if any team member has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: TeamLeaderIqSkillIsEnabled
      address:
        NA: 0x22FB080
        EU: 0x22FBA8C
        JP: 0x22FC608
      description: |-
        Returns true the leader has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: HasLowHealth
      address:
        NA: 0x22FB610
        EU: 0x22FC01C
        JP: 0x22FCAE4
      description: |-
        Checks if the entity passed is a valid monster, and if it's at low health (below 25% rounded down)
        
        r0: entity pointer
        return: bool
    - name: IsSpecialStoryAlly
      address:
        NA: 0x22FBAD0
        EU: 0x22FC4CC
        JP: 0x22FCFA4
      description: |-
        Checks if a monster is a special story ally.
        
        This is a hard-coded check that looks at the monster's "Joined At" field. If the value is in the range [DUNGEON_JOINED_AT_BIDOOF, DUNGEON_DUMMY_0xE3], this check will return true.
        
        r0: monster pointer
        return: bool
    - name: IsExperienceLocked
      address:
        NA: 0x22FBAF0
        EU: 0x22FC4EC
        JP: 0x22FCFC4
      description: |-
        Checks if a monster does not gain experience.
        
        This basically just inverts IsSpecialStoryAlly, with the exception of also checking for the "Joined At" field being DUNGEON_CLIENT (is this set for mission clients?).
        
        r0: monster pointer
        return: bool
    - name: SpawnMonster
      address:
        NA: 0x22FD084
        EU: 0x22FDA80
        JP: 0x22FE478
      description: |-
        Spawns the given monster on a tile.
        
        r0: pointer to struct spawned_monster_data
        r1: if true, the monster cannot spawn asleep, otherwise it will randomly be asleep
        return: pointer to entity
    - name: CalcSpeedStage
      address:
        NA: 0x22FFDF4
        EU: 0x2300820
        JP: 0x2301224
      description: |-
        Calculates the speed stage of a monster from its speed up/down counters. The second parameter is the weight of each counter (how many stages it will add/remove), but appears to be always 1. 
        Takes modifiers into account (paralysis, snowy weather, Time Tripper). Deoxys-speed, Shaymin-sky and enemy Kecleon during a thief alert get a flat +1 always.
        
        The calculated speed stage is both returned and saved in the monster's statuses struct.
        
        r0: pointer to entity
        r1: speed counter weight
        return: speed stage
    - name: GetNumberOfAttacks
      address:
        NA: 0x22FFF5C
        EU: 0x2300988
        JP: 0x230138C
      description: |-
        Returns the number of attacks that a monster can do in one turn (1 or 2).
        
        Checks for the abilities Swift Swim, Chlorophyll, Unburden, and for exclusive items.
        
        r0: pointer to entity
        returns: int
    - name: SprintfStatic
      address:
        NA: 0x23002C8
        EU: 0x2300CF4
        JP: 0x23016D0
      description: |-
        Statically defined copy of sprintf(3) in overlay 29. See arm9.yml for more information.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: NoGastroAcidStatus
      address:
        NA: 0x2301CDC
        EU: 0x2302708
        JP: 0x2303234
      description: |-
        Checks if a monster does not have the Gastro Acid status.
        
        r0: entity pointer
        return: bool
    - name: AbilityIsActive
      address:
        NA: 0x2301D10
        EU: 0x230273C
        JP: 0x2303268
      description: |-
        Checks if a monster has a certain ability that isn't disabled by Gastro Acid.
        
        r0: entity pointer
        r1: ability ID
        return: bool
    - name: LevitateIsActive
      address:
        NA: 0x2301E18
        EU: 0x2302844
        JP: 0x2303368
      description: |-
        Checks if a monster is levitating (has the effect of Levitate and Gravity is not active).
        
        r0: pointer to entity
        return: bool
    - name: MonsterIsType
      address:
        NA: 0x2301E50
        EU: 0x230287C
        JP: 0x23033A0
      description: |-
        Checks if a monster is a given type.
        
        r0: entity pointer
        r1: type ID
        return: bool
    - name: IqSkillIsEnabled
      address:
        NA: 0x2301F80
        EU: 0x23029AC
        JP: 0x23034D0
      description: |-
        Checks if a monster has a certain IQ skill enabled.
        
        r0: entity pointer
        r1: IQ skill ID
        return: bool
    - name: GetMoveTypeForMonster
      address:
        NA: 0x230227C
        EU: 0x2302CA8
      description: |-
        Check the type of a move when used by a certain monster. Accounts for special cases such as Hidden Power, Weather Ball, the regular attack...
        
        r0: Entity pointer
        r1: Pointer to move data
        return: Type of the move
    - name: GetMovePower
      address:
        NA: 0x230231C
        EU: 0x2302D48
        JP: 0x230386C
      description: |-
        Gets the power of a move, factoring in Ginseng/Space Globe boosts.
        
        r0: user pointer
        r1: move pointer
        return: move power
    - name: AddExpSpecial
      address:
        NA: 0x230253C
        EU: 0x2302F68
        JP: 0x2303A8C
      description: |-
        Adds to a monster's experience points, subject to experience boosting effects.
        
        This function appears to be called only under special circumstances. Possibly when granting experience from damage (e.g., Joy Ribbon)?
        
        Interestingly, the parameter in r0 isn't actually used. This might be a compiler optimization to avoid shuffling registers, since this function might be called alongside lots of other functions that have both the attacker and defender as the first two arguments.
        
        r0: attacker pointer
        r1: defender pointer
        r2: base experience gain, before boosts
    - name: EnemyEvolution
      address:
        NA: 0x23026FC
        EU: 0x2303128
      description: |-
        Checks if the specified enemy should evolve because it just defeated an ally, and if so, attempts to evolve it.
        
        r0: Pointer to the enemy to check
    - name: EvolveMonster
      address:
        NA: 0x2303C7C
        EU: 0x23046A8
      description: |-
        Makes the specified monster evolve into the specified species.
        
        r0: Pointer to the entity to evolve
        r1: ?
        r2: Species to evolve into
    - name: GetSleepAnimationId
      address:
        NA: 0x2304AB4
        EU: 0x23054E0
        JP: 0x2306004
      description: |-
        Returns the animation id to be applied to a monster that has the sleep, napping, nightmare or bide status.
        
        Returns a different animation for sudowoodo and for monsters with infinite sleep turns (0x7F).
        
        r0: pointer to entity
        return: animation ID
    - name: EndFrozenClassStatus
      address:
        NA: 0x2306258
        EU: 0x2306C84
        JP: 0x23077A8
      description: |-
        Cures the target's freeze, shadow hold, ingrain, petrified, constriction or wrap (both as user and as target) status due to the action of the user.
        
        r0: pointer to user
        r1: pointer to target
        r2: if true, the event will be printed to the log
    - name: EndCringeClassStatus
      address:
        NA: 0x23063D4
        EU: 0x2306E00
        JP: 0x2307904
      description: |-
        Cures the target's cringe, confusion, cowering, pause, taunt, encore or infatuated status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: ApplyDamage
      address:
        NA: 0x2308FE0
        EU: 0x2309A0C
      description: |-
        Applies damage to a monster. Displays the damage animation, lowers its health and handles reviving if applicable.
        The EU version has some additional checks related to printing fainting messages under specific circumstances.
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Pointer to the damage_data struct that contains info about the damage to deal
        r3: ?
        stack[0]: ?
        stack[1]: Pointer to some struct. The first byte contains the ID of the move used.
        return: True if the target fainted (reviving does not count as fainting)
    - name: GetTypeMatchup
      address:
        NA: 0x230AC58
        EU: 0x230B6CC
        JP: 0x230C1D0
      description: |-
        Gets the type matchup for a given combat interaction.
        
        Note that the actual monster's types on the attacker and defender pointers are not used; the pointers are only used to check conditions. The actual type matchup table lookup is done solely using the attack and target type parameters.
        
        This factors in some conditional effects like exclusive items, statuses, etc. There's some weirdness with the Ghost type; see the comment for struct type_matchup_table.
        
        r0: attacker pointer
        r1: defender pointer
        r2: target type index (0 the target's first type, 1 for the target's second type)
        r3: attack type
        return: enum type_matchup
    - name: CalcDamage
      address:
        NA: 0x230BBAC
        EU: 0x230C620
      description: |-
        Probably the damage calculation function.
        
        r0: attacker pointer
        r1: defender pointer
        r2: attack type
        r3: attack power
        stack[0]: crit chance
        stack[1]: [output] struct containing info about the damage calculation
        stack[2]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[3]: move ID
        stack[4]: ?
    - name: CalcRecoilDamageFixed
      address:
        NA: 0x230D18C
        EU: 0x230DC00
        JP: 0x230E6CC
      description: |-
        Appears to calculate recoil damage to a monster.
        
        This function wraps CalcDamageFixed using the monster as both the attacker and the defender, after doing some basic checks (like if the monster is already at 0 HP) and applying a boost from the Reckless ability if applicable.
        
        r0: entity pointer
        r1: fixed damage
        r2: ?
        r3: [output] struct containing info about the damage calculation
        stack[0]: move ID (interestingly, this doesn't seem to be used by the function)
        stack[1]: attack type
        stack[2]: ?
        stack[3]: message type
        others: ?
    - name: CalcDamageFixed
      address:
        NA: 0x230D240
        EU: 0x230DCB4
        JP: 0x230E780
      description: |-
        Appears to calculate damage from a fixed-damage effect.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        r3: ?
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        stack[3]: ?
        stack[4]: message type
        others: ?
    - name: CalcDamageFixedNoCategory
      address:
        NA: 0x230D3A8
        EU: 0x230DE1C
        JP: 0x230E8E4
      description: |-
        A wrapper around CalcDamageFixed with the move category set to none.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        others: ?
    - name: CalcDamageFixedWrapper
      address:
        NA: 0x230D3F4
        EU: 0x230DE68
        JP: 0x230E930
      description: |-
        A wrapper around CalcDamageFixed.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        others: ?
    - name: ResetDamageCalcScratchSpace
      address:
        NA: 0x230D528
        EU: 0x230DF9C
        JP: 0x230EA64
      description: |-
        CalcDamage seems to use scratch space of some kind, which this function zeroes.
        
        No params.
    - name: TrySpawnMonsterAndTickSpawnCounter
      address:
        NA: 0x230E6BC
        EU: 0x230F130
        JP: 0x230FBF8
      description: |-
        First ticks up the spawn counter, and if it's equal or greater than the spawn cooldown, it will try to spawn an enemy if the number of enemies is below the spawn cap.
        
        If the spawn counter is greater than 900, it will instead perform the special spawn caused by the ability Illuminate.
        
        No params.
    - name: AuraBowIsActive
      address:
        NA: 0x230F6C8
        EU: 0x231013C
        JP: 0x2310C04
      description: |-
        Checks if a monster is holding an aura bow that isn't disabled by Klutz.
        
        r0: entity pointer
        return: bool
    - name: ExclusiveItemOffenseBoost
      address:
        NA: 0x230F778
        EU: 0x23101EC
      description: |-
        Gets the exclusive item boost for attack/special attack for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: ExclusiveItemDefenseBoost
      address:
        NA: 0x230F788
        EU: 0x23101FC
      description: |-
        Gets the exclusive item boost for defense/special defense for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: TickNoSlipCap
      address:
        NA: 0x230FB90
        EU: 0x2310604
        JP: 0x23110CC
      description: |-
        Checks if the entity is a team member and holds the No-Slip Cap, and if so attempts to make one item in the bag sticky.
        
        r0: pointer to entity
    - name: TickStatusAndHealthRegen
      address:
        NA: 0x2311088
        EU: 0x2311AE8
        JP: 0x23125B0
      description: |-
        Applies the natural HP regen effect by taking modifiers into account (Poison Heal, Heal Ribbon, weather-related regen). Then it ticks down counters for volatile status effects, and heals them if the counter reached zero.
        
        r0: pointer to entity
    - name: InflictSleepStatusSingle
      address:
        NA: 0x2311824
        EU: 0x2312284
        JP: 0x2312D3C
      description: |-
        This is called by TryInflictSleepStatus.
        
        r0: entity pointer
        r1: number of turns
    - name: TryInflictSleepStatus
      address:
        NA: 0x23118D8
        EU: 0x2312338
        JP: 0x2312DF0
      description: |-
        Inflicts the Sleep status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: TryInflictNightmareStatus
      address:
        NA: 0x2311C4C
        EU: 0x23126AC
        JP: 0x2313158
      description: |-
        Inflicts the Nightmare status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictNappingStatus
      address:
        NA: 0x2311D60
        EU: 0x23127C0
        JP: 0x2313268
      description: |-
        Inflicts the Napping status condition (from Rest) on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictYawningStatus
      address:
        NA: 0x2311E70
        EU: 0x23128D0
        JP: 0x2313374
      description: |-
        Inflicts the Yawning status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictSleeplessStatus
      address:
        NA: 0x2311F80
        EU: 0x23129E0
        JP: 0x2313484
      description: |-
        Inflicts the Sleepless status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictPausedStatus
      address:
        NA: 0x231206C
        EU: 0x2312ACC
        JP: 0x2313570
      description: |-
        Inflicts the Paused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: ?
        r3: number of turns
        stack[0]: flag to log a message on failure
        stack[1]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictInfatuatedStatus
      address:
        NA: 0x23121AC
        EU: 0x2312C0C
        JP: 0x23136B0
      description: |-
        Inflicts the Infatuated status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatus
      address:
        NA: 0x2312338
        EU: 0x2312D98
        JP: 0x2313838
      description: |-
        Inflicts the Burn status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to apply some special effect alongside the burn?
        r3: flag to log a message on failure
        stack[0]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatusWholeTeam
      address:
        NA: 0x2312618
        EU: 0x2313078
        JP: 0x2313B14
      description: |-
        Inflicts the Burn status condition on all team members if possible.
        
        No params.
    - name: TryInflictPoisonedStatus
      address:
        NA: 0x2312664
        EU: 0x23130C4
      description: |-
        Inflicts the Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBadlyPoisonedStatus
      address:
        NA: 0x231293C
        EU: 0x231339C
      description: |-
        Inflicts the Badly Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictFrozenStatus
      address:
        NA: 0x2312BF8
        EU: 0x2313658
        JP: 0x23140EC
      description: |-
        Inflicts the Frozen status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
    - name: TryInflictConstrictionStatus
      address:
        NA: 0x2312E20
        EU: 0x2313880
        JP: 0x2314310
      description: |-
        Inflicts the Constriction status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: animation ID
        r3: flag to log a message on failure
    - name: TryInflictShadowHoldStatus
      address:
        NA: 0x2312F78
        EU: 0x23139D8
        JP: 0x2314468
      description: |-
        Inflicts the Shadow Hold (AKA Immobilized) status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
    - name: TryInflictIngrainStatus
      address:
        NA: 0x2313130
        EU: 0x2313B90
        JP: 0x231461C
      description: |-
        Inflicts the Ingrain status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictWrappedStatus
      address:
        NA: 0x23131F4
        EU: 0x2313C54
        JP: 0x23146E0
      description: |-
        Inflicts the Wrapped status condition on a target monster if possible.
        
        This also gives the user the Wrap status (Wrapped around foe).
        
        r0: user entity pointer
        r1: target entity pointer
    - name: FreeOtherWrappedMonsters
      address:
        NA: 0x23133F0
        EU: 0x2313E50
        JP: 0x23148DC
      description: |-
        Frees from the wrap status all monsters which are wrapped by/around the monster passed as parameter.
        
        r0: pointer to entity
    - name: TryInflictPetrifiedStatus
      address:
        NA: 0x231346C
        EU: 0x2313ECC
        JP: 0x2314958
      description: |-
        Inflicts the Petrified status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: LowerOffensiveStat
      address:
        NA: 0x23135FC
        EU: 0x231405C
      description: |-
        Lowers the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: ?
        stack[1]: ?
    - name: LowerDefensiveStat
      address:
        NA: 0x2313814
        EU: 0x2314274
        JP: 0x2314CFC
      description: |-
        Lowers the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: ?
        stack[1]: ?
    - name: BoostOffensiveStat
      address:
        NA: 0x231399C
        EU: 0x23143FC
        JP: 0x2314E84
      description: |-
        Boosts the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: BoostDefensiveStat
      address:
        NA: 0x2313B08
        EU: 0x2314568
        JP: 0x2314FF0
      description: |-
        Boosts the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: ApplyOffensiveStatMultiplier
      address:
        NA: 0x2313D40
        EU: 0x23147A0
      description: |-
        Applies a multiplier to the specified offensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::offensive_multipliers, for moves like Charm and Memento.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: ApplyDefensiveStatMultiplier
      address:
        NA: 0x2313F64
        EU: 0x23149C4
        JP: 0x2315444
      description: |-
        Applies a multiplier to the specified defensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::defensive_multipliers, for moves like Screech.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: BoostHitChanceStat
      address:
        NA: 0x23140E4
        EU: 0x2314B44
        JP: 0x23155C4
      description: |-
        Boosts the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
    - name: LowerHitChanceStat
      address:
        NA: 0x231422C
        EU: 0x2314C8C
        JP: 0x231570C
      description: |-
        Lowers the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ?
    - name: TryInflictCringeStatus
      address:
        NA: 0x23143E8
        EU: 0x2314E48
        JP: 0x23158C4
      description: |-
        Inflicts the Cringe status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictParalysisStatus
      address:
        NA: 0x2314544
        EU: 0x2314FA4
        JP: 0x2315A1C
      description: |-
        Inflicts the Paralysis status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: BoostSpeed
      address:
        NA: 0x2314810
        EU: 0x2315270
        JP: 0x2315CE4
      description: |-
        Boosts the speed of the target monster.
        
        If the number of turns specified is 0, a random turn count will be selected using the default SPEED_BOOST_DURATION_RANGE.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: number of turns
        stack[0]: flag to log a message on failure
    - name: BoostSpeedOneStage
      address:
        NA: 0x231493C
        EU: 0x231539C
        JP: 0x2315E10
      description: |-
        A wrapper around BoostSpeed with the number of stages set to 1.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: LowerSpeed
      address:
        NA: 0x2314954
        EU: 0x23153B4
        JP: 0x2315E28
      description: |-
        Lowers the speed of the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: flag to log a message on failure
    - name: TrySealMove
      address:
        NA: 0x2314ABC
        EU: 0x231551C
        JP: 0x2315F90
      description: |-
        Seals one of the target monster's moves. The move to be sealed is randomly selected.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        return: Whether or not a move was sealed
    - name: BoostOrLowerSpeed
      address:
        NA: 0x2314C2C
        EU: 0x231568C
        JP: 0x2316100
      description: |-
        Randomly boosts or lowers the speed of the target monster by one stage with equal probability.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ResetHitChanceStat
      address:
        NA: 0x2314C8C
        EU: 0x23156EC
        JP: 0x2316160
      description: |-
        Resets the specified hit chance stat (accuracy or evasion) back to normal on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ?
    - name: TryActivateQuickFeet
      address:
        NA: 0x2314E1C
        EU: 0x231587C
        JP: 0x23162F0
      description: |-
        Activate the Quick Feet ability on the defender, if the monster has it and it's active.
        
        r0: attacker pointer
        r1: defender pointer
        return: bool, whether or not the ability was activated
    - name: TryInflictConfusedStatus
      address:
        NA: 0x2314F38
        EU: 0x2315998
        JP: 0x2316410
      description: |-
        Inflicts the Confused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictCoweringStatus
      address:
        NA: 0x231516C
        EU: 0x2315CCC
        JP: 0x2316744
      description: |-
        Inflicts the Cowering status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryIncreaseHp
      address:
        NA: 0x23152E4
        EU: 0x2315D44
        JP: 0x23167BC
      description: |-
        Restore HP and possibly boost max HP of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: HP to restore
        r3: max HP boost
        stack[0]: flag to log a message on failure
        return: Success flag
    - name: TryInflictLeechSeedStatus
      address:
        NA: 0x23157EC
        EU: 0x231624C
        JP: 0x2316CC4
      description: |-
        Inflicts the Leech Seed status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictDestinyBond
      address:
        NA: 0x2315A50
        EU: 0x23164B0
        JP: 0x2316F28
      description: |-
        Inflicts the Destiny Bond status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: IsBlinded
      address:
        NA: 0x23177E4
        EU: 0x2318244
        JP: 0x2318CB4
      description: |-
        Returns true if the monster has the blinded status (see statuses::blinded), or if it is not the leader and is holding Y-Ray Specs.
        
        r0: pointer to entity
        r1: flag for whether to check for the held item
        return: bool
    - name: RestoreMovePP
      address:
        NA: 0x2317C20
        EU: 0x2318680
        JP: 0x23190F0
      description: |-
        Restores the PP of all the target's moves by the specified amount.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: PP to restore
        r3: flag to suppress message logging
    - name: SetReflectDamageCountdownTo4
      address:
        NA: 0x23183C0
        EU: 0x2318E20
        JP: 0x2319890
      description: |-
        Sets the monster's reflect damage countdown to a global value (0x4).
        
        r0: pointer to entity
    - name: HasConditionalGroundImmunity
      address:
        NA: 0x2318A4C
        EU: 0x23194AC
        JP: 0x2319F1C
      description: |-
        Checks if a monster is currently immune to Ground-type moves for reasons other than typing and ability.
        
        This includes checks for Gravity and Magnet Rise.
        
        r0: entity pointer
        return: bool
    - name: Conversion2IsActive
      address:
        NA: 0x2319814
        EU: 0x231A274
        JP: 0x231ACE4
      description: |-
        Checks if the monster is under the effect of Conversion 2 (its type was changed).
        
        Returns 1 if the effects is a status, 2 if it comes from an exclusive item, 0 otherwise.
        
        r0: pointer to entity
        return: int
    - name: IsTargetInRange
      address:
        NA: 0x231A694
        EU: 0x231B0F4
        JP: 0x231BB64
      description: |-
        Returns true if the target is within range of the user's move, false otherwise.
        
        If the user does not have Course Checker, it simply checks if the distance between user and target is less or equal than the move range.
        Otherwise, it will iterate through all tiles in the direction specified, checking for walls or other monsters in the way, and return false if they are found.
        
        r0: user pointer
        r1: target pointer
        r2: direction ID
        r3: move range (in number of tiles)
    - name: GetEntityMoveTargetAndRange
      address:
        NA: 0x231ACAC
        EU: 0x231B70C
        JP: 0x231C17C
      description: |-
        Gets the move target-and-range field when used by a given entity. See struct move_target_and_range in the C headers.
        
        r0: entity pointer
        r1: move pointer
        r2: AI flag (same as GetMoveTargetAndRange)
        return: move target and range
    - name: ApplyItemEffect
      address:
        NA: 0x231B68C
        EU: 0x231C0EC
        JP: 0x231CB58
      description: |-
        Seems to apply an item's effect via a giant switch statement?
        
        r3: attacker pointer
        stack[0]: defender pointer
        stack[1]: thrown item pointer
        others: ?
    - name: ViolentSeedBoost
      address:
        NA: 0x231CE1C
        EU: 0x231D884
      description: |-
        Applies the Violent Seed boost to an entity.
        
        r0: attacker pointer
        r1: defender pointer
    - name: ApplyGummiBoosts
      address:
        NA: 0x231D0C0
        EU: 0x231DB28
        JP: 0x231E588
      description: |-
        Applies the IQ and possible stat boosts from eating a Gummi to the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: Gummi type ID
        r3: Stat boost amount, if a random stat boost occurs
    - name: GetMaxPpWrapper
      address:
        NA: 0x231E9F0
        EU: 0x231F458
        JP: 0x231FE9C
      description: |-
        Gets the maximum PP for a given move. A wrapper around the function in the ARM 9 binary.
        
        r0: move pointer
        return: max PP for the given move, capped at 99
    - name: MoveIsNotPhysical
      address:
        NA: 0x231EA18
        EU: 0x231F480
        JP: 0x231FEC4
      description: |-
        Checks if a move isn't a physical move.
        
        r0: move ID
        return: bool
    - name: TryPounce
      address:
        NA: 0x231FC20
        EU: 0x2320688
        JP: 0x23210CC
      description: |-
        Makes the target monster execute the Pounce action in a given direction if possible.
        
        If the direction ID is 8, the target will pounce in the direction it's currently facing.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryBlowAway
      address:
        NA: 0x231FDE0
        EU: 0x2320848
        JP: 0x232128C
      description: |-
        Blows away the target monster in a given direction if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryWarp
      address:
        NA: 0x2320D08
        EU: 0x2321770
        JP: 0x23221B4
      description: |-
        Makes the target monster warp if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: warp type
        r3: position (if warp type is position-based)
    - name: MoveHitCheck
      address:
        NA: 0x2323C48
        EU: 0x23246B0
      description: |-
        Determines if a move used hits or misses the target. It gets called twice per target, once with r3 = false and a second time with r3 = true.
        
        r0: Attacker
        r1: Defender
        r2: Pointer to move data
        r3: True if the move's first accuracy (accuracy1) should be used, false if its second accuracy (accuracy2) should be used instead.
        returns: True if the move hits, false if it misses.
    - name: DungeonRandOutcomeUserTargetInteraction
      address:
        NA: 0x2324934
        EU: 0x232539C
        JP: 0x2325DC4
      description: |-
        Like DungeonRandOutcome, but specifically for user-target interactions.
        
        This modifies the underlying random process depending on factors like Serene Grace, and whether or not either entity has fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: base success percentage (100*p). 0 is treated specially and guarantees success.
    - name: DungeonRandOutcomeUserAction
      address:
        NA: 0x2324A20
        EU: 0x2325488
        JP: 0x2325EAC
      description: |-
        Like DungeonRandOutcome, but specifically for user actions.
        
        This modifies the underlying random process to factor in Serene Grace (and checks whether the user is a valid entity).
        
        r0: entity pointer
        r1: base success percentage (100*p). 0 is treated specially and guarantees success.
    - name: UpdateMovePp
      address:
        NA: 0x2324D8C
        EU: 0x23257F4
        JP: 0x2326218
      description: |-
        Updates the PP of any moves that were used by a monster, if PP should be consumed.
        
        r0: entity pointer
        r1: flag for whether or not PP should be consumed
    - name: LowerSshort
      address:
        NA: 0x2324E64
        EU: 0x23258CC
        JP: 0x23262F0
      description: |-
        Gets the lower 2 bytes of a 4-byte number and interprets it as a signed short.
        
        r0: 4-byte number x
        return: (short)x
    - name: DealDamageWithRecoil
      address:
        NA: 0x2327F34
        EU: 0x23289A0
        JP: 0x23293BC
      description: |-
        Deals damage from a move or item used by an attacking monster on a defending monster, and also deals recoil damage to the attacker.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: bool, whether or not damage was dealt
    - name: ExecuteMoveEffect
      address:
        NA: 0x232E864
        EU: 0x232F2A4
      description: |-
        Handles the effects that happen after a move is used. Includes a loop that is run for each target, mutiple ability checks and the giant switch statement that executes the effect of the move used given its ID.
        
        r0: pointer to some struct
        r1: attacker pointer
        r2: pointer to move data
        r3: ?
        stack[0]: ?
    - name: DealDamage
      address:
        NA: 0x2332B20
        EU: 0x2333560
        JP: 0x2333F10
      description: |-
        Deals damage from a move or item used by an attacking monster on a defending monster.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[0]: item ID
        return: amount of damage dealt
    - name: CalcDamageProjectile
      address:
        NA: 0x2332C4C
        EU: 0x233368C
        JP: 0x233403C
      description: |-
        Appears to calculate damage from a variable-damage projectile.
        
        r0: entity pointer 1?
        r1: entity pointer 2?
        r2: move pointer
        r3: move power
        others: ?
    - name: CalcDamageFinal
      address:
        NA: 0x2332D6C
        EU: 0x23337AC
      description: |-
        Last function called by DealDamage to determine the final damage dealt by the move. The result of this call is the return value of DealDamage. 
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Move pointer
        r3: ?
        stack[0]: Pointer to some struct. The first byte contains the ID of the move used.
    - name: GetApparentWeather
      address:
        NA: 0x2334D08
        EU: 0x2335748
        JP: 0x23360F4
      description: |-
        Get the weather, as experienced by a specific entity.
        
        r0: entity pointer
        return: weather ID
    - name: TryWeatherFormChange
      address:
        NA: 0x2335170
        EU: 0x2335BB0
        JP: 0x233655C
      description: |-
        Tries to change a monster into one of its weather-related alternative forms. Applies to Castform and Cherrim, and checks for their unique abilities.
        
        r0: pointer to entity
    - name: GetTile
      address:
        NA: 0x23360FC
        EU: 0x2336CCC
        JP: 0x23374CC
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: GetTileSafe
      address:
        NA: 0x2336164
        EU: 0x2336D34
        JP: 0x2337534
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a pointer to a copy of the default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: GravityIsActive
      address:
        NA: 0x2338390
        EU: 0x2338F60
      description: |-
        Checks if gravity is active on the floor.
        
        return: bool
    - name: IsSecretBazaar
      address:
        NA: 0x23385C4
        EU: 0x2339194
      description: |-
        Checks if the current floor is the Secret Bazaar.
        
        return: bool
    - name: IsSecretRoom
      address:
        NA: 0x233865C
        EU: 0x233922C
      description: |-
        Checks if the current floor is the Secret Room fixed floor (from hidden stairs).
        
        return: bool
    - name: IsSecretFloor
      address:
        NA: 0x2338684
        EU: 0x2339254
        JP: 0x2339A48
      description: |-
        Checks if the current floor is a secret bazaar or a secret room.
        
        returns: bool
    - name: GetMinimapData
      address:
        NA: 0x2339118
        EU: 0x2339CE8
      description: |-
        Returns a pointer to the minimap_display_data struct in the dungeon struct.
        
        return: minimap_display_data*
    - name: SetMinimapDataE447
      address:
        NA: 0x233A218
        EU: 0x233ADE8
      description: |-
        Sets minimap_display_data::field_0xE447 to the specified value
        
        r0: Value to set the field to
    - name: SetMinimapDataE448
      address:
        NA: 0x233A230
        EU: 0x233AE14
      description: |-
        Sets minimap_display_data::field_0xE448 to the specified value
        
        r0: Value to set the field to
    - name: LoadFixedRoomDataVeneer
      address:
        NA: 0x233A624
        EU: 0x233B208
      description: |-
        Likely a linker-generated veneer for LoadFixedRoomData.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: IsNormalFloor
      address:
        NA: 0x233A654
        EU: 0x233B238
        JP: 0x233BA18
      description: |-
        Checks if the current floor is a normal layout.
        
        "Normal" means any layout that is NOT one of the following:
        - Hidden stairs floors
        - Golden Chamber
        - Challenge Request floor
        - Outlaw hideout
        - Treasure Memo floor
        - Full-room fixed floors (ID < 0xA5) [0xA5 == Sealed Chamber]
        
        return: bool
    - name: GenerateFloor
      address:
        NA: 0x233A6D8
        EU: 0x233B2BC
        JP: 0x233BA9C
      description: |-
        This is the master function that generates the dungeon floor.
        
        Very loosely speaking, this function first tries to generate a valid floor layout. Then it tries to spawn entities in a valid configuration. Finally, it performs cleanup and post-processing depending on the dungeon.
        
        If a spawn configuration is invalid, the entire floor layout is scrapped and regenerated. If the generated floor layout is invalid 10 times in a row, or a valid spawn configuration isn't generated within 10 attempts, the generation algorithm aborts and the default one-room Monster House floor is generated as a fallback.
        
        No params.
    - name: GetTileTerrain
      address:
        NA: 0x233AE78
        EU: 0x233BA5C
        JP: 0x233C23C
      description: |-
        Gets the terrain type of a tile.
        
        r0: tile pointer
        return: terrain ID
    - name: DungeonRand100
      address:
        NA: 0x233AE84
        EU: 0x233BA68
        JP: 0x233C248
      description: |-
        Compute a pseudorandom integer on the interval [0, 100) using the dungeon PRNG.
        
        return: pseudorandom integer
    - name: FlagHallwayJunctions
      address:
        NA: 0x233AF0C
        EU: 0x233BAF0
        JP: 0x233C2D0
      description: |-
        Sets the junction flag (bit 3 of the terrain flags) on any hallway junction tiles in some range [x0, x1), [y0, y1). This leaves tiles within rooms untouched.
        
        A hallway tile is considered a junction if it has at least 3 cardinal neighbors with open terrain.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
    - name: GenerateStandardFloor
      address:
        NA: 0x233B028
        EU: 0x233BC0C
        JP: 0x233C3EC
      description: |-
        Generate a standard floor with the given parameters.
        
        Broadly speaking, a standard floor is generated as follows:
        1. Generating the grid
        2. Creating a room or hallway anchor in each grid cell
        3. Creating hallways between grid cells
        4. Generating special features (maze room, Kecleon shop, Monster House, extra hallways, room imperfections, secondary structures)
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: GenerateOuterRingFloor
      address:
        NA: 0x233B190
        EU: 0x233BD74
        JP: 0x233C554
      description: |-
        Generates a floor layout with a 4x2 grid of rooms, surrounded by an outer ring of hallways.
        
        r0: floor properties
    - name: GenerateCrossroadsFloor
      address:
        NA: 0x233B61C
        EU: 0x233C200
        JP: 0x233C9E0
      description: |-
        Generates a floor layout with a mesh of hallways on the interior 3x2 grid, surrounded by a boundary of rooms protruding from the interior like spikes, excluding the corner cells.
        
        r0: floor properties
    - name: GenerateLineFloor
      address:
        NA: 0x233BA7C
        EU: 0x233C660
        JP: 0x233CE40
      description: |-
        Generates a floor layout with 5 grid cells in a horizontal line.
        
        r0: floor properties
    - name: GenerateCrossFloor
      address:
        NA: 0x233BBDC
        EU: 0x233C7C0
        JP: 0x233CFA0
      description: |-
        Generates a floor layout with 5 rooms arranged in a cross ("plus sign") formation.
        
        r0: floor properties
    - name: GenerateBeetleFloor
      address:
        NA: 0x233BD74
        EU: 0x233C958
        JP: 0x233D138
      description: |-
        Generates a floor layout in a "beetle" formation, which is created by taking a 3x3 grid of rooms, connecting the rooms within each row, and merging the central column into one big room.
        
        r0: floor properties
    - name: MergeRoomsVertically
      address:
        NA: 0x233BF30
        EU: 0x233CB14
        JP: 0x233D2F4
      description: |-
        Merges two vertically stacked rooms into one larger room.
        
        r0: x grid coordinate of the rooms to merge
        r1: y grid coordinate of the upper room
        r2: dy, where the lower room has a y grid coordinate of y+dy
        r3: grid to update
    - name: GenerateOuterRoomsFloor
      address:
        NA: 0x233C07C
        EU: 0x233CC60
        JP: 0x233D440
      description: |-
        Generates a floor layout with a ring of rooms on the grid boundary and nothing in the interior.
        
        Note that this function is bugged, and won't properly connect all the rooms together for grid_size_x < 4.
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: IsNotFullFloorFixedRoom
      address:
        NA: 0x233C310
        EU: 0x233CEF4
        JP: 0x233D6D4
      description: |-
        Checks if a fixed room ID does not correspond to a fixed, full-floor layout.
        
        The first non-full-floor fixed room is 0xA5, which is for Sealed Chambers.
        
        r0: fixed room ID
        return: bool
    - name: GenerateFixedRoom
      address:
        NA: 0x233C32C
        EU: 0x233CF10
      description: |-
        Handles fixed room generation if the floor contains a fixed room.
        
        r0: fixed room ID
        r1: floor properties
        return: bool
    - name: GenerateOneRoomMonsterHouseFloor
      address:
        NA: 0x233C774
        EU: 0x233D358
        JP: 0x233DB34
      description: |-
        Generates a floor layout with just a large, one-room Monster House.
        
        This is the default layout if dungeon generation fails.
        
        No params.
    - name: GenerateTwoRoomsWithMonsterHouseFloor
      address:
        NA: 0x233C844
        EU: 0x233D428
        JP: 0x233DC04
      description: |-
        Generate a floor layout with two rooms (left and right), one of which is a Monster House.
        
        No params.
    - name: GenerateExtraHallways
      address:
        NA: 0x233C9E8
        EU: 0x233D5CC
        JP: 0x233DDA8
      description: |-
        Generate extra hallways on the floor via a series of random walks.
        
        Each random walk starts from a random tile in a random room, leaves the room in a random cardinal direction, and from there tunnels through obstacles through a series of random turns, leaving open terrain in its wake. The random walk stops when it reaches open terrain, goes out of bounds, or reaches an impassable obstruction.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of extra hallways to generate
    - name: GetGridPositions
      address:
        NA: 0x233CF84
        EU: 0x233DB68
        JP: 0x233E344
      description: |-
        Get the grid cell positions for a given set of floor grid dimensions.
        
        r0: [output] pointer to array of the starting x coordinates of each grid column
        r1: [output] pointer to array of the starting y coordinates of each grid row
        r2: grid size x
        r3: grid size y
    - name: InitDungeonGrid
      address:
        NA: 0x233D004
        EU: 0x233DBE8
        JP: 0x233E3C4
      description: |-
        Initialize a dungeon grid with defaults.
        
        The grid is an array of grid cells stored in column-major order (such that grid cells with the same x value are stored contiguously), with a fixed column size of 15. If the grid size in the y direction is less than this, the last (15 - grid_size_y) entries of each column will be uninitialized.
        
        Note that the grid size arguments define the maximum size of the grid from a programmatic standpoint. However, grid cells can be invalidated if they exceed the configured floor size in the dungeon generation status struct. Thus, the dimensions of the ACTIVE grid can be smaller.
        
        r0: [output] grid (expected to have space for at least (15*(grid_size_x-1) + grid_size_y) dungeon grid cells)
        r1: grid size x
        r2: grid size y
    - name: AssignRooms
      address:
        NA: 0x233D104
        EU: 0x233DCE8
        JP: 0x233E4C4
      description: |-
        Randomly selects a subset of grid cells to become rooms.
        
        The given number of grid cells will become rooms. If any of the selected grid cells are invalid, fewer rooms will be generated. The number of rooms assigned will always be at least 2 and never exceed 36.
        
        Cells not marked as rooms will become hallway anchors. A hallway anchor is a single tile in a non-room grid cell to which hallways will be connected later, thus "anchoring" hallway generation.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of rooms; if positive, a random value between [n_rooms, n_rooms+2] will be used. If negative, |n_rooms| will be used exactly.
    - name: CreateRoomsAndAnchors
      address:
        NA: 0x233D318
        EU: 0x233DEFC
        JP: 0x233E6D8
      description: |-
        Creates rooms and hallway anchors in each grid cell as designated by AssignRooms.
        
        This function creates a rectangle of open terrain for each room (with some margin relative to the grid cell border). A single open tile is created in hallway anchor cells, and a hallway anchor indicator is set for later reference.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: room bitflags; only uses bit 2 (mask: 0b100), which enables room imperfections
    - name: GenerateSecondaryStructures
      address:
        NA: 0x233D674
        EU: 0x233E258
        JP: 0x233EA34
      description: |-
        Try to generate secondary structures in flagged rooms.
        
        If a valid room with no special features is flagged to have a secondary structure, try to generate a random one in the room, based on the result of a dice roll:
          0: no secondary structure
          1: maze, or a central water/lava "plus sign" as fallback, or a single water/lava tile in the center as a second fallback
          2: checkerboard pattern of water/lava
          3: central pool of water/lava
          4: central "island" with items and a Warp Tile, surrounded by a "moat" of water/lava
          5: horizontal or vertical divider of water/lava splitting the room in two
        
        If the room isn't the right shape, dimension, or otherwise doesn't support the selected secondary structure, it is left untouched.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: AssignGridCellConnections
      address:
        NA: 0x233E05C
        EU: 0x233EC40
        JP: 0x233F41C
      description: |-
        Randomly assigns connections between adjacent grid cells.
        
        Connections are created via a random walk with momentum, starting from the grid cell at (cursor x, cursor y). A connection is drawn in a random direction from the current cursor, and this process is repeated a certain number of times (the "floor connectivity" specified in the floor properties). The direction of the random walk has "momentum"; there's a 50% chance it will be the same as the previous step (or rotated counterclockwise if on the boundary). This helps to reduce the number of dead ends and forks in the road caused by the random walk "doubling back" on itself.
        
        If dead ends are disabled in the floor properties, there is an additional phase to remove dead end hallway anchors (only hallway anchors, not rooms) by drawing additional connections. Note that the actual implementation contains a bug: the grid cell validity checks use the wrong index, so connections may be drawn to invalid cells.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: cursor x
        stack[0]: cursor y
        stack[1]: floor properties
    - name: CreateGridCellConnections
      address:
        NA: 0x233E43C
        EU: 0x233F020
        JP: 0x233F7FC
      description: |-
        Create grid cell connections either by creating hallways or merging rooms.
        
        When creating a hallway connecting a hallway anchor, the exact anchor coordinates are used as the endpoint. When creating a hallway connecting a room, a random point on the room edge facing the hallway is used as the endpoint. The grid cell boundaries are used as the middle coordinates for kinks (see CreateHallway).
        
        If room merging is enabled, there is a 9.75% chance that two connected rooms will be merged into a single larger room (9.75% comes from two 5% rolls, one for each of the two rooms being merged). A room can only participate in a merge once.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: disable room merging flag
    - name: GenerateRoomImperfections
      address:
        NA: 0x233ED34
        EU: 0x233F918
        JP: 0x23400F4
      description: |-
        Attempt to generate room imperfections for each room in the floor layout, if enabled.
        
        Each room has a 40% chance of having imperfections if its grid cell is flagged to allow room imperfections. Imperfections are generated by randomly growing the walls of the room inwards for a certain number of iterations, starting from the corners.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: CreateHallway
      address:
        NA: 0x233F120
        EU: 0x233FD04
        JP: 0x23404E0
      description: |-
        Create a hallway between two points.
        
        If the two points share no coordinates in common (meaning the line connecting them is diagonal), a "kinked" hallway is created, with the kink at a specified "middle" coordinate (in practice the grid cell boundary). For example, with a kinked horizontal hallway, there are two horizontal lines extending out from the endpoints, connected by a vertical line on the middle x coordinate.
        
        If a hallway would intersect with an existing open tile (like an existing hallway), the hallway will only be created up to the point where it intersects with the open tile.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
        stack[0]: vertical flag (true for vertical hallway, false for horizontal)
        stack[1]: middle x coordinate for kinked horizontal hallways
        stack[2]: middle y coordinate for kinked vertical hallways
    - name: EnsureConnectedGrid
      address:
        NA: 0x233F424
        EU: 0x2340008
        JP: 0x23407E4
      description: |-
        Ensure the grid forms a connected graph (all valid cells are reachable) by adding hallways to unreachable grid cells.
        
        If a grid cell cannot be connected for some reason, remove it entirely.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
    - name: SetTerrainObstacleChecked
      address:
        NA: 0x233F900
        EU: 0x23404E4
        JP: 0x2340CC0
      description: |-
        Set the terrain of a specific tile to be an obstacle (wall or secondary terrain).
        
        Secondary terrain (water/lava) can only be placed in the specified room. If the tile room index does not match, a wall will be placed instead.
        
        r0: tile pointer
        r1: use secondary terrain flag (true for water/lava, false for wall)
        r2: room index
    - name: FinalizeJunctions
      address:
        NA: 0x233F93C
        EU: 0x2340520
        JP: 0x2340CFC
      description: |-
        Finalizes junction tiles by setting the junction flag (bit 3 of the terrain flags) and ensuring open terrain.
        
        Note that this implementation is slightly buggy. This function scans tiles left-to-right, top-to-bottom, and identifies junctions as any open, non-hallway tile (room_index != 0xFF) adjacent to an open, hallway tile (room_index == 0xFF). This interacts poorly with hallway anchors (room_index == 0xFE). This function sets the room index of any hallway anchors to 0xFF within the same loop, so a hallway anchor may or may not be identified as a junction depending on the orientation of connected hallways.
        
        For example, in the following configuration, the "o" tile would be marked as a junction because the neighboring hallway tile to its left comes earlier in iteration, while the "o" tile still has the room index 0xFE, causing the algorithm to mistake it for a room tile:
          xxxxx
          ---ox
          xxx|x
          xxx|x
        However, in the following configuration, the "o" tile would NOT be marked as a junction because it comes earlier in iteration than any of its neighboring hallway tiles, so its room index is set to 0xFF before it can be marked as a junction. This is actually the ONLY possible configuration where a hallway anchor will not be marked as a junction.
          xxxxx
          xo---
          x|xxx
          x|xxx
        
        No params.
    - name: GenerateKecleonShop
      address:
        NA: 0x233FBE8
        EU: 0x23407CC
        JP: 0x2340FA8
      description: |-
        Possibly generate a Kecleon shop on the floor.
        
        A Kecleon shop will be generated with a probability determined by the Kecleon shop spawn chance parameter. A Kecleon shop will be generated in a random room that is valid, connected, has no other special features, and has dimensions of at least 5x4. Kecleon shops will occupy the entire room interior, leaving a one tile margin from the room walls.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Kecleon shop spawn chance (percentage from 0-100)
    - name: GenerateMonsterHouse
      address:
        NA: 0x233FF9C
        EU: 0x2340B80
        JP: 0x234135C
      description: |-
        Possibly generate a Monster House on the floor.
        
        A Monster House will be generated with a probability determined by the Monster House spawn chance parameter, and only if the current floor can support one (no non-Monster-House outlaw missions or special floor types). A Monster House will be generated in a random room that is valid, connected, and is not a merged or maze room.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Monster House spawn chance (percentage from 0-100)
    - name: GenerateMazeRoom
      address:
        NA: 0x2340224
        EU: 0x2340E08
        JP: 0x23415E4
      description: |-
        Possibly generate a maze room on the floor.
        
        A maze room will be generated with a probability determined by the maze room chance parameter. A maze will be generated in a random room that is valid, connected, has odd dimensions, and has no other features.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: maze room chance (percentage from 0-100)
    - name: GenerateMaze
      address:
        NA: 0x2340458
        EU: 0x234103C
        JP: 0x2341818
      description: |-
        Generate a maze room within a given grid cell.
        
        A "maze" is generated within the room using a series of random walks to place obstacle terrain (walls or secondary terrain) in a maze-like arrangement. "Maze lines" (see GenerateMazeLine) are generated using every other tile around the room's border, as well as every other interior tile, as a starting point. This ensures that there are stripes of walkable open terrain surrounded by stripes of obstacles (the maze walls).
        
        r0: grid cell pointer
        r1: use secondary terrain flag (true for water/lava, false for walls)
    - name: GenerateMazeLine
      address:
        NA: 0x23406D4
        EU: 0x23412B8
        JP: 0x2341A94
      description: |-
        Generate a "maze line" from a given starting point, within the given bounds.
        
        A "maze line" is a random walk starting from (x0, y0). The random walk proceeds with a stride of 2 in a random direction, laying down obstacles as it goes. The random walk terminates when it gets trapped and there are no more neighboring tiles that are open and in-bounds.
        
        r0: x0
        r1: y0
        r2: xmin
        r3: ymin
        stack[0]: xmax
        stack[1]: ymax
        stack[2]: use secondary terrain flag (true for water/lava, false for walls)
        stack[3]: room index
    - name: SetSpawnFlag5
      address:
        NA: 0x234087C
        EU: 0x2341460
        JP: 0x2341C3C
      description: |-
        Set spawn flag 5 (0b100000 or 0x20) on all tiles in a room.
        
        r0: grid cell
    - name: IsNextToHallway
      address:
        NA: 0x23408D0
        EU: 0x23414B4
        JP: 0x2341C90
      description: |-
        Checks if a tile position is either in a hallway or next to one.
        
        r0: x
        r1: y
        return: bool
    - name: ResolveInvalidSpawns
      address:
        NA: 0x2340974
        EU: 0x2341558
        JP: 0x2341D34
      description: |-
        Resolve invalid spawn flags on tiles.
        
        Spawn flags can be invalid due to terrain. For example, traps can't spawn on obstacles. Spawn flags can also be invalid due to multiple being set on a single tile, in which case one will take precedence. For example, stair spawns trump trap spawns.
        
        No params.
    - name: ConvertSecondaryTerrainToChasms
      address:
        NA: 0x2340A0C
        EU: 0x23415F0
        JP: 0x2341DCC
      description: |-
        Converts all secondary terrain tiles (water/lava) to chasms.
        
        No params.
    - name: EnsureImpassableTilesAreWalls
      address:
        NA: 0x2340A78
        EU: 0x234165C
        JP: 0x2341E38
      description: |-
        Ensures all tiles with the impassable flag are walls.
        
        No params.
    - name: InitializeTile
      address:
        NA: 0x2340AD4
        EU: 0x23416B8
        JP: 0x2341E94
      description: |-
        Initialize a tile struct.
        
        r0: tile pointer
    - name: ResetFloor
      address:
        NA: 0x2340B0C
        EU: 0x23416F0
        JP: 0x2341ECC
      description: |-
        Resets the floor in preparation for a floor generation attempt.
        
        Resets all tiles, resets the border to be impassable, and clears entity spawns.
        
        No params.
    - name: PosIsOutOfBounds
      address:
        NA: 0x2340CAC
        EU: 0x2341890
        JP: 0x234206C
      description: |-
        Checks if a position (x, y) is out of bounds on the map: !((0 <= x <= 55) && (0 <= y <= 31)).
        
        r0: x
        r1: y
        return: bool
    - name: ShuffleSpawnPositions
      address:
        NA: 0x2340CE4
        EU: 0x23418C8
        JP: 0x23420A4
      description: |-
        Randomly shuffle an array of spawn positions.
        
        r0: spawn position array containing bytes {x1, y1, x2, y2, ...}
        r1: number of (x, y) pairs in the spawn position array
    - name: SpawnNonEnemies
      address:
        NA: 0x2340D4C
        EU: 0x2341930
        JP: 0x234210C
      description: |-
        Spawn all non-enemy entities, which includes stairs, items, traps, and the player.
        
        Most entities are spawned randomly on a subset of permissible tiles.
        
        Stairs are spawned if they don't already exist on the floor, and hidden stairs of the specified type are also spawned if configured as long as there are at least 2 floors left in the dungeon. Stairs can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an enemy spawn, isn't a hallway junction, and isn't a special tile like a Key door.
        
        Items are spawned both normally in rooms, as well as in walls and Monster Houses. Normal items can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop or Monster House, isn't a hallway junction, and isn't a special tile like a Key door. Buried items can spawn on any wall tile. Monster House items can spawn on any Monster House tile that isn't in a Kecleon shop and isn't a hallway junction.
        
        Traps are similarly spawned both normally in rooms, as well as in Monster Houses. Normal traps can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an item or enemy spawn, and isn't a special tile like a Key door. Monster House traps follow the same conditions as Monster House items.
        
        The player can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, isn't a hallway junction, doesn't already have an item, enemy, or trap spawn, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: SpawnEnemies
      address:
        NA: 0x2341470
        EU: 0x2342054
        JP: 0x2342830
      description: |-
        Spawn all enemies, which includes normal enemies and those in Monster Houses.
        
        Normal enemies can spawn on any tile that has open terrain, isn't in a Kecleon shop, doesn't already have another entity spawn, and isn't a special tile like a Key door.
        
        Monster House enemies can spawn on any Monster House tile that isn't in a Kecleon shop, isn't where the player spawns, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: SetSecondaryTerrainOnWall
      address:
        NA: 0x234176C
        EU: 0x2342350
        JP: 0x2342B2C
      description: |-
        Set a specific tile to have secondary terrain (water/lava), but only if it's a passable wall.
        
        r0: tile pointer
    - name: GenerateSecondaryTerrainFormations
      address:
        NA: 0x23417AC
        EU: 0x2342390
        JP: 0x2342B6C
      description: |-
        Generate secondary terrain (water/lava) formations.
        
        This includes "rivers" that flow from top-to-bottom (or bottom-to-top), as well as "lakes" both standalone and after rivers. Water/lava formations will never cut through rooms, but they can pass through rooms to the opposite side.
        
        Rivers are generated by a top-down or bottom-up random walk that ends when existing secondary terrain is reached or the walk goes out of bounds. Some rivers also end prematurely in a lake. Lakes are a large collection of secondary terrain generated around a central point.
        
        r0: bit index to test in the floor properties room flag bitvector (formations are only generated if the bit is set)
        r1: floor properties
    - name: StairsAlwaysReachable
      address:
        NA: 0x2341E6C
        EU: 0x2342A50
        JP: 0x234322C
      description: |-
        Checks that the stairs are reachable from every walkable tile on the floor.
        
        This runs a graph traversal algorithm that is very similar to breadth-first search (the order in which nodes are visited is slightly different), starting from the stairs. If any tile is walkable but wasn't reached by the traversal algorithm, then the stairs must not be reachable from that tile.
        
        r0: x coordinate of the stairs
        r1: y coordinate of the stairs
        r2: flag to always return true, but set a special bit on all walkable tiles that aren't reachable from the stairs
        return: bool
    - name: ConvertWallsToChasms
      address:
        NA: 0x2342548
        EU: 0x234312C
        JP: 0x2343908
      description: |-
        Converts all wall tiles to chasms.
        
        No params.
    - name: ResetInnerBoundaryTileRows
      address:
        NA: 0x2342B7C
        EU: 0x2343760
        JP: 0x2343F3C
      description: |-
        Reset the inner boundary tile rows (y == 1 and y == 30) to their initial state of all wall tiles, with impassable walls at the edges (x == 0 and x == 55).
        
        No params.
    - name: SpawnStairs
      address:
        NA: 0x2342C8C
        EU: 0x2343870
        JP: 0x234404C
      description: |-
        Spawn stairs at the given location.
        
        If the hidden stairs flag is set, hidden stairs will be spawned instead of normal stairs.
        
        If spawning normal stairs and the current floor is a rescue floor, the room containing the stairs will be converted into a Monster House.
        
        r0: position (two-byte array for {x, y})
        r1: dungeon generation info pointer (a field on the dungeon struct)
        r2: hidden stairs flag
    - name: LoadFixedRoomData
      address:
        NA: 0x2343D90
        EU: 0x2344974
        JP: 0x2345154
      description: |-
        Loads fixed room data from BALANCE/fixed.bin into the buffer pointed to by FIXED_ROOM_DATA_PTR.
        
        No params.
    - name: IsHiddenStairsFloor
      address:
        NA: 0x234450C
        EU: 0x23450F0
        JP: 0x23458D0
      description: |-
        Checks if the current floor is either the Secret Bazaar or a Secret Room.
        
        return: bool
    - name: HasHeldItem
      address:
        NA: 0x23467E4
        EU: 0x23473D0
        JP: 0x2347B94
      description: |-
        Checks if a monster has a certain held item.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: IsOutlawOrChallengeRequestFloor
      address:
        NA: 0x23491C4
        EU: 0x2349DC4
      description: |-
        Checks if the current floor is an active mission destination of type MISSION_TAKE_ITEM_FROM_OUTLAW, MISSION_ARREST_OUTLAW or MISSION_CHALLENGE_REQUEST.
        
        return: bool
    - name: IsCurrentMissionType
      address:
        NA: 0x234921C
        EU: 0x2349E1C
        JP: 0x234A544
      description: |-
        Checks if the current floor is an active mission destination of a given type (and any subtype).
        
        r0: mission type
        return: bool
    - name: IsCurrentMissionTypeExact
      address:
        NA: 0x2349250
        EU: 0x2349E50
        JP: 0x234A578
      description: |-
        Checks if the current floor is an active mission destination of a given type and subtype.
        
        r0: mission type
        r1: mission subtype
        return: bool
    - name: IsOutlawMonsterHouseFloor
      address:
        NA: 0x234928C
        EU: 0x2349E8C
        JP: 0x234A5B4
      description: |-
        Checks if the current floor is a mission destination for a Monster House outlaw mission.
        
        return: bool
    - name: IsGoldenChamber
      address:
        NA: 0x23492B0
        EU: 0x2349EB0
        JP: 0x234A5D8
      description: |-
        Checks if the current floor is a Golden Chamber floor.
        
        return: bool
    - name: IsLegendaryChallengeFloor
      address:
        NA: 0x23492D4
        EU: 0x2349ED4
        JP: 0x234A5FC
      description: |-
        Checks if the current floor is a boss floor for a Legendary Challenge Letter mission.
        
        return: bool
    - name: IsJirachiChallengeFloor
      address:
        NA: 0x2349314
        EU: 0x2349F14
        JP: 0x234A63C
      description: |-
        Checks if the current floor is the boss floor in Star Cave Pit for Jirachi's Challenge Letter mission.
        
        return: bool
    - name: IsDestinationFloorWithMonster
      address:
        NA: 0x234934C
        EU: 0x2349F4C
        JP: 0x234A674
      description: |-
        Checks if the current floor is a mission destination floor with a special monster.
        
        See FloorHasMissionMonster for details.
        
        return: bool
    - name: MissionTargetEnemyIsDefeated
      address:
        NA: 0x2349470
        EU: 0x234A070
        JP: 0x234A798
      description: |-
        Checks if the target enemy of the mission on the current floor has been defeated.
        
        return: bool
    - name: SetMissionTargetEnemyDefeated
      address:
        NA: 0x2349490
        EU: 0x234A090
        JP: 0x234A7B8
      description: |-
        Set the flag for whether or not the target enemy of the current mission has been defeated.
        
        r0: new flag value
    - name: IsDestinationFloorWithFixedRoom
      address:
        NA: 0x23494A4
        EU: 0x234A0A4
        JP: 0x234A7CC
      description: |-
        Checks if the current floor is a mission destination floor with a fixed room.
        
        The entire floor can be a fixed room layout, or it can just contain a Sealed Chamber.
        
        return: bool
    - name: GetItemToRetrieve
      address:
        NA: 0x23494CC
        EU: 0x234A0CC
        JP: 0x234A7F4
      description: |-
        Get the ID of the item that needs to be retrieve on the current floor for a mission, if one exists.
        
        return: item ID
    - name: GetItemToDeliver
      address:
        NA: 0x23494F0
        EU: 0x234A0F0
        JP: 0x234A818
      description: |-
        Get the ID of the item that needs to be delivered to a mission client on the current floor, if one exists.
        
        return: item ID
    - name: GetSpecialTargetItem
      address:
        NA: 0x234951C
        EU: 0x234A11C
        JP: 0x234A844
      description: |-
        Get the ID of the special target item for a Sealed Chamber or Treasure Memo mission on the current floor.
        
        return: item ID
    - name: IsDestinationFloorWithItem
      address:
        NA: 0x2349564
        EU: 0x234A164
        JP: 0x234A88C
      description: |-
        Checks if the current floor is a mission destination floor with a special item.
        
        This excludes missions involving taking an item from an outlaw.
        
        return: bool
    - name: IsDestinationFloorWithHiddenOutlaw
      address:
        NA: 0x23495C4
        EU: 0x234A1C4
        JP: 0x234A8EC
      description: |-
        Checks if the current floor is a mission destination floor with a "hidden outlaw" that behaves like a normal enemy.
        
        return: bool
    - name: IsDestinationFloorWithFleeingOutlaw
      address:
        NA: 0x23495E8
        EU: 0x234A1E8
        JP: 0x234A910
      description: |-
        Checks if the current floor is a mission destination floor with a "fleeing outlaw" that runs away.
        
        return: bool
    - name: GetMissionTargetEnemy
      address:
        NA: 0x2349620
        EU: 0x234A220
        JP: 0x234A948
      description: |-
        Get the monster ID of the target enemy to be defeated on the current floor for a mission, if one exists.
        
        return: monster ID
    - name: GetMissionEnemyMinionGroup
      address:
        NA: 0x2349638
        EU: 0x234A238
        JP: 0x234A960
      description: |-
        Get the monster ID of the specified minion group on the current floor for a mission, if it exists.
        
        Note that a single minion group can correspond to multiple actual minions of the same species. There can be up to 2 minion groups.
        
        r0: minion group index (0-indexed)
        return: monster ID
    - name: FloorHasMissionMonster
      address:
        NA: 0x2349748
        EU: 0x234A348
        JP: 0x234AA70
      description: |-
        Checks if a given floor is a mission destination with a special monster, either a target to rescue or an enemy to defeat.
        
        Mission types with a monster on the destination floor:
        - Rescue client
        - Rescue target
        - Escort to target
        - Deliver item
        - Search for target
        - Take item from outlaw
        - Arrest outlaw
        - Challenge Request
        
        r0: mission destination info pointer
        return: bool
    - name: LogMessageByIdWithPopupCheckUser
      address:
        NA: 0x234B2A4
        EU: 0x234BEA4
        JP: 0x234C514
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopupCheckUser
      address:
        NA: 0x234B2E4
        EU: 0x234BEE4
        JP: 0x234C554
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdQuiet
      address:
        NA: 0x234B31C
        EU: 0x234BF1C
        JP: 0x234C58C
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageQuiet
      address:
        NA: 0x234B340
        EU: 0x234BF40
        JP: 0x234C5B0
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdWithPopupCheckUserTarget
      address:
        NA: 0x234B350
        EU: 0x234BF50
        JP: 0x234C5C0
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageWithPopupCheckUserTarget
      address:
        NA: 0x234B3A4
        EU: 0x234BFA4
        JP: 0x234C614
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message string
    - name: LogMessageByIdQuietCheckUserTarget
      address:
        NA: 0x234B3F0
        EU: 0x234BFF0
        JP: 0x234C660
      description: |-
        Logs a message in the message log (but without a message popup), if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageByIdWithPopupCheckUserUnknown
      address:
        NA: 0x234B444
        EU: 0x234C044
        JP: 0x234C6B4
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted and some other unknown check.
        
        r0: user entity pointer
        r1: ?
        r2: message ID
    - name: LogMessageByIdWithPopup
      address:
        NA: 0x234B498
        EU: 0x234C098
        JP: 0x234C708
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopup
      address:
        NA: 0x234B4BC
        EU: 0x234C0BC
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessage
      address:
        NA: 0x234B508
        EU: 0x234C108
        JP: 0x234C778
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message string
        r2: bool, whether or not to present a message popup
    - name: LogMessageById
      address:
        NA: 0x234B714
        EU: 0x234C314
        JP: 0x234C984
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message ID
        r2: bool, whether or not to present a message popup
    - name: OpenMessageLog
      address:
        NA: 0x234BB5C
        EU: 0x234C75C
      description: |-
        Opens the message log window.
        
        r0: ?
        r1: ?
    - name: RunDungeonMode
      address:
        NA: 0x234BF28
        EU: 0x234CB28
        JP: 0x234D18C
      description: |-
        This appears to be the top-level function for running dungeon mode.
        
        It gets called by some code in overlay 10 right after doing the dungeon fade transition, and once it exits, the dungeon results are processed.
        
        This function is presumably in charge of allocating the dungeon struct, setting it up, launching the dungeon engine, etc.
    - name: DisplayDungeonTip
      address:
        NA: 0x234CEF0
        EU: 0x234DAF0
      description: |-
        Checks if a given dungeon tip should be displayed at the start of a floor and if so, displays it. Called up to 4 times at the start of each new floor, with a different r0 parameter each time.
        
        r0: Pointer to the message_tip struct of the message that should be displayed
        r1: True to log the message in the message log
    - name: SetBothScreensWindowColorToDefault
      address:
        NA: 0x234CF60
        EU: 0x234DB60
        JP: 0x234E1C4
      description: |-
        This changes the palettes of windows in both screens to an appropiate value depending on the playthrough
        If you're in a special episode, they turn green , otherwise, they turn blue or pink depending on your character's sex
        
        No params
    - name: DisplayMessage
      address:
        NA: 0x234D258
        EU: 0x234DE58
      description: |-
        Displays a message in a dialogue box that optionally waits for player input before closing.
        
        r0: ?
        r1: ID of the string to display
        r2: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
    - name: DisplayMessage2
      address:
        NA: 0x234D2AC
        EU: 0x234DEAC
      description: Very similar to DisplayMessage
    - name: DisplayMessageInternal
      address:
        NA: 0x234D590
        EU: 0x234E190
      description: |-
        Called by DisplayMessage. Seems to be the function that handles the display of the dialogue box. It won't return until all the characters have been written and after the player manually closes the dialogue box (if the corresponding parameter was set).
        
        r0: ID of the string to display
        r1: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
        r2: ? (r0 in DisplayMessage)
        r3: ?
        stack[0]: ?
        stack[1]: ?
    - name: EuFaintCheck
      address:
        EU: 0x22F88E8
      description: |-
        This function is exclusive to the EU ROM. Seems to perform a check to see if the monster who just fainted was a team member who should cause the minimap to be updated (or something like that, maybe related to the Map Surveyor IQ skill) and if it passes, updates the minimap.
        The function ends by calling another 2 functions. In US ROMs, calls to EUFaintCheck are replaced by calls to those two functions. This seems to indicate that this function fixes some edge case glitch that can happen when a team member faints.
        
        r0: False if the fainted entity was a team member
        r1: True to set an unknown byte in the RAM to 1
    - name: GetMinimapDataE447
      address:
        EU: 0x233AE00
      description: |-
        Exclusive to the EU ROM. Returns minimap_display_data::field_0xE447.
        
        return: minimap_display_data::field_0xE447
  data:
    - name: DUNGEON_STRUCT_SIZE
      address:
        NA:
          - 0x22DEA78
          - 0x22DEAAC
        EU:
          - 0x22DF3B8
          - 0x22DF3EC
      length:
        NA: 0x4
        EU: 0x4
      description: Size of the dungeon struct (0x2CB14)
    - name: OFFSET_OF_DUNGEON_FLOOR_PROPERTIES
      address:
        NA:
          - 0x22E79F8
          - 0x233AE68
        EU:
          - 0x22E83A8
          - 0x233BA4C
      length:
        NA: 0x4
        EU: 0x4
      description: Offset of the floor properties field in the dungeon struct (0x286B2)
    - name: SPAWN_RAND_MAX
      address:
        NA: 0x22E7E50
        EU: 0x22E8800
      length:
        NA: 0x4
        EU: 0x4
      description: "Equal to 10,000 (0x2710). Used as parameter for DungeonRandInt to generate the random number which determines the entity to spawn."
    - name: DUNGEON_PRNG_LCG_MULTIPLIER
      address:
        NA:
          - 0x22EA9C8
          - 0x22EAA8C
        EU:
          - 0x22EB378
          - 0x22EB43C
      length:
        NA: 0x4
        EU: 0x4
      description: "The multiplier shared by all of the dungeon PRNG's LCGs, 1566083941 (0x5D588B65)."
    - name: DUNGEON_PRNG_LCG_INCREMENT_SECONDARY
      address:
        NA: 0x22EAA94
        EU: 0x22EB444
      length:
        NA: 0x4
        EU: 0x4
      description: "The increment for the dungeon PRNG's secondary LCGs, 2531011 (0x269EC3). This happens to be the same increment that the Microsoft Visual C++ runtime library uses in its implementation of the rand() function."
    - name: KECLEON_FEMALE_ID
      address:
        NA: 0x22F7404
        EU: 0x22F7DBC
      length:
        NA: 0x4
        EU: 0x4
      description: "0x3D7 (983). Used when spawning Kecleon on an even numbered floor."
    - name: KECLEON_MALE_ID
      address:
        NA: 0x22F7408
        EU: 0x22F7DC0
      length:
        NA: 0x4
        EU: 0x4
      description: "0x17F (383). Used when spawning Kecleon on an odd numbered floor."
    - name: MSG_ID_SLOW_START
      address:
        NA: 0x22F92D0
        EU: 0x22F9CDC
      length:
        NA: 0x4
        EU: 0x4
      description: ID of the message printed when a monster has the ability Slow Start at the beginning of the floor.
    - name: EXPERIENCE_POINT_GAIN_CAP
      address:
        NA: 0x23026C8
        EU: 0x23030F4
      length:
        NA: 0x4
        EU: 0x4
      description: A cap on the experience that can be given to a monster in one call to AddExpSpecial
    - name: JUDGMENT_MOVE_ID
      address:
        NA: 0x230C458
        EU: 0x230CECC
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Move ID for Judgment (0x1D3)
        
        type: enum move_id
    - name: REGULAR_ATTACK_MOVE_ID
      address:
        NA: 0x230C45C
        EU: 0x230CED0
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Move ID for the regular attack (0x163)
        
        type: enum move_id
    - name: DEOXYS_ATTACK_ID
      address:
        NA: 0x230C460
        EU: 0x230CED4
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Monster ID for Deoxys in Attack Forme (0x1A3)
        
        type: enum monster_id
    - name: DEOXYS_SPEED_ID
      address:
        NA: 0x230C464
        EU: 0x230CED8
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Monster ID for Deoxys in Speed Forme (0x1A5)
        
        type: enum monster_id
    - name: GIRATINA_ALTERED_ID
      address:
        NA: 0x230C468
        EU: 0x230CEDC
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Monster ID for Giratina in Altered Forme (0x211)
        
        type: enum monster_id
    - name: PUNISHMENT_MOVE_ID
      address:
        NA: 0x230C46C
        EU: 0x230CEE0
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Move ID for Punishment (0x1BD)
        
        type: enum move_id
    - name: OFFENSE_STAT_MAX
      address:
        NA: 0x230C49C
        EU: 0x230CF10
      length:
        NA: 0x4
        EU: 0x4
      description: "Cap on an attacker's modified offense (attack or special attack) stat after boosts. Used during damage calculation."
    - name: PROJECTILE_MOVE_ID
      address:
        NA:
          - 0x230D07C
          - 0x231C700
        EU:
          - 0x230DAF0
          - 0x231D160
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        The move ID of the special "projectile" move (0x195)
        
        type: enum move_id
    - name: BELLY_LOST_PER_TURN
      address:
        NA: 0x2310A70
        EU: 0x23114D0
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        The base value by which belly is decreased every turn.
        
        Its raw value is 0x199A, which encodes a binary fixed-point number (16 fraction bits) with value (0x199A * 2^-16), and is the closest approximation to 0.1 representable in this number format.
    - name: MAX_HP_CAP
      address:
        NA:
          - 0x2311814
          - 0x2318454
        EU:
          - 0x2312274
          - 0x2318EB4
      length:
        NA: 0x4
        EU: 0x4
      description: The maximum amount of HP a monster can have (999).
    - name: MOVE_TARGET_AND_RANGE_SPECIAL_USER_HEALING
      address:
        NA: 0x231AD34
        EU: 0x231B794
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        The move target and range code for special healing moves that target just the user (0x273).
        
        type: struct move_target_and_range (+ padding)
    - name: PLAIN_SEED_VALUE
      address:
        NA: 0x231C748
        EU: 0x231D1A8
      length:
        NA: 0x4
        EU: 0x4
      description: Some value related to the Plain Seed (0xBE9).
    - name: MAX_ELIXIR_PP_RESTORATION
      address:
        NA: 0x231C74C
        EU: 0x231D1AC
      length:
        NA: 0x4
        EU: 0x4
      description: The amount of PP restored per move by ingesting a Max Elixir (0x3E7).
    - name: SLIP_SEED_VALUE
      address:
        NA: 0x231CBAC
        EU: 0x231D614
      length:
        NA: 0x4
        EU: 0x4
      description: Some value related to the Slip Seed (0xC75).
    - name: CASTFORM_NORMAL_FORM_MALE_ID
      address:
        NA: 0x2335438
        EU: 0x2335E78
      length:
        NA: 0x4
        EU: 0x4
      description: "Castform's male normal form ID (0x17B)"
    - name: CASTFORM_NORMAL_FORM_FEMALE_ID
      address:
        NA: 0x233543C
        EU: 0x2335E7C
      length:
        NA: 0x4
        EU: 0x4
      description: "Castform's female normal form ID (0x3D3)"
    - name: CHERRIM_SUNSHINE_FORM_MALE_ID
      address:
        NA: 0x2335440
        EU: 0x2335E80
      length:
        NA: 0x4
        EU: 0x4
      description: "Cherrim's male sunshine form ID (0x1CD)"
    - name: CHERRIM_OVERCAST_FORM_FEMALE_ID
      address:
        NA: 0x2335444
        EU: 0x2335E84
      length:
        NA: 0x4
        EU: 0x4
      description: "Cherrim's female overcast form ID (0x424)"
    - name: CHERRIM_SUNSHINE_FORM_FEMALE_ID
      address:
        NA: 0x2335448
        EU: 0x2335E88
      length:
        NA: 0x4
        EU: 0x4
      description: "Cherrim's female sunshine form ID (0x425)"
    - name: FLOOR_GENERATION_STATUS_PTR
      address:
        NA:
          - 0x233AE6C
          - 0x233AF08
          - 0x233B18C
          - 0x233B618
          - 0x233BA78
          - 0x233BBD8
          - 0x233BD70
          - 0x233BF2C
          - 0x233C30C
          - 0x233C76C
          - 0x233CF80
          - 0x233D100
          - 0x233D310
          - 0x233D670
          - 0x233E058
          - 0x233FF90
          - 0x234021C
          - 0x23406D0
          - 0x234145C
          - 0x2341764
          - 0x2342178
          - 0x2342510
          - 0x23427E0
          - 0x2342B74
          - 0x2342C64
          - 0x2342D98
          - 0x2342F28
        EU:
          - 0x233BA50
          - 0x233BAEC
          - 0x233BD70
          - 0x233C1FC
          - 0x233C65C
          - 0x233C7BC
          - 0x233C954
          - 0x233CB10
          - 0x233CEF0
          - 0x233D350
          - 0x233DB64
          - 0x233DCE4
          - 0x233DEF4
          - 0x233E254
          - 0x233EC3C
          - 0x2340B74
          - 0x2340E00
          - 0x23412B4
          - 0x2342040
          - 0x2342348
          - 0x2342D5C
          - 0x23430F4
          - 0x23433C4
          - 0x2343758
          - 0x2343848
          - 0x234397C
          - 0x2343B0C
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        Pointer to the global FLOOR_GENERATION_STATUS
        
        type: struct floor_generation_status*
    - name: OFFSET_OF_DUNGEON_N_NORMAL_ITEM_SPAWNS
      address:
        NA:
          - 0x233AE74
          - 0x2341464
        EU:
          - 0x233BA58
          - 0x2342048
      length:
        NA: 0x4
        EU: 0x4
      description: Offset of the (number of base items + 1) field on the dungeon struct (0x12AFA)
    - name: DUNGEON_GRID_COLUMN_BYTES
      address:
        NA:
          - 0x233B614
          - 0x233BA74
          - 0x233BD6C
          - 0x233BF28
          - 0x233C308
          - 0x233C770
          - 0x233C9E4
          - 0x233CF78
          - 0x233D0FC
          - 0x233D314
          - 0x233D66C
          - 0x233E054
          - 0x233E438
          - 0x233ED30
          - 0x233F114
          - 0x233F8FC
          - 0x233FF94
          - 0x2340220
          - 0x2340454
          - 0x23424CC
        EU:
          - 0x233C1F8
          - 0x233C658
          - 0x233C950
          - 0x233CB0C
          - 0x233CEEC
          - 0x233D354
          - 0x233D5C8
          - 0x233DB5C
          - 0x233DCE0
          - 0x233DEF8
          - 0x233E250
          - 0x233EC38
          - 0x233F01C
          - 0x233F914
          - 0x233FCF8
          - 0x23404E0
          - 0x2340B78
          - 0x2340E04
          - 0x2341038
          - 0x23430B0
      length:
        NA: 0x4
        EU: 0x4
      description: "The number of bytes in one column of the dungeon grid cell array, 450, which corresponds to a column of 15 grid cells."
    - name: DEFAULT_MAX_POSITION
      address:
        NA: 0x233FF98
        EU: 0x2340B7C
      length:
        NA: 0x4
        EU: 0x4
      description: A large number (9999) to use as a default position for keeping track of min/max position values
    - name: OFFSET_OF_DUNGEON_GUARANTEED_ITEM_ID
      address:
        NA:
          - 0x2341460
          - 0x2344E80
        EU:
          - 0x2342044
          - 0x2345A64
      length:
        NA: 0x4
        EU: 0x4
      description: Offset of the guaranteed item ID field in the dungeon struct (0x2C9E8)
    - name: FIXED_ROOM_TILE_SPAWN_TABLE
      address:
        NA: 0x234FDD0
        EU: 0x23509DC
      length:
        NA: 0x2C
        EU: 0x2C
      description: |-
        Table of tiles that can spawn in fixed rooms, pointed into by the FIXED_ROOM_TILE_SPAWN_TABLE.
        
        This is an array of 11 4-byte entries containing info about one tile each. Info includes the trap ID if a trap, room ID, and flags.
        
        type: struct fixed_room_tile_spawn_entry[11]
    - name: FIXED_ROOM_REVISIT_OVERRIDES
      address:
        NA: 0x234FE14
        EU: 0x2350A20
      length:
        NA: 0x100
        EU: 0x100
      description: |-
        Table of fixed room IDs, which if nonzero, overrides the normal fixed room ID for a floor (which is used to index the table) if the dungeon has already been cleared previously.
        
        Overrides are used to substitute different fixed room data for things like revisits to story dungeons.
        
        type: struct fixed_room_id_8[256]
    - name: FIXED_ROOM_MONSTER_SPAWN_TABLE
      address:
        NA: 0x234FF14
        EU: 0x2350B20
      length:
        NA: 0x1E0
        EU: 0x1E0
      description: |-
        Table of monsters that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 120 4-byte entries containing info about one monster each. Info includes the monster ID, stats, and behavior type.
        
        type: struct fixed_room_monster_spawn_entry[120]
    - name: FIXED_ROOM_ITEM_SPAWN_TABLE
      address:
        NA: 0x23500F4
        EU: 0x2350D00
      length:
        NA: 0x1F8
        EU: 0x1F8
      description: |-
        Table of items that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 63 8-byte entries containing one item ID each.
        
        type: struct fixed_room_item_spawn_entry[63]
    - name: FIXED_ROOM_ENTITY_SPAWN_TABLE
      address:
        NA: 0x23502EC
        EU: 0x2350EF8
      length:
        NA: 0xC9C
        EU: 0xC9C
      description: |-
        Table of entities (items, monsters, tiles) that can spawn in fixed rooms, which is indexed into by the main data structure for each fixed room.
        
        This is an array of 269 entries. Each entry contains 3 pointers (one into FIXED_ROOM_ITEM_SPAWN_TABLE, one into FIXED_ROOM_MONSTER_SPAWN_TABLE, and one into FIXED_ROOM_TILE_SPAWN_TABLE), and represents the entities that can spawn on one specific tile in a fixed room.
        
        type: struct fixed_room_entity_spawn_entry[269]
    - name: DIRECTIONS_XY
      address:
        NA: 0x235171C
        EU: 0x2352328
      length:
        NA: 0x20
        EU: 0x20
      description: |-
        An array mapping each direction index to its x and y displacements.
        
        Directions start with 0=down and proceed counterclockwise (see enum direction_id). Displacements for x and y are interleaved and encoded as 2-byte signed integers. For example, the first two integers are [0, 1], which correspond to the x and y displacements for the "down" direction (positive y means down).
    - name: FRACTIONAL_TURN_SEQUENCE
      address:
        NA: 0x2352284
        EU: 0x2352EC2
      length:
        NA: 0xFA
        EU: 0xFA
      description: |-
        Read by certain functions that are called by RunFractionalTurn to see if they should be executed.
        
        Array is accessed via a pointer added to some multiple of fractional_turn, so that if the resulting memory location is zero, the function returns.
    - name: BELLY_DRAIN_IN_WALLS_INT
      address:
        NA: 0x2352768
        EU: 0x2353374
      length:
        NA: 0x2
        EU: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (integer part)
    - name: BELLY_DRAIN_IN_WALLS_THOUSANDTHS
      address:
        NA: 0x235276A
        EU: 0x2353376
      length:
        NA: 0x2
        EU: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (fractional thousandths)
    - name: SPATK_STAT_IDX
      address:
        NA: 0x2352AE8
        EU: 0x23536F4
      length:
        NA: 0x4
        EU: 0x4
      description: "The index (1) of the special attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: ATK_STAT_IDX
      address:
        NA: 0x2352AEC
        EU: 0x23536F8
      length:
        NA: 0x4
        EU: 0x4
      description: "The index (0) of the attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: CORNER_CARDINAL_NEIGHBOR_IS_OPEN
      address:
        NA: 0x2353010
        EU: 0x2353C24
      length:
        NA: 0x20
        EU: 0x20
      description: |-
        An array mapping each (corner index, neighbor direction index) to whether or not that neighbor is expected to be open floor.
        
        Corners start with 0=top-left and proceed clockwise. Directions are enumerated as with DIRECTIONS_XY. The array is indexed by i=(corner_index * N_DIRECTIONS + direction). An element of 1 (0) means that starting from the specified corner of a room, moving in the specified direction should lead to an open floor tile (non-open terrain like a wall).
        
        Note that this array is only used for the cardinal directions. The elements at odd indexes are unused and unconditionally set to 0.
        
        This array is used by the dungeon generation algorithm when generating room imperfections. See GenerateRoomImperfections.
    - name: DUNGEON_PTR
      address:
        NA: 0x2353538
        EU: 0x2354138
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "working copy" of DUNGEON_PTR_MASTER. The main dungeon engine uses this pointer (or rather pointers to this pointer) when actually running dungeon mode.
        
        type: struct dungeon*
    - name: DUNGEON_PTR_MASTER
      address:
        NA: 0x235353C
        EU: 0x235413C
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "master copy" of the dungeon pointer. The game uses this pointer when doing low-level memory work (allocation, freeing, zeroing). The normal DUNGEON_PTR is used for most other dungeon mode work.
        
        type: struct dungeon*
    - name: LEADER_PTR
      address:
        NA: 0x235355C
        EU: 0x235415C
      length:
        NA: 0x4
        EU: 0x4
      description: |-
        [Runtime] Pointer to the current leader of the team.
        
        type: struct entity*
    - name: DUNGEON_PRNG_STATE
      address:
        NA: 0x2353570
        EU: 0x2354170
      length:
        NA: 0x14
        EU: 0x14
      description: |-
        [Runtime] The global PRNG state for dungeon mode, not including the current values in the secondary sequences.
        
        This struct holds state for the primary LCG, as well as the current configuration controlling which LCG to use when generating random numbers. See DungeonRand16Bit for more information on how the dungeon PRNG works.
        
        type: struct prng_state
    - name: DUNGEON_PRNG_STATE_SECONDARY_VALUES
      address:
        NA: 0x2353584
        EU: 0x2354184
      length:
        NA: 0x14
        EU: 0x14
      description: |-
        [Runtime] An array of 5 integers corresponding to the last value generated for each secondary LCG sequence.
        
        Based on the assembly, this appears to be its own global array, separate from DUNGEON_PRNG_STATE.
    - name: EXCL_ITEM_EFFECTS_WEATHER_ATK_SPEED_BOOST
      address:
        NA: 0x23535B0
        EU: 0x23541B0
      length:
        NA: 0x8
        EU: 0x8
      description: Array of IDs for exclusive item effects that increase attack speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_MOVE_SPEED_BOOST
      address:
        NA: 0x23535B8
        EU: 0x23541B8
      length:
        NA: 0x8
        EU: 0x8
      description: Array of IDs for exclusive item effects that increase movement speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_NO_STATUS
      address:
        NA: 0x23535C0
        EU: 0x23541C0
      length:
        NA: 0x8
        EU: 0x8
      description: Array of IDs for exclusive item effects that grant status immunity with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_EVASION_BOOST
      address:
        NA: 0x2353710
        EU: 0x2354310
      length:
        NA: 0x8
        EU: 0x8
      description: Array of IDs for exclusive item effects that grant an evasion boost with certain weather conditions.
    - name: DEFAULT_TILE
      address:
        NA: 0x2353724
        EU: 0x235433C
      length:
        NA: 0x14
        EU: 0x14
      description: |-
        The default tile struct.
        
        This is just a struct full of zeroes, but is used as a fallback in various places where a "default" tile is needed, such as when a grid index is out of range.
        
        type: struct tile
    - name: FIXED_ROOM_DATA_PTR
      address:
        NA: 0x2353794
        EU: 0x23543AC
      length:
        NA: 0x4
        EU: 0x4
      description: "[Runtime] Pointer to decoded fixed room data loaded from the BALANCE/fixed.bin file."
