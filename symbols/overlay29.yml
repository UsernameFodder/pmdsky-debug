overlay29:
  versions:
    - EU
    - NA
    - JP
  address:
    EU: 0x22DCB80
    NA: 0x22DC240
    JP: 0x22DD8E0
  length:
    EU: 0x77900
    NA: 0x77620
    JP: 0x77200
  description: |-
    The dungeon engine.
    
    This is the "main" overlay of dungeon mode. It controls most things that happen in a Mystery Dungeon, such as dungeon layout generation, dungeon menus, enemy AI, and generally just running each turn while within a dungeon.
  functions:
    - name: DungeonAlloc
      address:
        EU: 0x22DF39C
        NA: 0x22DEA5C
        JP: 0x22E00FC
      description: |-
        Allocates a new dungeon struct.
        
        This updates the master dungeon pointer and returns a copy of that pointer.
        
        return: pointer to a newly allocated dungeon struct
    - name: GetDungeonPtrMaster
      address:
        EU: 0x22DF3C0
        NA: 0x22DEA80
      description: |-
        Returns the master dungeon pointer (a global, see DUNGEON_PTR_MASTER).
        
        return: pointer to a newly allocated dungeon struct
    - name: DungeonZInit
      address:
        EU: 0x22DF3D0
        NA: 0x22DEA90
        JP: 0x22E0130
      description: |-
        Zero-initializes the dungeon struct pointed to by the master dungeon pointer.
        
        No params.
    - name: DungeonFree
      address:
        EU: 0x22DF3F0
        NA: 0x22DEAB0
      description: |-
        Frees the dungeons struct pointer to by the master dungeon pointer, and nullifies the pointer.
        
        No params.
    - name: RunDungeon
      address:
        EU: 0x22DF878
        NA: 0x22DEF38
        JP: 0x22E05D8
      description: |-
        Called at the start of a dungeon. Initializes the dungeon struct from specified dungeon data. Includes a loop that does not break until the dungeon is cleared, and another one inside it that runs until the current floor ends.
        
        r0: Pointer to the struct containing info used to initialize the dungeon. See type dungeon_init for details.
        r1: Pointer to the dungeon data struct that will be used during the dungeon.
    - name: EntityIsValid
      address:
        EU:
          - 0x22E0C94
          - 0x22E235C
          - 0x22E2947
          - 0x22E3C98
          - 0x22E4168
          - 0x22E9FA4
          - 0x22ECFB8
          - 0x22ED770
          - 0x22EECF8
          - 0x22F0154
          - 0x22F0F44
          - 0x22F5C48
          - 0x22F6C60
          - 0x22F7D1C
          - 0x22FD398
          - 0x22FEEB8
          - 0x2300B10
          - 0x2303464
          - 0x23051E4
          - 0x2305FB8
          - 0x2306630
          - 0x2308924
          - 0x23099E8
          - 0x230F364
          - 0x230FA7C
          - 0x2311A70
          - 0x2312314
          - 0x2315B78
          - 0x2319794
          - 0x23198AC
          - 0x231A9EC
          - 0x231BBF4
          - 0x231D630
          - 0x231F840
          - 0x231FFD8
          - 0x2320664
          - 0x2320BE4
          - 0x23211CC
          - 0x2326088
          - 0x2328A78
          - 0x232AE44
          - 0x232CF70
          - 0x232EC90
          - 0x232F280
          - 0x23349EC
          - 0x2335B18
          - 0x2338878
          - 0x23456DC
          - 0x2346284
          - 0x23487A4
          - 0x234A47C
          - 0x234E9D0
          - 0x234F820
        NA:
          - 0x22E0354
          - 0x22E1A1C
          - 0x22E32E8
          - 0x22E37B8
          - 0x22E95F4
          - 0x22EC608
          - 0x22ECDC0
          - 0x22EE348
          - 0x22EF7A0
          - 0x22F0590
          - 0x22F528C
          - 0x22F62A8
          - 0x22F7364
          - 0x22FC99C
          - 0x22FED98
          - 0x23000E4
          - 0x2302A38
          - 0x23047B8
          - 0x230558C
          - 0x2305C04
          - 0x2307EF8
          - 0x230827C
          - 0x2308FBC
          - 0x230E8F0
          - 0x230F008
          - 0x2311010
          - 0x23118B4
          - 0x2315118
          - 0x2318D34
          - 0x2318E4C
          - 0x2319F8C
          - 0x231B194
          - 0x231CBC8
          - 0x231EDD8
          - 0x231F570
          - 0x231FBFC
          - 0x232017C
          - 0x2320764
          - 0x2321438
          - 0x2325620
          - 0x232800C
          - 0x232A3D8
          - 0x232C500
          - 0x232E250
          - 0x232E840
          - 0x2333FAC
          - 0x23350D8
          - 0x2337CA8
          - 0x2344AF8
          - 0x2345698
          - 0x2347BA4
          - 0x234987C
          - 0x234DDD0
          - 0x234EC14
        JP:
          - 0x2312538
          - 0x2312DCC
          - 0x23165F0
          - 0x23364C4
      description: |-
        Checks if an entity pointer points to a valid entity (not entity type 0, which represents no entity).
        
        r0: entity pointer
        return: bool
    - name: GetFloorType
      address:
        EU: 0x22E0CF0
        NA: 0x22E03B0
        JP: 0x22E1A48
      description: |-
        Get the current floor type.
        
        Floor types:
          0 appears to mean the current floor is "normal"
          1 appears to mean the current floor is a fixed floor
          2 means the current floor has a rescue point
        
        return: floor type
    - name: TryForcedLoss
      address:
        EU: 0x22E0F60
        NA: 0x22E0620
        JP: 0x22E1CAC
      description: |-
        Attempts to trigger a forced loss of the type specified in dungeon::forced_loss_reason.
        
        r0: if true, the function will not check for the end of the floor condition and will skip other (unknown) actions in case of forced loss.
        return: true if the forced loss happens, false otherwise
    - name: IsBossFight
      address:
        EU: 0x22E11A4
        NA: 0x22E0864
        JP: 0x22E1EF4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: fixed_room_id
        return: bool
    - name: IsCurrentFixedRoomBossFight
      address:
        EU: 0x22E11C0
        NA: 0x22E0880
        JP: 0x22E1F10
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        return: bool
    - name: IsMarowakTrainingMaze
      address:
        EU: 0x22E11E0
        NA: 0x22E08A0
        JP: 0x22E1F30
      description: |-
        Check if the current dungeon is one of the training mazes in Marowak Dojo (this excludes Final Maze).
        
        return: bool
    - name: FixedRoomIsSubstituteRoom
      address:
        EU: 0x22E120C
        NA: 0x22E08CC
      description: |-
        Checks if the current fixed room is the "substitute room" (ID 0x6E).
        
        return: bool
    - name: StoryRestrictionsEnabled
      address:
        EU: 0x22E1268
        NA: 0x22E0928
        JP: 0x22E1FB8
      description: |-
        Returns true if certain special restrictions are enabled.
        
        If true, you will get kicked out of the dungeon if a team member that passes the arm9::JoinedAtRangeCheck2 check faints.
        
        return: !dungeon::nonstory_flag || dungeon::hidden_land_flag
    - name: GetScenarioBalanceVeneer
      address:
        EU: 0x22E129C
        NA: 0x22E095C
      description: |-
        Likely a linker-generated veneer for GetScenarioBalance.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
    - name: FadeToBlack
      address:
        EU: 0x22E12A8
        NA: 0x22E0968
        JP: 0x22E1FF8
      description: |-
        Fades the screen to black across several frames.
        
        No params.
    - name: GetTileAtEntity
      address:
        EU: 0x22E1F68
        NA: 0x22E1628
        JP: 0x22E2CB8
      description: |-
        Returns a pointer to the tile where an entity is located.
        
        r0: pointer to entity
        returns: pointer to tile
    - name: SpawnTrap
      address:
        EU: 0x22E2BA0
        NA: 0x22E2260
        JP: 0x22E38F0
      description: |-
        Spawns a trap on the floor. Fails if there are more than 64 traps already on the floor.
        
        This modifies the appropriate fields on the dungeon struct, initializing new entries in the entity table and the trap info list.
        
        r0: trap ID
        r1: position
        r2: team (see struct trap::team)
        r3: flags (see struct trap::team)
        return: entity pointer for the newly added trap, or null on failure
    - name: SpawnItemEntity
      address:
        EU: 0x22E2C54
        NA: 0x22E2314
      description: |-
        Spawns a blank item entity on the floor. Fails if there are more than 64 items already on the floor.
        
        This initializes a new entry in the entity table and points it to the corresponding slot in the item info list.
        
        r0: position
        return: entity pointer for the newly added item, or null on failure
    - name: CanTargetEntity
      address:
        EU: 0x22E3150
        NA: 0x22E2810
        JP: 0x22E3DE0
      description: |-
        Checks if a monster can target another entity when controlled by the AI.
        More specifically, it checks if the target is invisible, if the user can see invisible monsters, if the user is blinded and if the target position is in sight from the position of the user (this last check is done by calling IsPositionInSight with the user's and the target's position).
        
        r0: User entity pointer
        r1: Target entity pointer
        return: True if the user can target the target
    - name: CanTargetPosition
      address:
        EU: 0x22E3294
        NA: 0x22E2954
        JP: 0x22E3FE8
      description: |-
        Checks if a monster can target a position. This function just calls IsPositionInSight using the position of the user as the origin.
        
        r0: Entity pointer
        r1: Target position
        return: True if the specified monster can target the target position, false otherwise.
    - name: GetTeamMemberIndex
      address:
        EU: 0x22E3378
        NA: 0x22E2A38
      description: |-
        Given a pointer to an entity, returns its index on the entity list, or null if the entity can't be found on the first 4 slots of the list.
        
        r0: Pointer to the entity to find
        return: Index of the specified entity on the entity list, or null if it's not on the first 4 slots.
    - name: SubstitutePlaceholderStringTags
      address:
        EU: 0x22E3418
        NA: 0x22E2AD8
        JP: 0x22E416C
      description: |-
        Replaces instances of a given placeholder tag by the string representation of the given entity.
        
        From the eos-move-effects docs (which are somewhat nebulous): "Replaces the string at StringID [r0] by the string representation of the target [r1] (aka its name). Any message with the string manipulator '[string:StringID]' will use that string".
        
        The game uses various placeholder tags in its strings, which you can read about here: https://textbox.skytemple.org/.
        
        r0: string ID (unclear what this means)
        r1: entity pointer
        r2: ?
    - name: UpdateMapSurveyorFlag
      address:
        EU: 0x22E375C
        NA: 0x22E2DD8
      description: |-
        Sets the Map Surveyor flag in the dungeon struct to true if a team member has Map Surveyor, sets it to false otherwise.
        
        This function has two variants: in the EU ROM, it will return true if the flag was changed. The NA version will return the new value of the flag instead.
        
        return: bool
    - name: PointCameraToMonster
      address:
        EU: 0x22E3804
        NA: 0x22E2E54
      description: |-
        Points the camera to the specified monster.
        
        r0: Entity pointer
        r1: ?
    - name: UpdateCamera
      address:
        EU: 0x22E3874
        NA: 0x22E2EC4
      description: |-
        Called every frame. Sets the camera to the right coordinates depending on the monster it points to.
        
        It also takes care of updating the minimap, checking which elements should be shown on it, as well as whether the screen should be black due to the blinker status.
        
        r0: ?
    - name: ItemIsActive
      address:
        EU:
          - 0x22E3CBC
          - 0x22EECC8
          - 0x22F6350
          - 0x23002C4
          - 0x23030F8
          - 0x2308948
          - 0x230B450
          - 0x230EFEC
          - 0x2310284
          - 0x2311A94
          - 0x2312658
          - 0x2315B9C
          - 0x2348750
        NA:
          - 0x22E330C
          - 0x22EE318
          - 0x22F5994
          - 0x22FF898
          - 0x23026CC
          - 0x2307F1C
          - 0x230A9DC
          - 0x230E578
          - 0x230F810
          - 0x2311034
          - 0x2311BF8
          - 0x231513C
          - 0x2347B50
        JP:
          - 0x2300CA8
          - 0x2316614
      description: |-
        Checks if a monster is holding a certain item that isn't disabled by Klutz.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: UpdateStatusIconFlags
      address:
        EU: 0x22E4464
        NA: 0x22E3AB4
        JP: 0x22E5124
      description: |-
        Sets a monster's status_icon_flags bitfield according to its current status effects. Does not affect a Sudowoodo in the "permanent sleep" state (statuses::sleep == 0x7F).
        
        Some of the status effect in monster::statuses are used as an index to access an array, where every group of 8 bytes represents a bitmask. All masks are added in a bitwise OR and then stored in monster::status_icon.
        
        Also sets icon flags for statuses::exposed, statuses::grudge, critical HP and lowered stats with explicit checks, and applies the effect of the Identifier Orb (see dungeon::identify_orb_flag).
        
        r0: entity pointer
    - name: LoadMappaFileAttributes
      address:
        EU: 0x22E796C
        NA: 0x22E6FBC
        JP: 0x22E862C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        This function processes the spawn list of the current floor, checking which species can spawn, capping the amount of spawnable species on the floor to 14, randomly choosing which 14 species will spawn and ensuring that the sprite size of all the species combined does not exceed the maximum of 0x58000 bytes (352 KB). Kecleon and the Decoy are always included in the random selection.
        
        r0: quick_saved
        r1: ???
        r2: special_process
    - name: IsOnMonsterSpawnList
      address:
        EU: 0x22E86FC
        NA: 0x22E7D4C
        JP: 0x22E93B4
      description: |-
        Returns true if the specified monster is included in the floor's monster spawn list (the modified list after a maximum of 14 different species were chosen, not the raw list read from the mappa file).
        
        r0: Monster ID
        return: bool
    - name: GetMonsterIdToSpawn
      address:
        EU: 0x22E8750
        NA: 0x22E7DA0
        JP: 0x22E9408
      description: |-
        Get the id of the monster to be randomly spawned.
        
        r0: the spawn weight to use (0 for normal, 1 for monster house)
        return: monster ID
    - name: GetMonsterLevelToSpawn
      address:
        EU: 0x22E8808
        NA: 0x22E7E58
        JP: 0x22E94C0
      description: |-
        Get the level of the monster to be spawned, given its id.
        
        r0: monster ID
        return: Level of the monster to be spawned, or 1 if the specified ID can't be found on the floor's spawn table.
    - name: GetDirectionTowardsPosition
      address:
        EU: 0x22E99D0
        NA: 0x22E9020
        JP: 0x22EA688
      description: |-
        Gets the direction in which a monster should move to go from the origin position to the target position
        
        r0: Origin position
        r1: Target position
        return: Direction in which to move to reach the target position from the origin position
    - name: GetChebyshevDistance
      address:
        EU: 0x22E9A3C
        NA: 0x22E908C
        JP: 0x22EA6F4
      description: |-
        Returns the Chebyshev distance between two positions. Calculated as max(abs(x0-x1), abs(y0-y1)).
        
        r0: Position A
        r1: Position B
        return: Chebyshev Distance between position A and position B
    - name: IsPositionInSight
      address:
        EU: 0x22E9B54
        NA: 0x22E91A4
        JP: 0x22EA80C
      description: |-
        Checks if a given target position is in sight from a given origin position.
        There's multiple factors that affect this check, but generally, it's true if both positions are in the same room or within 2 tiles of each other.
        
        r0: Origin position
        r1: Target position
        r2: True to assume the entity standing on the origin position has the dropeye status
        return: True if the target position is in sight from the origin position
    - name: GetLeader
      address:
        EU: 0x22E9F30
        NA: 0x22E9580
        JP: 0x22EABE8
      description: |-
        Gets the pointer to the entity that is currently leading the team, or null if none of the first 4 entities is a valid monster with its is_team_leader flag set. It also sets LEADER_PTR to the result before returning it.
        
        return: Pointer to the current leader of the team or null if there's no valid leader.
    - name: GetLeaderMonster
      address:
        EU: 0x22E9FC8
        NA: 0x22E9618
      description: |-
        Returns a pointer to the monster data of the current leader.
        
        No params.
    - name: TickStatusTurnCounter
      address:
        EU: 0x22EA3F4
        NA: 0x22E9A44
        JP: 0x22EB0AC
      description: |-
        Ticks down a turn counter for a status condition. If the counter equals 0x7F, it will not be decreased.
        
        r0: pointer to the status turn counter
        return: new counter value
    - name: AdvanceFrame
      address:
        EU: 0x22EA990
        NA: 0x22E9FE0
        JP: 0x22EB648
      description: |-
        Advances one frame. Does not return until the next frame starts.
        
        r0: ? - Unused by the function
    - name: GenerateDungeonRngSeed
      address:
        EU: 0x22EB330
        NA: 0x22EA980
        JP: 0x22EBFE8
      description: |-
        Generates a seed with which to initialize the dungeon PRNG.
        
        The seed is calculated by starting with a different seed, the "preseed" x0 (defaults to 1, but can be set by other functions). The preseed is iterated twice with the same recurrence relation used in the primary LCG to generate two pseudorandom 32-bit numbers x1 and x2. The output seed is then computed as
          seed = (x1 & 0xFF0000) | (x2 >> 0x10) | 1
        The value x1 is then saved as the new preseed.
        
        This method of seeding the dungeon PRNG appears to be used only sometimes, depending on certain flags in the data for a given dungeon.
        
        return: RNG seed
    - name: GetDungeonRngPreseed
      address:
        EU: 0x22EB37C
        NA: 0x22EA9CC
        JP: 0x22EC034
      description: |-
        Gets the current preseed stored in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        return: current dungeon RNG preseed
    - name: SetDungeonRngPreseed
      address:
        EU: 0x22EB38C
        NA: 0x22EA9DC
        JP: 0x22EC044
      description: |-
        Sets the preseed in the global dungeon PRNG state. See GenerateDungeonRngSeed for more information.
        
        r0: preseed
    - name: InitDungeonRng
      address:
        EU: 0x22EB39C
        NA: 0x22EA9EC
        JP: 0x22EC054
      description: |-
        Initialize (or reinitialize) the dungeon PRNG with a given seed. The primary LCG and the five secondary LCGs are initialized jointly, and with the same seed.
        
        r0: seed
    - name: DungeonRand16Bit
      address:
        EU: 0x22EB3D0
        NA: 0x22EAA20
        JP: 0x22EC088
      description: |-
        Computes a pseudorandom 16-bit integer using the dungeon PRNG.
        
        Note that the dungeon PRNG is only used in dungeon mode (as evidenced by these functions being in overlay 29). The game uses another lower-quality PRNG (see arm9.yml) for other needs.
        
        Random numbers are generated with a linear congruential generator (LCG). The game actually maintains 6 separate sequences that can be used for generation: a primary LCG and 5 secondary LCGs. The generator used depends on parameters set on the global PRNG state.
        
        All dungeon LCGs have a modulus of 2^32 and a multiplier of 1566083941 (see DUNGEON_PRNG_LCG_MULTIPLIER). The primary LCG uses an increment of 1, while the secondary LCGs use an increment of 2531011 (see DUNGEON_PRNG_LCG_INCREMENT_SECONDARY). So, for example, the primary LCG uses the recurrence relation:
          x = (1566083941*x_prev + 1) % 2^32
        
        Since the dungeon LCGs generate 32-bit integers rather than 16-bit, the primary LCG yields 16-bit values by taking the upper 16 bits of the computed 32-bit value. The secondary LCGs yield 16-bit values by taking the lower 16 bits of the computed 32-bit value.
        
        All of the dungeon LCGs have a hard-coded default seed of 1, but in practice the seed is set with a call to InitDungeonRng during dungeon initialization.
        
        return: pseudorandom int on the interval [0, 65535]
    - name: DungeonRandInt
      address:
        EU: 0x22EB448
        NA: 0x22EAA98
        JP: 0x22EC100
      description: |-
        Compute a pseudorandom integer under a given maximum value using the dungeon PRNG.
        
        r0: high
        return: pseudorandom integer on the interval [0, high - 1]
    - name: DungeonRandRange
      address:
        EU: 0x22EB470
        NA: 0x22EAAC0
        JP: 0x22EC128
      description: |-
        Compute a pseudorandom value between two integers using the dungeon PRNG.
        
        r0: x
        r1: y
        return: pseudorandom integer on the interval [min(x, y), max(x, y) - 1]
    - name: DungeonRandOutcome
      address:
        EU:
          - 0x22EB4D0
          - 0x22EB500
        NA:
          - 0x22EAB20
          - 0x22EAB50
        JP:
          - 0x22EC188
          - 0x22EC1B8
      description: |-
        Returns the result of a possibly biased coin flip (a Bernoulli random variable) with some success probability p, using the dungeon PRNG.
        
        r0: success percentage (100*p)
        return: true with probability p, false with probability (1-p)
    - name: CalcStatusDuration
      address:
        EU: 0x22EB530
        NA: 0x22EAB80
        JP: 0x22EC1E8
      description: |-
        Seems to calculate the duration of a volatile status on a monster.
        
        r0: entity pointer
        r1: pointer to a turn range (an array of two shorts {lower, higher})
        r2: flag for whether or not to factor in the Self Curer IQ skill and the Natural Cure ability
        return: number of turns for the status condition
    - name: DungeonRngUnsetSecondary
      address:
        EU: 0x22EB5E4
        NA: 0x22EAC34
        JP: 0x22EC29C
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation, and also resets the secondary LCG index back to 0.
        
        Similar to DungeonRngSetPrimary, but DungeonRngSetPrimary doesn't modify the secondary LCG index if it was already set to something other than 0.
        
        No params.
    - name: DungeonRngSetSecondary
      address:
        EU: 0x22EB5FC
        NA: 0x22EAC4C
        JP: 0x22EC2B4
      description: |-
        Sets the dungeon PRNG to use one of the 5 secondary LCGs for subsequent random number generation.
        
        r0: secondary LCG index
    - name: DungeonRngSetPrimary
      address:
        EU: 0x22EB614
        NA: 0x22EAC64
      description: |-
        Sets the dungeon PRNG to use the primary LCG for subsequent random number generation.
        
        No params.
    - name: ChangeDungeonMusic
      address:
        EU: 0x22EB7C4
        NA: 0x22EAE14
        JP: 0x22EC47C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: music ID
    - name: TrySwitchPlace
      address:
        EU: 0x22EBB28
        NA: 0x22EB178
        JP: 0x22EC7E0
      description: |-
        The user entity attempts to switch places with the target entity (i.e. by the effect of the Switcher Orb). 
        
        The function checks for the Suction Cups ability for both the user and the target, and for the Mold Breaker ability on the user.
        
        r0: pointer to user entity
        r1: pointer to target entity
    - name: ClearMonsterActionFields
      address:
        EU: 0x22EBDA4
        NA: 0x22EB3F4
        JP: 0x22ECA5C
      description: |-
        Clears the fields related to AI in the monster's data struct, setting them all to 0.
        Specifically, monster::action::action_id, monster::action::action_use_idx and monster::action::field_0xA are cleared.
        
        r0: Pointer to the monster's action field
    - name: SetMonsterActionFields
      address:
        EU: 0x22EBDB8
        NA: 0x22EB408
        JP: 0x22ECA70
      description: |-
        Sets some the fields related to AI in the monster's data struct.
        Specifically, monster::action::action_id, monster::action::action_use_idx and monster::action::field_0xA. The last 2 are always set to 0.
        
        r0: Pointer to the monster's action field
        r1: Value to set monster::action::action_id to.
    - name: SetActionPassTurnOrWalk
      address:
        EU: 0x22EBDCC
        NA: 0x22EB41C
        JP: 0x22ECA84
      description: |-
        Sets a monster's action to action::ACTION_PASS_TURN or action::ACTION_WALK, depending on the result of GetCanMoveFlag for the monster's ID.
        
        r0: Pointer to the monster's action field
        r1: Monster ID
    - name: GetItemAction
      address:
        EU: 0x22EBF88
        NA: 0x22EB5D8
        JP: 0x22ECC40
      description: |-
        Returns the action ID that corresponds to an item given its ID.
        
        The action is based on the category of the item (see ITEM_CATEGORY_ACTIONS), unless the specified ID is 0x16B, in which case ACTION_UNK_35 is returned.
        Some items can have unexpected actions, such as thrown items, which have ACTION_NOTHING. This is done to prevent duplicate actions from being listed in the menu (since items always have a "throw" option), since a return value of ACTION_NOTHING prevents the option from showing up in the menu.
        
        r0: Item ID
        return: Action ID associated with the specified item
    - name: AddDungeonSubMenuOption
      address:
        EU: 0x22EC1CC
        NA: 0x22EB81C
        JP: 0x22ECE84
      description: |-
        Adds an option to the list of actions that can be taken on a pokémon, item or move to the currently active sub-menu on dungeon mode (team, moves, items, etc.).
        
        r0: Action ID
        r1: True if the option should be enabled, false otherwise
    - name: DisableDungeonSubMenuOption
      address:
        EU: 0x22EC2A4
        NA: 0x22EB8F4
      description: |-
        Disables an option that was addeed to a dungeon sub-menu.
        
        r0: Action ID of the option that should be disabled
    - name: SetActionRegularAttack
      address:
        EU: 0x22EC600
        NA: 0x22EBC50
        JP: 0x22ED2B8
      description: |-
        Sets a monster's action to action::ACTION_REGULAR_ATTACK, with a specified direction.
        
        r0: Pointer to the monster's action field
        r1: Direction in which to use the move. Gets stored in monster::action::direction.
    - name: SetActionUseMoveAi
      address:
        EU: 0x22EC66C
        NA: 0x22EBCBC
        JP: 0x22ED324
      description: |-
        Sets a monster's action to action::ACTION_USE_MOVE_AI, with a specified direction and move index.
        
        r0: Pointer to the monster's action field
        r1: Index of the move to use (0-3). Gets stored in monster::action::action_use_idx.
        r2: Direction in which to use the move. Gets stored in monster::action::direction.
    - name: RunFractionalTurn
      address:
        EU: 0x22EC6B8
        NA: 0x22EBD08
        JP: 0x22ED370
      description: |-
        The main function which executes the actions that take place in a fractional turn. Called in a loop by RunDungeon while IsFloorOver returns false.
        
        r0: first loop flag (true when the function is first called during a floor)
    - name: RunLeaderTurn
      address:
        EU: 0x22ECCB8
        NA: 0x22EC308
        JP: 0x22ED970
      description: |-
        Handles the leader's turn. Includes a movement speed check that might cause it to return early if the leader isn't fast enough to act in this fractional turn. If that check (and some others) pass, the function does not return until the leader performs an action.
        
        r0: ?
        return: true if the leader has performed an action
    - name: TrySpawnMonsterAndActivatePlusMinus
      address:
        EU: 0x22ED08C
        NA: 0x22EC6DC
        JP: 0x22EDD44
      description: |-
        Called at the beginning of RunFractionalTurn. Executed only if FRACTIONAL_TURN_SEQUENCE[fractional_turn * 2] is not 0.
        
        First it calls TrySpawnMonsterAndTickSpawnCounter, then tries to activate the Plus and Minus abilities for both allies and enemies, and finally calls TryForcedLoss.
        
        No params.
    - name: IsFloorOver
      address:
        EU: 0x22ED198
        NA: 0x22EC7E8
        JP: 0x22EDE50
      description: |-
        Checks if the current floor should end, and updates dungeon::floor_loop_status if required.
        If the player has been defeated, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_LEADER_FAINTED.
        If dungeon::end_floor_flag is 1 or 2, sets dungeon::floor_loop_status to floor_loop_status::FLOOR_LOOP_NEXT_FLOOR.
        
        return: true if the current floor should end
    - name: DecrementWindCounter
      address:
        EU: 0x22ED4F8
        NA: 0x22ECB48
        JP: 0x22EE1AC
      description: |-
        Decrements dungeon::wind_turns and displays a wind warning message if required.
        
        No params.
    - name: SetForcedLossReason
      address:
        EU: 0x22ED9B8
        NA: 0x22ED008
        JP: 0x22EE66C
      description: |-
        Sets dungeon::forced_loss_reason to the specified value
        
        r0: Forced loss reason
    - name: GetForcedLossReason
      address:
        EU: 0x22ED9CC
        NA: 0x22ED01C
        JP: 0x22EE680
      description: |-
        Returns dungeon::forced_loss_reason
        
        return: forced_loss_reason
    - name: BindTrapToTile
      address:
        EU: 0x22EE208
        NA: 0x22ED858
        JP: 0x22EEEBC
      description: |-
        Sets the given tile's associated object to be the given trap, and sets the visibility of the trap.
        
        r0: tile pointer
        r1: entity pointer
        r2: visibility flag
    - name: SpawnEnemyTrapAtPos
      address:
        EU: 0x22EE320
        NA: 0x22ED970
        JP: 0x22EEFD4
      description: |-
        A convenience wrapper around SpawnTrap and BindTrapToTile. Always passes 0 for the team parameter (making it an enemy trap).
        
        r0: trap ID
        r1: x position
        r2: y position
        r3: flags
        stack[0]: visibility flag
    - name: GetLeaderAction
      address:
        EU: 0x22F1540
        NA: 0x22F0B8C
      description: |-
        Returns a pointer to the action data of the current leader (field 0x4A on its monster struct).
        
        No params.
    - name: SetLeaderAction
      address:
        EU: 0x22F1890
        NA: 0x22F0EDC
        JP: 0x22F24DC
      description: |-
        Sets the leader's action field depending on the inputs given by the player.
        
        This function also accounts for other special situations that can force a certain action, such as when the leader is running. The function also takes care of opening the main menu when X is pressed.
        The function generally doesn't return until the player has an action set.
        
        No params.
    - name: ChangeLeader
      address:
        EU: 0x22F42F0
        NA: 0x22F3934
        JP: 0x22F4F2C
      description: |-
        Tries to change the current leader to the monster specified by dungeon::new_leader.
        
        Accounts for situations that can prevent changing leaders, such as having stolen from a Kecleon shop. If one of those situations prevents changing leaders, prints the corresponding message to the message log.
        
        No params.
    - name: ResetDamageData
      address:
        EU: 0x22F77D0
        NA: 0x22F6E18
        JP: 0x22F83FC
      description: |-
        Zeroes the damage data struct, which is output by the damage calculation function.
        
        r0: damage data pointer
    - name: DungeonGetTotalSpriteFileSize
      address:
        EU: 0x22F7A20
        NA: 0x22F7068
        JP: 0x22F8634
      description: |-
        Checks Castform and Cherrim
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        return: sprite file size
    - name: DungeonGetSpriteIndex
      address:
        EU: 0x22F7D40
        NA: 0x22F7388
      description: |-
        Gets the sprite index of the specified monster on this floor
        
        r0: Monster ID
        return: Sprite index of the specified monster ID
    - name: JoinedAtRangeCheck2Veneer
      address:
        EU: 0x22F7D60
        NA: 0x22F73A8
      description: |-
        Likely a linker-generated veneer for arm9::JoinedAtRangeCheck2.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: FloorNumberIsEven
      address:
        EU: 0x22F7D6C
        NA: 0x22F73B4
        JP: 0x22F897C
      description: |-
        Checks if the current dungeon floor number is even (probably to determine whether an enemy spawn should be female).
        
        Has a special check to return false for Labyrinth Cave B10F (the Gabite boss fight).
        
        return: bool
    - name: GetKecleonIdToSpawnByFloor
      address:
        EU: 0x22F7DA4
        NA: 0x22F73EC
        JP: 0x22F89B4
      description: |-
        If the current floor number is even, returns female Kecleon's id (0x3D7), otherwise returns male Kecleon's id (0x17F).
        
        return: monster ID
    - name: StoreSpriteFileIndexBothGenders
      address:
        EU: 0x22F7DC4
        NA: 0x22F740C
        JP: 0x22F89D4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        r1: file ID
    - name: LoadMonsterSpriteInner
      address:
        EU: 0x22F7E8C
        NA: 0x22F74D4
        JP: 0x22F8A9C
      description: |-
        This is called by LoadMonsterSprite a bunch of times.
        
        r0: monster ID
    - name: SwapMonsterWanFileIndex
      address:
        EU: 0x22F7F8C
        NA: 0x22F75D4
        JP: 0x22F8B98
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: src_id
        r1: dst_id
    - name: LoadMonsterSprite
      address:
        EU: 0x22F800C
        NA: 0x22F7654
        JP: 0x22F8C18
      description: |-
        Loads the sprite of the specified monster to use it in a dungeon.
        
        Irdkwia's notes: Handles Castform/Cherrim/Deoxys
        
        r0: monster ID
        r1: ?
    - name: DeleteMonsterSpriteFile
      address:
        EU: 0x22F8120
        NA: 0x22F7768
        JP: 0x22F8D2C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
    - name: DeleteAllMonsterSpriteFiles
      address:
        EU: 0x22F81BC
        NA: 0x22F7804
        JP: 0x22F8DC4
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: EuFaintCheck
      address:
        EU: 0x22F88E8
      description: |-
        This function is exclusive to the EU ROM. Seems to perform a check to see if the monster who just fainted was a team member who should cause the minimap to be updated (or something like that, maybe related to the Map Surveyor IQ skill) and if it passes, updates the minimap.
        The function ends by calling another 2 functions. In US ROMs, calls to EUFaintCheck are replaced by calls to those two functions. This seems to indicate that this function fixes some edge case glitch that can happen when a team member faints.
        
        r0: False if the fainted entity was a team member
        r1: True to set an unknown byte in the RAM to 1
    - name: HandleFaint
      address:
        EU: 0x22F8938
        NA: 0x22F7F30
        JP: 0x22F94F0
      description: |-
        Handles a fainted pokémon (reviving does not count as fainting).
        
        r0: Fainted entity
        r1: Faint reason (move ID or greater than the max move id for other causes)
        r2: Entity responsible of the fainting
    - name: UpdateAiTargetPos
      address:
        EU: 0x22F9B50
        NA: 0x22F9144
        JP: 0x22FA708
      description: |-
        Given a monster, updates its target_pos field based on its current position and the direction in which it plans to attack.
        
        r0: Entity pointer
    - name: SetMonsterTypeAndAbility
      address:
        EU: 0x22F9BA0
        NA: 0x22F9194
        JP: 0x22FA758
      description: |-
        Checks Forecast ability
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: target entity pointer
    - name: TryActivateSlowStart
      address:
        EU: 0x22F9C48
        NA: 0x22F923C
        JP: 0x22FA800
      description: |-
        Runs a check over all monsters on the field for the ability Slow Start, and lowers the speed of those who have it.
        
        No params
    - name: TryActivateArtificialWeatherAbilities
      address:
        EU: 0x22F9CE4
        NA: 0x22F92D8
        JP: 0x22FA89C
      description: |-
        Runs a check over all monsters on the field for abilities that affect the weather and changes the floor's weather accordingly.
        
        No params
    - name: GetMonsterApparentId
      address:
        EU: 0x22F9E14
        NA: 0x22F9408
        JP: 0x22FA9CC
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: target entity pointer
        r1: current_id
        return: ?
    - name: DefenderAbilityIsActive
      address:
        EU:
          - 0x22FA0D8
          - 0x2302438
          - 0x230B3B4
          - 0x23125F4
          - 0x23237CC
          - 0x23290A0
          - 0x232A980
          - 0x232C840
          - 0x232E860
          - 0x233344C
        NA:
          - 0x22F96CC
          - 0x2301A0C
          - 0x230A940
          - 0x2311B94
          - 0x2322D64
          - 0x2328634
          - 0x2329F14
          - 0x232BDD0
          - 0x232DE20
          - 0x2332A0C
        JP: 0x2302F74
      description: |-
        Checks if a defender has an active ability that isn't disabled by an attacker's Mold Breaker.
        
        There are two versions of this function, which share the same logic but have slightly different assembly. This is probably due to differences in compiler optimizations at different addresses.
        
        r0: attacker pointer
        r1: defender pointer
        r2: ability ID to check on the defender
        r3: flag for whether the attacker's ability is enabled
        return: bool
    - name: IsMonster
      address:
        EU:
          - 0x22FA12C
          - 0x230248C
          - 0x230B408
          - 0x23103F4
          - 0x2319510
          - 0x231B434
          - 0x231BD78
          - 0x2323820
          - 0x234E060
        NA:
          - 0x22F9720
          - 0x2301A60
          - 0x230A994
          - 0x230F980
          - 0x2318AB0
          - 0x231A9D4
          - 0x231B318
          - 0x2322DB8
          - 0x234D460
      description: |-
        Checks if an entity is a monster (entity type 1).
        
        r0: entity pointer
        return: bool
    - name: TryActivateTruant
      address:
        EU: 0x22FA1FC
        NA: 0x22F97F0
        JP: 0x22FADA8
      description: |-
        Checks if an entity has the ability Truant, and if so tries to apply the pause status to it.
        
        r0: pointer to entity
    - name: TryPointCameraToMonster
      address:
        EU: 0x22FA2C0
        NA: 0x22F98B4
      description: |-
        Attempts to place the camera on top of the specified monster.
        
        If the camera is already on top of the specified entity, the function does nothing.
        
        r0: Entity pointer. Must be a monster, otherwise the function does nothing.
        r1: ?
        r2: ?
    - name: RestorePpAllMovesSetFlags
      address:
        EU: 0x22FA480
        NA: 0x22F9A74
      description: |-
        Restores PP for all moves, clears flags move::f_consume_2_pp, move::flags2_unk5 and move::flags2_unk7, and sets flag move::f_consume_pp.
        Called when a monster is revived.
        
        r0: pointer to entity whose moves will be restored
    - name: ShouldMonsterHeadToStairs
      address:
        EU: 0x22FAE3C
        NA: 0x22FA430
        JP: 0x22FB9D8
      description: |-
        Checks if a given monster should try to reach the stairs when controlled by the AI
        
        r0: Entity pointer
        return: True if the monster should try to reach the stairs, false otherwise
    - name: MewSpawnCheck
      address:
        EU: 0x22FAFFC
        NA: 0x22FA5F0
        JP: 0x22FBB98
      description: |-
        If the monster id parameter is 0x97 (Mew), returns false if either dungeon::mew_cannot_spawn or the second parameter are true.
        
        Called before spawning an enemy, appears to be checking if Mew can spawn on the current floor.
        
        r0: monster id
        r1: return false if the monster id is Mew
        return: bool
    - name: ExclusiveItemEffectIsActive
      address:
        EU:
          - 0x22FB6A4
          - 0x2300954
          - 0x230B42C
          - 0x2310320
          - 0x2311AC4
          - 0x231524C
          - 0x231A208
          - 0x231B2DC
          - 0x2324380
          - 0x2333428
          - 0x2348780
          - 0x2348EB0
        NA:
          - 0x22FAC98
          - 0x22FFF28
          - 0x230A9B8
          - 0x230F8AC
          - 0x2311064
          - 0x23147EC
          - 0x23197A8
          - 0x231A87C
          - 0x2323918
          - 0x23329E8
          - 0x2347B80
          - 0x23482B0
        JP:
          - 0x2315CC0
          - 0x2349638
      description: |-
        Checks if a monster is a team member under the effects of a certain exclusive item effect.
        
        r0: entity pointer
        r1: exclusive item effect ID
        return: bool
    - name: GetTeamMemberWithIqSkill
      address:
        EU: 0x22FBA04
        NA: 0x22FAFF8
        JP: 0x22FC580
      description: |-
        Returns an entity pointer to the first team member which has the specified iq skill.
        
        r0: iq skill id
        return: pointer to entity
    - name: TeamMemberHasEnabledIqSkill
      address:
        EU: 0x22FBA70
        NA: 0x22FB064
        JP: 0x22FC5EC
      description: |-
        Returns true if any team member has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: TeamLeaderIqSkillIsEnabled
      address:
        EU: 0x22FBA8C
        NA: 0x22FB080
        JP: 0x22FC608
      description: |-
        Returns true the leader has the specified iq skill.
        
        r0: iq skill id
        return: bool
    - name: CheckSpawnThreshold
      address:
        EU: 0x22FBFF8
        NA: 0x22FB5EC
        JP: 0x22FCAC0
      description: |-
        Checks if a given monster ID can spawn in dungeons.
        
        The function returns true if the monster's spawn threshold value is <= SCENARIO_BALANCE_FLAG
        
        r0: monster ID
        return: True if the monster can spawn, false otherwise
    - name: HasLowHealth
      address:
        EU: 0x22FC01C
        NA: 0x22FB610
        JP: 0x22FCAE4
      description: |-
        Checks if the entity passed is a valid monster, and if it's at low health (below 25% rounded down)
        
        r0: entity pointer
        return: bool
    - name: IsSpecialStoryAlly
      address:
        EU: 0x22FC4CC
        NA: 0x22FBAD0
        JP: 0x22FCFA4
      description: |-
        Checks if a monster is a special story ally.
        
        This is a hard-coded check that looks at the monster's "Joined At" field. If the value is in the range [DUNGEON_JOINED_AT_BIDOOF, DUNGEON_DUMMY_0xE3], this check will return true.
        
        r0: monster pointer
        return: bool
    - name: IsExperienceLocked
      address:
        EU: 0x22FC4EC
        NA: 0x22FBAF0
        JP: 0x22FCFC4
      description: |-
        Checks if a monster does not gain experience.
        
        This basically just inverts IsSpecialStoryAlly, with the exception of also checking for the "Joined At" field being DUNGEON_CLIENT (is this set for mission clients?).
        
        r0: monster pointer
        return: bool
    - name: InitTeam
      address:
        EU: 0x22FCF08
        NA: 0x22FC50C
        JP: 0x22FD8FC
      description: |-
        Seems to initialize the team when entering a dungeon.
        
        r0: ?
    - name: SpawnMonster
      address:
        EU: 0x22FDA80
        NA: 0x22FD084
        JP: 0x22FE478
      description: |-
        Spawns the given monster on a tile.
        
        r0: pointer to struct spawned_monster_data
        r1: if true, the monster cannot spawn asleep, otherwise it will randomly be asleep
        return: pointer to entity
    - name: InitTeamMember
      address:
        EU: 0x22FDDB0
        NA: 0x22FD3B4
        JP: 0x22FE7A8
      description: |-
        Initializes a team member. Run at the start of each floor in a dungeon.
        
        r0: Monster ID
        r1: X position
        r2: Y position
        r3: Pointer to the struct containing the data of the team member to initialize
        stack[0]: ?
        stack[1]: ?
        stack[2]: ?
        stack[3]: ?
        stack[4]: ?
    - name: InitMonster
      address:
        EU: 0x22FE7BC
        NA: 0x22FDDC0
        JP: 0x22FF1B0
      description: |-
        Initializes a monster struct.
        
        r0: pointer to monster to initialize
        r1: some flag
    - name: ExecuteMonsterAction
      address:
        EU: 0x22FEEDC
        NA: 0x22FE4BC
        JP: 0x22FF8A4
      description: |-
        Executes the set action for the specified monster. Used for both AI actions and player-inputted actions. If the action is not ACTION_NOTHING, ACTION_PASS_TURN, ACTION_WALK or ACTION_UNK_4, the monster's already_acted field is set to true. Includes a switch based on the action ID that performs the action, although some of them aren't handled by said swtich.
        
        r0: Pointer to monster entity
    - name: HasStatusThatPreventsActing
      address:
        EU: 0x22FFBF4
        NA: 0x22FF1C8
        JP: 0x23005B8
      description: |-
        Returns true if the monster has any status problem that prevents it from acting
        
        r0: Entity pointer
        return: True if the specified monster can't act because of a status problem, false otherwise.
    - name: CalcSpeedStage
      address:
        EU: 0x2300820
        NA: 0x22FFDF4
        JP: 0x2301224
      description: |-
        Calculates the speed stage of a monster from its speed up/down counters. The second parameter is the weight of each counter (how many stages it will add/remove), but appears to be always 1. 
        Takes modifiers into account (paralysis, snowy weather, Time Tripper). Deoxys-speed, Shaymin-sky and enemy Kecleon during a thief alert get a flat +1 always.
        
        The calculated speed stage is both returned and saved in the monster's statuses struct.
        
        r0: pointer to entity
        r1: speed counter weight
        return: speed stage
    - name: CalcSpeedStageWrapper
      address:
        EU: 0x2300978
        NA: 0x22FFF4C
      description: |-
        Calls CalcSpeedStage with a speed counter weight of 1.
        
        r0: pointer to entity
        return: speed stage
    - name: GetNumberOfAttacks
      address:
        EU: 0x2300988
        NA: 0x22FFF5C
        JP: 0x230138C
      description: |-
        Returns the number of attacks that a monster can do in one turn (1 or 2).
        
        Checks for the abilities Swift Swim, Chlorophyll, Unburden, and for exclusive items.
        
        r0: pointer to entity
        returns: int
    - name: GetMonsterName
      address:
        EU: 0x2300B90
        NA: 0x2300164
        JP: 0x2301538
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: buffer
        r1: TargetInfo
    - name: SprintfStatic
      address:
        EU: 0x2300CF4
        NA: 0x23002C8
        JP: 0x23016D0
      description: |-
        Statically defined copy of sprintf(3) in overlay 29. See arm9.yml for more information.
        
        r0: str
        r1: format
        ...: variadic
        return: number of characters printed, excluding the null-terminator
    - name: IsMonsterCornered
      address:
        EU: 0x2301B44
        NA: 0x2301118
        JP: 0x230251C
      description: |-
        True if the given monster is cornered (it can't move in any direction)
        
        r0: Entity pointer
        return: True if the monster can't move in any direction, false otherwise.
    - name: CanAttackInDirection
      address:
        EU: 0x2301C60
        NA: 0x2301234
        JP: 0x2302694
      description: |-
        Returns whether a monster can attack in a given direction.
        The check fails if the destination tile is impassable, contains a monster that isn't of type entity_type::ENTITY_MONSTER or if the monster can't directly move from the current tile into the destination tile.
        
        r0: Entity pointer
        r1: Direction
        return: True if the monster can attack into the tile adjacent to them in the specified direction, false otherwise.
    - name: CanAiMonsterMoveInDirection
      address:
        EU: 0x2301D24
        NA: 0x23012F8
        JP: 0x23027B8
      description: |-
        Checks whether an AI-controlled monster can move in the specified direction.
        Accounts for walls, other monsters on the target position and IQ skills that might prevent a monster from moving into a specific location, such as House Avoider, Trap Avoider or Lava Evader.
        
        r0: Entity pointer
        r1: Direction
        r2: (output) True if movement was not possible because there was another monster on the target tile, false otherwise.
        return: True if the monster can move in the specified direction, false otherwise.
    - name: ShouldMonsterRunAway
      address:
        EU: 0x2301FE4
        NA: 0x23015B8
        JP: 0x2302B28
      description: |-
        Checks if a monster should run away from other monsters
        
        r0: Entity pointer
        return: True if the monster should run away, false otherwise
    - name: ShouldMonsterRunAwayVariation
      address:
        EU: 0x23020D4
        NA: 0x23016A8
        JP: 0x2302C18
      description: |-
        Calls ShouldMonsterRunAway and returns its result. It also calls another function if the result was true.
        
        r0: Entity pointer
        r1: ?
        return: Result of the call to ShouldMonsterRunAway
    - name: NoGastroAcidStatus
      address:
        EU: 0x2302708
        NA: 0x2301CDC
        JP: 0x2303234
      description: |-
        Checks if a monster does not have the Gastro Acid status.
        
        r0: entity pointer
        return: bool
    - name: AbilityIsActive
      address:
        EU: 0x230273C
        NA: 0x2301D10
        JP: 0x2303268
      description: |-
        Checks if a monster has a certain ability that isn't disabled by Gastro Acid.
        
        r0: entity pointer
        r1: ability ID
        return: bool
    - name: AbilityIsActiveVeneer
      address:
        EU: 0x23027A4
        NA: 0x2301D78
        JP: 0x23032D0
      description: |-
        Likely a linker-generated veneer for AbilityIsActive.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: entity pointer
        r1: ability ID
        return: bool
    - name: AbilityIsActiveAnyEntity
      address:
        EU: 0x23027B0
        NA: 0x2301D84
        JP: 0x23032DC
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: ability ID
        return: bool
    - name: LevitateIsActive
      address:
        EU: 0x2302844
        NA: 0x2301E18
        JP: 0x2303368
      description: |-
        Checks if a monster is levitating (has the effect of Levitate and Gravity is not active).
        
        r0: pointer to entity
        return: bool
    - name: MonsterIsType
      address:
        EU: 0x230287C
        NA: 0x2301E50
        JP: 0x23033A0
      description: |-
        Checks if a monster is a given type.
        
        r0: entity pointer
        r1: type ID
        return: bool
    - name: IsTypeAffectedByGravity
      address:
        EU: 0x23028B4
        NA: 0x2301E88
        JP: 0x23033D8
      description: |-
        Checks if Gravity is active and that the given type is affected (i.e., Flying type).
        
        r0: target entity pointer (unused)
        r1: type ID
        return: bool
    - name: HasTypeAffectedByGravity
      address:
        EU: 0x23028D8
        NA: 0x2301EAC
        JP: 0x23033FC
      description: |-
        Checks if Gravity is active and that the given monster is of an affected type (i.e., Flying type).
        
        r0: target entity pointer
        r1: type ID
        return: bool
    - name: CanSeeInvisibleMonsters
      address:
        EU: 0x2302918
        NA: 0x2301EEC
        JP: 0x230343C
      description: |-
        Returns whether a certain monster can see other invisible monsters.
        To be precise, this function returns true if the monster is holding Goggle Specs or if it has the status status::STATUS_EYEDROPS.
        
        r0: Entity pointer
        return: True if the monster can see invisible monsters.
    - name: HasDropeyeStatus
      address:
        EU: 0x230297C
        NA: 0x2301F50
        JP: 0x23034A0
      description: |-
        Returns whether a certain monster is under the effect of status::STATUS_DROPEYE.
        
        r0: Entity pointer
        return: True if the monster has dropeye status.
    - name: IqSkillIsEnabled
      address:
        EU: 0x23029AC
        NA: 0x2301F80
        JP: 0x23034D0
      description: |-
        Checks if a monster has a certain IQ skill enabled.
        
        r0: entity pointer
        r1: IQ skill ID
        return: bool
    - name: GetMoveTypeForMonster
      address:
        EU: 0x2302CA8
        NA: 0x230227C
        JP: 0x23037CC
      description: |-
        Check the type of a move when used by a certain monster. Accounts for special cases such as Hidden Power, Weather Ball, the regular attack...
        
        r0: Entity pointer
        r1: Pointer to move data
        return: Type of the move
    - name: GetMovePower
      address:
        EU: 0x2302D48
        NA: 0x230231C
        JP: 0x230386C
      description: |-
        Gets the power of a move, factoring in Ginseng/Space Globe boosts.
        
        r0: user pointer
        r1: move pointer
        return: move power
    - name: AddExpSpecial
      address:
        EU: 0x2302F68
        NA: 0x230253C
        JP: 0x2303A8C
      description: |-
        Adds to a monster's experience points, subject to experience boosting effects.
        
        This function appears to be called only under special circumstances. Possibly when granting experience from damage (e.g., Joy Ribbon)?
        
        Interestingly, the parameter in r0 isn't actually used. This might be a compiler optimization to avoid shuffling registers, since this function might be called alongside lots of other functions that have both the attacker and defender as the first two arguments.
        
        r0: attacker pointer
        r1: defender pointer
        r2: base experience gain, before boosts
    - name: EnemyEvolution
      address:
        EU: 0x2303128
        NA: 0x23026FC
        JP: 0x2303C4C
      description: |-
        Checks if the specified enemy should evolve because it just defeated an ally, and if so, attempts to evolve it.
        
        r0: Pointer to the enemy to check
    - name: TryDecreaseLevel
      address:
        EU: 0x23039B4
        NA: 0x2302F88
        JP: 0x23044D4
      description: |-
        Decrease the target monster's level if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of levels to decrease
        return: success flag
    - name: LevelUp
      address:
        EU: 0x2303A68
        NA: 0x230303C
        JP: 0x2304588
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message flag?
        r3: ?
        return: success flag?
    - name: EvolveMonster
      address:
        EU: 0x23046A8
        NA: 0x2303C7C
        JP: 0x23051CC
      description: |-
        Makes the specified monster evolve into the specified species.
        
        r0: Pointer to the entity to evolve
        r1: ?
        r2: Species to evolve into
    - name: GetSleepAnimationId
      address:
        EU: 0x23054E0
        NA: 0x2304AB4
        JP: 0x2306004
      description: |-
        Returns the animation id to be applied to a monster that has the sleep, napping, nightmare or bide status.
        
        Returns a different animation for sudowoodo and for monsters with infinite sleep turns (0x7F).
        
        r0: pointer to entity
        return: animation ID
    - name: DisplayActions
      address:
        EU: 0x2305A0C
        NA: 0x2304FE0
        JP: 0x2306530
      description: |-
        Graphically displays any pending actions that have happened but haven't been shown on screen yet. All actions are displayed at the same time. For example, this delayed display system is used to display multiple monsters moving at once even though they take turns sequentially.
        
        r0: Pointer to an entity. Can be null.
        returns: Seems to be true if there were any pending actions to display.
    - name: EndFrozenClassStatus
      address:
        EU: 0x2306C84
        NA: 0x2306258
        JP: 0x23077A8
      description: |-
        Cures the target's freeze, shadow hold, ingrain, petrified, constriction or wrap (both as user and as target) status due to the action of the user.
        
        r0: pointer to user
        r1: pointer to target
        r2: if true, the event will be printed to the log
    - name: EndCringeClassStatus
      address:
        EU: 0x2306E00
        NA: 0x23063D4
        JP: 0x2307904
      description: |-
        Cures the target's cringe, confusion, cowering, pause, taunt, encore or infatuated status due to the action of the user, and prints the event to the log.
        
        r0: pointer to user
        r1: pointer to target
    - name: RunMonsterAi
      address:
        EU: 0x2308D6C
        NA: 0x2308340
      description: |-
        Runs the AI for a single monster to determine whether the monster can act and which action it should perform if so
        
        r0: Pointer to monster
        r1: ?
    - name: ApplyDamage
      address:
        EU: 0x2309A0C
        NA: 0x2308FE0
        JP: 0x230A598
      description: |-
        Applies damage to a monster. Displays the damage animation, lowers its health and handles reviving if applicable.
        The EU version has some additional checks related to printing fainting messages under specific circumstances.
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Pointer to the damage_data struct that contains info about the damage to deal
        r3: ?
        stack[0]: ?
        stack[1]: Faint reason (see HandleFaint)
        return: True if the target fainted (reviving does not count as fainting)
    - name: GetTypeMatchup
      address:
        EU: 0x230B6CC
        NA: 0x230AC58
        JP: 0x230C1D0
      description: |-
        Gets the type matchup for a given combat interaction.
        
        Note that the actual monster's types on the attacker and defender pointers are not used; the pointers are only used to check conditions. The actual type matchup table lookup is done solely using the attack and target type parameters.
        
        This factors in some conditional effects like exclusive items, statuses, etc. There's some weirdness with the Ghost type; see the comment for struct type_matchup_table.
        
        r0: attacker pointer
        r1: defender pointer
        r2: target type index (0 the target's first type, 1 for the target's second type)
        r3: attack type
        return: enum type_matchup
    - name: CalcDamage
      address:
        EU: 0x230C620
        NA: 0x230BBAC
        JP: 0x230D100
      description: |-
        Probably the damage calculation function.
        
        r0: attacker pointer
        r1: defender pointer
        r2: attack type
        r3: attack power
        stack[0]: crit chance
        stack[1]: [output] struct containing info about the damage calculation
        stack[2]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[3]: move ID
        stack[4]: ?
    - name: CalcRecoilDamageFixed
      address:
        EU: 0x230DC00
        NA: 0x230D18C
        JP: 0x230E6CC
      description: |-
        Appears to calculate recoil damage to a monster.
        
        This function wraps CalcDamageFixed using the monster as both the attacker and the defender, after doing some basic checks (like if the monster is already at 0 HP) and applying a boost from the Reckless ability if applicable.
        
        r0: entity pointer
        r1: fixed damage
        r2: ?
        r3: [output] struct containing info about the damage calculation
        stack[0]: move ID (interestingly, this doesn't seem to be used by the function)
        stack[1]: attack type
        stack[2]: ?
        stack[3]: message type
        others: ?
    - name: CalcDamageFixed
      address:
        EU: 0x230DCB4
        NA: 0x230D240
        JP: 0x230E780
      description: |-
        Appears to calculate damage from a fixed-damage effect.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        r3: ?
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        stack[3]: ?
        stack[4]: message type
        others: ?
    - name: CalcDamageFixedNoCategory
      address:
        EU: 0x230DE1C
        NA: 0x230D3A8
        JP: 0x230E8E4
      description: |-
        A wrapper around CalcDamageFixed with the move category set to none.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        others: ?
    - name: CalcDamageFixedWrapper
      address:
        EU: 0x230DE68
        NA: 0x230D3F4
        JP: 0x230E930
      description: |-
        A wrapper around CalcDamageFixed.
        
        r0: attacker pointer
        r1: defender pointer
        r2: fixed damage
        stack[0]: [output] struct containing info about the damage calculation
        stack[1]: attack type
        stack[2]: move category
        others: ?
    - name: ResetDamageCalcScratchSpace
      address:
        EU: 0x230DF9C
        NA: 0x230D528
        JP: 0x230EA64
      description: |-
        CalcDamage seems to use scratch space of some kind, which this function zeroes.
        
        No params.
    - name: IsRecruited
      address:
        EU: 0x230E644
        NA: 0x230DBD0
        JP: 0x230F110
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
        return: bool
    - name: TrySpawnMonsterAndTickSpawnCounter
      address:
        EU: 0x230F130
        NA: 0x230E6BC
        JP: 0x230FBF8
      description: |-
        First ticks up the spawn counter, and if it's equal or greater than the spawn cooldown, it will try to spawn an enemy if the number of enemies is below the spawn cap.
        
        If the spawn counter is greater than 900, it will instead perform the special spawn caused by the ability Illuminate.
        
        No params.
    - name: AuraBowIsActive
      address:
        EU: 0x231013C
        NA: 0x230F6C8
        JP: 0x2310C04
      description: |-
        Checks if a monster is holding an aura bow that isn't disabled by Klutz.
        
        r0: entity pointer
        return: bool
    - name: ExclusiveItemOffenseBoost
      address:
        EU: 0x23101EC
        NA: 0x230F778
      description: |-
        Gets the exclusive item boost for attack/special attack for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: ExclusiveItemDefenseBoost
      address:
        EU: 0x23101FC
        NA: 0x230F788
      description: |-
        Gets the exclusive item boost for defense/special defense for a monster
        
        r0: entity pointer
        r1: move category index (0 for physical, 1 for special)
        return: boost
    - name: TrySpawnEnemyItemDrop
      address:
        EU: 0x231044C
        NA: 0x230F9D8
        JP: 0x2310F14
      description: |-
        Determine what item a defeated enemy should drop, if any, then (probably?) spawn that item underneath them.
        
        This function is called at the time when an enemy is defeated from ApplyDamage.
        
        r0: attacker entity (who defeated the enemy)
        r1: defender entity (who was defeated)
    - name: TickNoSlipCap
      address:
        EU: 0x2310604
        NA: 0x230FB90
        JP: 0x23110CC
      description: |-
        Checks if the entity is a team member and holds the No-Slip Cap, and if so attempts to make one item in the bag sticky.
        
        r0: pointer to entity
    - name: TickStatusAndHealthRegen
      address:
        EU: 0x2311AE8
        NA: 0x2311088
        JP: 0x23125B0
      description: |-
        Applies the natural HP regen effect by taking modifiers into account (Poison Heal, Heal Ribbon, weather-related regen). Then it ticks down counters for volatile status effects, and heals them if the counter reached zero.
        
        r0: pointer to entity
    - name: InflictSleepStatusSingle
      address:
        EU: 0x2312284
        NA: 0x2311824
        JP: 0x2312D3C
      description: |-
        This is called by TryInflictSleepStatus.
        
        r0: entity pointer
        r1: number of turns
    - name: TryInflictSleepStatus
      address:
        EU: 0x2312338
        NA: 0x23118D8
        JP: 0x2312DF0
      description: |-
        Inflicts the Sleep status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: TryInflictNightmareStatus
      address:
        EU: 0x23126AC
        NA: 0x2311C4C
        JP: 0x2313158
      description: |-
        Inflicts the Nightmare status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictNappingStatus
      address:
        EU: 0x23127C0
        NA: 0x2311D60
        JP: 0x2313268
      description: |-
        Inflicts the Napping status condition (from Rest) on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictYawningStatus
      address:
        EU: 0x23128D0
        NA: 0x2311E70
        JP: 0x2313374
      description: |-
        Inflicts the Yawning status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
    - name: TryInflictSleeplessStatus
      address:
        EU: 0x23129E0
        NA: 0x2311F80
        JP: 0x2313484
      description: |-
        Inflicts the Sleepless status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictPausedStatus
      address:
        EU: 0x2312ACC
        NA: 0x231206C
        JP: 0x2313570
      description: |-
        Inflicts the Paused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: ?
        r3: number of turns
        stack[0]: flag to log a message on failure
        stack[1]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictInfatuatedStatus
      address:
        EU: 0x2312C0C
        NA: 0x23121AC
        JP: 0x23136B0
      description: |-
        Inflicts the Infatuated status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatus
      address:
        EU: 0x2312D98
        NA: 0x2312338
        JP: 0x2313838
      description: |-
        Inflicts the Burn status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to apply some special effect alongside the burn?
        r3: flag to log a message on failure
        stack[0]: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBurnStatusWholeTeam
      address:
        EU: 0x2313078
        NA: 0x2312618
        JP: 0x2313B14
      description: |-
        Inflicts the Burn status condition on all team members if possible.
        
        No params.
    - name: TryInflictPoisonedStatus
      address:
        EU: 0x23130C4
        NA: 0x2312664
        JP: 0x2313B60
      description: |-
        Inflicts the Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictBadlyPoisonedStatus
      address:
        EU: 0x231339C
        NA: 0x231293C
        JP: 0x2313E34
      description: |-
        Inflicts the Badly Poisoned status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictFrozenStatus
      address:
        EU: 0x2313658
        NA: 0x2312BF8
        JP: 0x23140EC
      description: |-
        Inflicts the Frozen status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
    - name: TryInflictConstrictionStatus
      address:
        EU: 0x2313880
        NA: 0x2312E20
        JP: 0x2314310
      description: |-
        Inflicts the Constriction status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: animation ID
        r3: flag to log a message on failure
    - name: TryInflictShadowHoldStatus
      address:
        EU: 0x23139D8
        NA: 0x2312F78
        JP: 0x2314468
      description: |-
        Inflicts the Shadow Hold (AKA Immobilized) status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
    - name: TryInflictIngrainStatus
      address:
        EU: 0x2313B90
        NA: 0x2313130
        JP: 0x231461C
      description: |-
        Inflicts the Ingrain status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictWrappedStatus
      address:
        EU: 0x2313C54
        NA: 0x23131F4
        JP: 0x23146E0
      description: |-
        Inflicts the Wrapped status condition on a target monster if possible.
        
        This also gives the user the Wrap status (Wrapped around foe).
        
        r0: user entity pointer
        r1: target entity pointer
    - name: FreeOtherWrappedMonsters
      address:
        EU: 0x2313E50
        NA: 0x23133F0
        JP: 0x23148DC
      description: |-
        Frees from the wrap status all monsters which are wrapped by/around the monster passed as parameter.
        
        r0: pointer to entity
    - name: TryInflictPetrifiedStatus
      address:
        EU: 0x2313ECC
        NA: 0x231346C
        JP: 0x2314958
      description: |-
        Inflicts the Petrified status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: LowerOffensiveStat
      address:
        EU: 0x231405C
        NA: 0x23135FC
        JP: 0x2314AE8
      description: |-
        Lowers the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: ?
        stack[1]: ?
    - name: LowerDefensiveStat
      address:
        EU: 0x2314274
        NA: 0x2313814
        JP: 0x2314CFC
      description: |-
        Lowers the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
        stack[0]: ?
        stack[1]: ?
    - name: BoostOffensiveStat
      address:
        EU: 0x23143FC
        NA: 0x231399C
        JP: 0x2314E84
      description: |-
        Boosts the specified offensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: BoostDefensiveStat
      address:
        EU: 0x2314568
        NA: 0x2313B08
        JP: 0x2314FF0
      description: |-
        Boosts the specified defensive stat on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: number of stages
    - name: ApplyOffensiveStatMultiplier
      address:
        EU: 0x23147A0
        NA: 0x2313D40
        JP: 0x2315224
      description: |-
        Applies a multiplier to the specified offensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::offensive_multipliers, for moves like Charm and Memento.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: ApplyDefensiveStatMultiplier
      address:
        EU: 0x23149C4
        NA: 0x2313F64
        JP: 0x2315444
      description: |-
        Applies a multiplier to the specified defensive stat on the target monster.
        
        This affects struct monster_stat_modifiers::defensive_multipliers, for moves like Screech.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: multiplier
        stack[0]: ?
    - name: BoostHitChanceStat
      address:
        EU: 0x2314B44
        NA: 0x23140E4
        JP: 0x23155C4
      description: |-
        Boosts the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
    - name: LowerHitChanceStat
      address:
        EU: 0x2314C8C
        NA: 0x231422C
        JP: 0x231570C
      description: |-
        Lowers the specified hit chance stat (accuracy or evasion) on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ? (Irdkwia's notes say this is the number of stages, but I'm pretty sure that's incorrect)
    - name: TryInflictCringeStatus
      address:
        EU: 0x2314E48
        NA: 0x23143E8
        JP: 0x23158C4
      description: |-
        Inflicts the Cringe status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictParalysisStatus
      address:
        EU: 0x2314FA4
        NA: 0x2314544
        JP: 0x2315A1C
      description: |-
        Inflicts the Paralysis status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: BoostSpeed
      address:
        EU: 0x2315270
        NA: 0x2314810
        JP: 0x2315CE4
      description: |-
        Boosts the speed of the target monster.
        
        If the number of turns specified is 0, a random turn count will be selected using the default SPEED_BOOST_TURN_RANGE.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: number of turns
        stack[0]: flag to log a message on failure
    - name: BoostSpeedOneStage
      address:
        EU: 0x231539C
        NA: 0x231493C
        JP: 0x2315E10
      description: |-
        A wrapper around BoostSpeed with the number of stages set to 1.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of turns
        r3: flag to log a message on failure
    - name: LowerSpeed
      address:
        EU: 0x23153B4
        NA: 0x2314954
        JP: 0x2315E28
      description: |-
        Lowers the speed of the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: number of stages
        r3: flag to log a message on failure
    - name: TrySealMove
      address:
        EU: 0x231551C
        NA: 0x2314ABC
        JP: 0x2315F90
      description: |-
        Seals one of the target monster's moves. The move to be sealed is randomly selected.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        return: Whether or not a move was sealed
    - name: BoostOrLowerSpeed
      address:
        EU: 0x231568C
        NA: 0x2314C2C
        JP: 0x2316100
      description: |-
        Randomly boosts or lowers the speed of the target monster by one stage with equal probability.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: ResetHitChanceStat
      address:
        EU: 0x23156EC
        NA: 0x2314C8C
        JP: 0x2316160
      description: |-
        Resets the specified hit chance stat (accuracy or evasion) back to normal on the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: stat index
        r3: ?
    - name: TryActivateQuickFeet
      address:
        EU: 0x231587C
        NA: 0x2314E1C
        JP: 0x23162F0
      description: |-
        Activate the Quick Feet ability on the defender, if the monster has it and it's active.
        
        r0: attacker pointer
        r1: defender pointer
        return: bool, whether or not the ability was activated
    - name: TryInflictConfusedStatus
      address:
        EU: 0x2315998
        NA: 0x2314F38
        JP: 0x2316410
      description: |-
        Inflicts the Confused status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictCoweringStatus
      address:
        EU: 0x2315BCC
        NA: 0x231516C
        JP: 0x2316644
      description: |-
        Inflicts the Cowering status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryRestoreHp
      address:
        EU: 0x2315CCC
        NA: 0x231526C
        JP: 0x2316744
      description: |-
        Restore HP of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: HP to restore
        return: success flag
    - name: TryIncreaseHp
      address:
        EU: 0x2315D44
        NA: 0x23152E4
        JP: 0x23167BC
      description: |-
        Restore HP and possibly boost max HP of the target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: HP to restore
        r3: max HP boost
        stack[0]: flag to log a message on failure
        return: Success flag
    - name: RevealItems
      address:
        EU: 0x2316070
        NA: 0x2315610
        JP: 0x2316AE8
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: RevealStairs
      address:
        EU: 0x2316100
        NA: 0x23156A0
        JP: 0x2316B78
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: RevealEnemies
      address:
        EU: 0x23161BC
        NA: 0x231575C
        JP: 0x2316C34
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: user entity pointer
        r1: target entity pointer
    - name: TryInflictLeechSeedStatus
      address:
        EU: 0x231624C
        NA: 0x23157EC
        JP: 0x2316CC4
      description: |-
        Inflicts the Leech Seed status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: flag to log a message on failure
        r3: flag to only perform the check for inflicting without actually inflicting
        return: Whether or not the status could be inflicted
    - name: TryInflictDestinyBond
      address:
        EU: 0x23164B0
        NA: 0x2315A50
        JP: 0x2316F28
      description: |-
        Inflicts the Destiny Bond status condition on a target monster if possible.
        
        r0: user entity pointer
        r1: target entity pointer
    - name: IsBlinded
      address:
        EU: 0x2318244
        NA: 0x23177E4
        JP: 0x2318CB4
      description: |-
        Returns true if the monster has the blinded status (see statuses::blinded), or if it is not the leader and is holding Y-Ray Specs.
        
        r0: pointer to entity
        r1: flag for whether to check for the held item
        return: bool
    - name: RestoreMovePP
      address:
        EU: 0x2318680
        NA: 0x2317C20
        JP: 0x23190F0
      description: |-
        Restores the PP of all the target's moves by the specified amount.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: PP to restore
        r3: flag to suppress message logging
    - name: SetReflectDamageCountdownTo4
      address:
        EU: 0x2318E20
        NA: 0x23183C0
        JP: 0x2319890
      description: |-
        Sets the monster's reflect damage countdown to a global value (0x4).
        
        r0: pointer to entity
    - name: HasConditionalGroundImmunity
      address:
        EU: 0x23194AC
        NA: 0x2318A4C
        JP: 0x2319F1C
      description: |-
        Checks if a monster is currently immune to Ground-type moves for reasons other than typing and ability.
        
        This includes checks for Gravity and Magnet Rise.
        
        r0: entity pointer
        return: bool
    - name: Conversion2IsActive
      address:
        EU: 0x231A274
        NA: 0x2319814
        JP: 0x231ACE4
      description: |-
        Checks if the monster is under the effect of Conversion 2 (its type was changed).
        
        Returns 1 if the effects is a status, 2 if it comes from an exclusive item, 0 otherwise.
        
        r0: pointer to entity
        return: int
    - name: AiConsiderMove
      address:
        EU: 0x231A2E0
        NA: 0x2319880
        JP: 0x231AD50
      description: |-
        The AI uses this function to check if a move has any potential targets, to calculate the list of potential targets and to calculate the move's special weight.
        This weight will be higher if the pokémon has weak-type picker and the target is weak to the move (allies only, enemies always get a result of 1 even if the move is super effective). More things could affect the result.
        This function also sets the flag can_be_used on the ai_possible_move struct if it makes sense to use it.
        More research is needed. There's more documentation about this special weight. Does all the documented behavior happen in this function?
        
        r0: ai_possible_move struct for this move
        r1: Entity pointer
        r2: Move pointer
        return: Move's calculated special weight
    - name: TryAddTargetToAiTargetList
      address:
        EU: 0x231AA10
        NA: 0x2319FB0
        JP: 0x231B480
      description: |-
        Checks if the specified target is eligible to be targeted by the AI and if so adds it to the list of targets. This function also fills an array that seems to contain the directions in which the user should turn to look at each of the targets in the list, as well as a third unknown array.
        
        r0: Number of existing targets in the list
        r1: Move's AI range field
        r2: User entity pointer
        r3: Target entity pointer
        stack[0]: Move pointer
        stack[1]: check_all_conditions parameter to pass to IsAiTargetEligible
        return: New number of targets in the target list
    - name: IsAiTargetEligible
      address:
        EU: 0x231AB04
        NA: 0x231A0A4
        JP: 0x231B574
      description: |-
        Checks if a given target is eligible to be targeted by the AI with a certain move
        
        r0: Move's AI range field
        r1: User entity pointer
        r2: Target entity pointer
        r3: Move pointer
        stack[0]: True to check all the possible move_ai_condition values, false to only check for move_ai_condition::AI_CONDITION_RANDOM (if the move has a different ai condition, the result will be false).
        return: True if the target is eligible, false otherwise
    - name: IsTargetInRange
      address:
        EU: 0x231B0F4
        NA: 0x231A694
        JP: 0x231BB64
      description: |-
        Returns true if the target is within range of the user's move, false otherwise.
        
        If the user does not have Course Checker, it simply checks if the distance between user and target is less or equal than the move range.
        Otherwise, it will iterate through all tiles in the direction specified, checking for walls or other monsters in the way, and return false if they are found.
        
        r0: user pointer
        r1: target pointer
        r2: direction ID
        r3: move range (in number of tiles)
    - name: GetEntityMoveTargetAndRange
      address:
        EU: 0x231B70C
        NA: 0x231ACAC
        JP: 0x231C17C
      description: |-
        Gets the move target-and-range field when used by a given entity. See struct move_target_and_range in the C headers.
        
        r0: entity pointer
        r1: move pointer
        r2: AI flag (same as GetMoveTargetAndRange)
        return: move target and range
    - name: IsInSpawnList
      address:
        EU: 0x231BE5C
        NA: 0x231B3FC
        JP: 0x231C8C8
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: spawn_list_ptr
        r1: monster ID
        return: bool
    - name: ChangeShayminForme
      address:
        EU: 0x231BF4C
        NA: 0x231B4EC
        JP: 0x231C9B8
      description: |-
        forme:
          1: change from Land to Sky
          2: change from Sky to Land
        result:
          0: not Shaymin
          1: not correct Forme
          2: frozen
          3: ok
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: Target
        r1: forme
        return: result
    - name: ApplyItemEffect
      address:
        EU: 0x231C0EC
        NA: 0x231B68C
        JP: 0x231CB58
      description: |-
        Seems to apply an item's effect via a giant switch statement?
        
        r3: attacker pointer
        stack[0]: defender pointer
        stack[1]: thrown item pointer
        others: ?
    - name: ViolentSeedBoost
      address:
        EU: 0x231D884
        NA: 0x231CE1C
      description: |-
        Applies the Violent Seed boost to an entity.
        
        r0: attacker pointer
        r1: defender pointer
    - name: ApplyGummiBoostsDungeonMode
      address:
        EU: 0x231DB28
        NA: 0x231D0C0
        JP: 0x231E588
      description: |-
        Applies the IQ and possible stat boosts from eating a Gummi to the target monster.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: Gummi type ID
        r3: Stat boost amount, if a random stat boost occurs
    - name: GetMaxPpWrapper
      address:
        EU: 0x231F458
        NA: 0x231E9F0
        JP: 0x231FE9C
      description: |-
        Gets the maximum PP for a given move. A wrapper around the function in the ARM 9 binary.
        
        r0: move pointer
        return: max PP for the given move, capped at 99
    - name: MoveIsNotPhysical
      address:
        EU: 0x231F480
        NA: 0x231EA18
        JP: 0x231FEC4
      description: |-
        Checks if a move isn't a physical move.
        
        r0: move ID
        return: bool
    - name: TryPounce
      address:
        EU: 0x2320688
        NA: 0x231FC20
        JP: 0x23210CC
      description: |-
        Makes the target monster execute the Pounce action in a given direction if possible.
        
        If the direction ID is 8, the target will pounce in the direction it's currently facing.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryBlowAway
      address:
        EU: 0x2320848
        NA: 0x231FDE0
        JP: 0x232128C
      description: |-
        Blows away the target monster in a given direction if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: direction ID
    - name: TryWarp
      address:
        EU: 0x2321770
        NA: 0x2320D08
        JP: 0x23221B4
      description: |-
        Makes the target monster warp if possible.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: warp type
        r3: position (if warp type is position-based)
    - name: MoveHitCheck
      address:
        EU: 0x23246B0
        NA: 0x2323C48
        JP: 0x23250E8
      description: |-
        Determines if a move used hits or misses the target. It gets called twice per target, once with r3 = false and a second time with r3 = true.
        
        r0: Attacker
        r1: Defender
        r2: Pointer to move data
        r3: True if the move's first accuracy (accuracy1) should be used, false if its second accuracy (accuracy2) should be used instead.
        returns: True if the move hits, false if it misses.
    - name: IsHyperBeamVariant
      address:
        EU: 0x2324F9C
        NA: 0x2324534
        JP: 0x23259C4
      description: |-
        Checks if a move is a Hyper Beam variant that requires a a turn to recharge.
        
        Include moves: Frenzy Plant, Hydro Cannon, Hyper Beam, Blast Burn, Rock Wrecker, Giga Impact, Roar of Time
        
        r0: move
        return: bool
    - name: DungeonRandOutcomeUserTargetInteraction
      address:
        EU: 0x232539C
        NA: 0x2324934
        JP: 0x2325DC4
      description: |-
        Like DungeonRandOutcome, but specifically for user-target interactions.
        
        This modifies the underlying random process depending on factors like Serene Grace, and whether or not either entity has fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: base success percentage (100*p). 0 is treated specially and guarantees success.
        returns: True if the random check passed, false otherwise.
    - name: DungeonRandOutcomeUserAction
      address:
        EU: 0x2325488
        NA: 0x2324A20
        JP: 0x2325EAC
      description: |-
        Like DungeonRandOutcome, but specifically for user actions.
        
        This modifies the underlying random process to factor in Serene Grace (and checks whether the user is a valid entity).
        
        r0: entity pointer
        r1: base success percentage (100*p). 0 is treated specially and guarantees success.
        returns: True if the random check passed, false otherwise.
    - name: CanAiUseMove
      address:
        EU: 0x23254DC
        NA: 0x2324A74
        JP: 0x2325F00
      description: |-
        Checks if an AI-controlled monster can use a move.
        Will return false if the any of the flags move::f_exists, move::f_subsequent_in_link_chain or move::f_disabled is true. The function does not check if the flag move::f_enabled_for_ai is set. This function also returns true if the call to CanMonsterUseMove is true.
        The function contains a loop that is supposed to check other moves after the specified one, but the loop breaks after it finds a move that isn't linked, which is always true given the checks in place at the start of the function.
        
        r0: Entity pointer
        r1: Move index
        r2: extra_checks parameter when calling CanMonsterUseMove
        return: True if the AI can use the move (not accounting for move::f_enabled_for_ai)
    - name: CanMonsterUseMove
      address:
        EU: 0x232558C
        NA: 0x2324B24
        JP: 0x2325FB0
      description: |-
        Checks if a monster can use the given move.
        Will always return true for the regular attack. Will return false if the move if the flag move::f_disabled is true, if the flag move::f_sealed is true. More things will be checked if the extra_checks parameter is true.
        
        r0: Entity pointer
        r1: Move pointer
        r2: True to check whether the move is out of PP, whether it can be used under the taunted status and whether the encore status prevents using the move
        return: True if the monster can use the move, false otherwise.
    - name: UpdateMovePp
      address:
        EU: 0x23257F4
        NA: 0x2324D8C
        JP: 0x2326218
      description: |-
        Updates the PP of any moves that were used by a monster, if PP should be consumed.
        
        r0: entity pointer
        r1: flag for whether or not PP should be consumed
    - name: GetFaintReasonWrapper
      address:
        EU: 0x23258AC
        NA: 0x2324E44
        JP: 0x23262D0
      description: |-
        Wraps GetFaintReason (in arm9) for a move info struct rather than a move ID.
        
        r0: move info pointer
        r1: item ID
        return: faint reason
    - name: LowerSshort
      address:
        EU: 0x23258CC
        NA: 0x2324E64
        JP: 0x23262F0
      description: |-
        Gets the lower 2 bytes of a 4-byte number and interprets it as a signed short.
        
        r0: 4-byte number x
        return: (short) x
    - name: GetMoveAnimationId
      address:
        EU: 0x2326578
        NA: 0x2325B10
        JP: 0x2326F9C
      description: |-
        Returns the move animation ID that should be played for a move.
        It contains a check for weather ball. After that, if the parameter should_play_alternative_animation is false, the move ID is returned. If it's true, there's a bunch of manual ID checks that result on a certain hardcoded return value.
        
        r0: Move ID
        r1: Apparent weather for the monster who used the move
        r2: Result of ShouldMovePlayADifferentAnimation
        return: Move animation ID
    - name: ShouldMovePlayAlternativeAnimation
      address:
        EU: 0x23266E0
        NA: 0x2325C78
        JP: 0x2327104
      description: |-
        Checks whether a moved used by a monster should play its alternative animation. Includes checks for Curse, Snore, Sleep Talk, Solar Beam and 2-turn moves.
        
        r0: Pointer to the entity that used the move
        r1: Move pointer
        return: True if the move should play its alternative animation
    - name: DoMoveDamage
      address:
        NA:
          - 0x2325DC0
          - 0x232A500
          - 0x232B8B0
          - 0x232DD88
      description: |-
        Move effect: Deal damage.
        Relevant moves: Many!
        
        This just wraps DealDamage with a multiplier of 1 (i.e., the fixed-point number 0x100).
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveIronTail
      address:
        NA: 0x2325DE4
      description: |-
        Move effect: Iron Tail
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageMultihitUntilMiss
      address:
        NA: 0x2325E64
      description: |-
        Move effect: Deal multihit damage until a strike misses
        Relevant moves: Ice Ball, Rollout
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveYawn
      address:
        EU: 0x232692C
        NA: 0x2325EC4
        JP: 0x2327350
      description: |-
        Move effect: Yawn
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSleep
      address:
        NA: 0x2325F00
      description: |-
        Move effect: Put target enemies to sleep
        Relevant moves: Lovely Kiss, Sing, Spore, Grasswhistle, Hypnosis, Sleep Powder, Dark Void
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveNightmare
      address:
        EU: 0x23269A4
        NA: 0x2325F3C
        JP: 0x23273C8
      description: |-
        Move effect: Nightmare
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMorningSun
      address:
        NA: 0x2325F74
      description: |-
        Move effect: Morning Sun
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveVitalThrow
      address:
        NA: 0x2325FB4
      description: |-
        Move effect: Vital Throw
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDig
      address:
        NA: 0x2325FC4
      description: |-
        Move effect: Dig
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSweetScent
      address:
        NA: 0x2326088
      description: |-
        Move effect: Sweet Scent
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCharm
      address:
        EU: 0x2326B10
        NA: 0x23260A8
        JP: 0x2327534
      description: |-
        Move effect: Charm
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRainDance
      address:
        NA: 0x23260D0
      description: |-
        Move effect: Rain Dance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHail
      address:
        NA: 0x232612C
      description: |-
        Move effect: Hail
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHealStatus
      address:
        NA: 0x2326188
      description: |-
        Move effect: Heal the team's status conditions
        Relevant moves: Aromatherapy, Heal Bell, Refresh
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBubble
      address:
        NA: 0x23261A0
      description: |-
        Move effect: Bubble
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEncore
      address:
        EU: 0x2326C74
        NA: 0x232620C
        JP: 0x2327698
      description: |-
        Move effect: Encore
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRage
      address:
        NA: 0x2326220
      description: |-
        Move effect: Rage
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSuperFang
      address:
        EU: 0x2326CCC
        NA: 0x2326264
        JP: 0x23276F0
      description: |-
        Move effect: Super Fang
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePainSplit
      address:
        EU: 0x2326D84
        NA: 0x232631C
        JP: 0x23277A8
      description: |-
        Move effect: Pain Split
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTorment
      address:
        EU: 0x2326E70
        NA: 0x2326408
        JP: 0x2327894
      description: |-
        Move effect: Torment
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveStringShot
      address:
        NA: 0x2326550
      description: |-
        Move effect: String Shot
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSwagger
      address:
        EU: 0x2326FD0
        NA: 0x2326568
        JP: 0x23279F4
      description: |-
        Move effect: Swagger
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSnore
      address:
        NA: 0x23265A4
      description: |-
        Move effect: Snore
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveScreech
      address:
        NA: 0x2326648
      description: |-
        Move effect: Screech
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageCringe30
      address:
        NA: 0x2326670
      description: |-
        Move effect: Deal damage with a 30% chance (ROCK_SLIDE_CRINGE_CHANCE) of inflicting the cringe status on the defender.
        Relevant moves: Rock Slide, Astonish, Iron Head, Dark Pulse, Air Slash, Zen Headbutt, Dragon Rush
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveWeatherBall
      address:
        NA: 0x23266DC
      description: |-
        Move effect: Weather Ball
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWhirlpool
      address:
        EU: 0x23271B8
        NA: 0x2326750
        JP: 0x2327BDC
      description: |-
        Move effect: Whirlpool
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFakeTears
      address:
        NA: 0x23267D8
      description: |-
        Move effect: Fake Tears
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSpite
      address:
        EU: 0x2327274
        NA: 0x232680C
        JP: 0x2327C98
      description: |-
        Move effect: Spite
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFocusEnergy
      address:
        NA: 0x23268BC
      description: |-
        Move effect: Focus Energy
        Relevant moves: Focus Energy, MOVE_TAG_0x1AC
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSmokescreen
      address:
        EU: 0x2327334
        NA: 0x23268CC
        JP: 0x2327D54
      description: |-
        Move effect: Smokescreen
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMirrorMove
      address:
        NA: 0x2326908
      description: |-
        Move effect: Mirror Move
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveOverheat
      address:
        NA: 0x232692C
      description: |-
        Move effect: Overheat
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAuroraBeam
      address:
        NA: 0x2326990
      description: |-
        Move effect: Aurora Beam
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMemento
      address:
        NA: 0x2326A0C
      description: |-
        Move effect: Memento
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveOctazooka
      address:
        NA: 0x2326A74
      description: |-
        Move effect: Octazooka
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFlatter
      address:
        EU: 0x2327550
        NA: 0x2326AE8
        JP: 0x2327F70
      description: |-
        Move effect: Flatter
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWillOWisp
      address:
        EU: 0x232758C
        NA: 0x2326B24
        JP: 0x2327FAC
      description: |-
        Move effect: Will-O-Wisp
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveReturn
      address:
        EU: 0x2327628
        NA: 0x2326BC0
        JP: 0x2328048
      description: |-
        Move effect: Return
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGrudge
      address:
        NA: 0x2326CA4
      description: |-
        Move effect: Grudge
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCounter
      address:
        NA: 0x2326CB4
      description: |-
        Move effect: Give the user the Counter status
        Relevant moves: Pursuit, Counter, Payback
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageBurn10FlameWheel
      address:
        NA: 0x2326CC8
      description: |-
        Move effect: Deal damage with a 10% chance (FLAME_WHEEL_BURN_CHANCE) of burning the defender.
        Relevant moves: Flame Wheel, Lava Plume
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageBurn10
      address:
        NA: 0x2326D50
      description: |-
        Move effect: Deal damage with a 10% chance (FLAMETHROWER_BURN_CHANCE) of burning the defender.
        Relevant moves: Flamethrower, Fire Blast, Heat Wave, Ember, Fire Punch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveExpose
      address:
        NA: 0x2326DD8
      description: |-
        Move effect: Expose all Ghost-type enemies, and reset evasion boosts
        Relevant moves: Odor Sleuth, Foresight
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDoubleTeam
      address:
        NA: 0x2326E04
      description: |-
        Move effect: Double Team
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGust
      address:
        EU: 0x2327888
        NA: 0x2326E20
        JP: 0x23282A8
      description: |-
        Move effect: Gust
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBoostDefense1
      address:
        NA: 0x2326E60
      description: |-
        Move effect: Boost the user's defense by one stage
        Relevant moves: Harden, Withdraw
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveParalyze
      address:
        NA:
          - 0x2326E80
          - 0x2328230
          - 0x232B434
      description: |-
        Move effect: Paralyze the defender if possible
        Relevant moves: Disable, Stun Spore, Glare
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBoostAttack1
      address:
        NA: 0x2326E98
      description: |-
        Move effect: Boost the user's attack by one stage
        Relevant moves: Sharpen, Howl, Meditate
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRazorWind
      address:
        NA: 0x2326EB8
      description: |-
        Move effect: Razor Wind
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBide
      address:
        NA: 0x2326F48
      description: |-
        Move effect: Give the user the Bide status
        Relevant moves: Bide, Revenge, Avalanche
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBideUnleash
      address:
        NA: 0x2326F8C
      description: |-
        Move effect: Unleashes the Bide status
        Relevant moves: Bide (unleashing), Revenge (unleashing), Avalanche (unleashing)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCrunch
      address:
        NA: 0x2327034
      description: |-
        Move effect: Deal damage with a 20% chance (CRUNCH_LOWER_DEFENSE_CHANCE) of lowering the defender's defense.
        Relevant moves: Crunch, Shadow Ball via Nature Power
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveDamageCringe20
      address:
        NA: 0x23270B4
      description: |-
        Move effect: Deal damage with a 20% chance (BITE_CRINGE_CHANCE) of inflicting the cringe status on the defender.
        Relevant moves: Bite, Needle Arm, Stomp, Rolling Kick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageParalyze20
      address:
        NA: 0x2327120
      description: |-
        Move effect: Deal damage with a 20% chance (THUNDER_PARALYZE_CHANCE) of paralyzing the defender.
        Relevant moves: Thunder, ThunderPunch, Force Palm, Discharge
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveEndeavor
      address:
        EU: 0x2327BF4
        NA: 0x232718C
        JP: 0x2328614
      description: |-
        Move effect: Endeavor
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFacade
      address:
        EU: 0x2327CB4
        NA: 0x232724C
        JP: 0x23286D4
      description: |-
        Move effect: Facade
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageLowerSpeed20
      address:
        NA: 0x232728C
      description: |-
        Move effect: Deal damage with a 20% chance (CONSTRICT_LOWER_SPEED_CHANCE) of lowering the defender's speed.
        Relevant moves: Constrict, Bubblebeam
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveBrickBreak
      address:
        EU: 0x2327D60
        NA: 0x23272F8
        JP: 0x2328780
      description: |-
        Move effect: Brick Break
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageLowerSpeed100
      address:
        EU: 0x2327DD0
        NA: 0x2327368
        JP: 0x23287F0
      description: |-
        Move effect: Deal damage and lower the defender's speed.
        Relevant moves: Rock Tomb, Icy Wind, Mud Shot
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFocusPunch
      address:
        NA: 0x23273CC
      description: |-
        Move effect: Focus Punch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageDrain
      address:
        EU: 0x2327EC0
        NA: 0x2327458
        JP: 0x23288E0
      description: |-
        Move effect: Deal draining damage, healing the attacker by a proportion of the damage dealt.
        Relevant moves: Giga Drain, Leech Life, Mega Drain, Drain Punch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveReversal
      address:
        NA: 0x2327598
      description: |-
        Move effect: Deal damage with a higher multiplier the lower the attacker's HP is.
        Relevant moves: Reversal, Flail
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSmellingSalt
      address:
        EU: 0x23280B4
        NA: 0x232764C
        JP: 0x2328AD4
      description: |-
        Move effect: SmellingSalt
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMetalSound
      address:
        EU: 0x232811C
        NA: 0x23276B4
        JP: 0x2328B3C
      description: |-
        Move effect: Metal Sound
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTickle
      address:
        EU: 0x2328150
        NA: 0x23276E8
        JP: 0x2328B70
      description: |-
        Move effect: Tickle
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveShadowHold
      address:
        NA: 0x2327744
      description: |-
        Move effect: Inflict the Shadow Hold status on the defender
        Relevant moves: Spider Web, Mean Look
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHaze
      address:
        NA: 0x2327758
      description: |-
        Move effect: Haze
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageMultihitFatigue
      address:
        EU: 0x23281D4
        NA: 0x232776C
        JP: 0x2328BF4
      description: |-
        Move effect: Deal multihit damage, then confuse the attacker
        Relevant moves: Outrage, Petal Dance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageWeightDependent
      address:
        EU: 0x2328220
        NA: 0x23277B8
        JP: 0x2328C40
      description: |-
        Move effect: Deal damage, multiplied by a weight-dependent factor.
        Relevant moves: Low Kick, Grass Knot
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveDamageBoostAllStats
      address:
        EU: 0x232826C
        NA: 0x2327804
        JP: 0x2328C8C
      description: |-
        Move effect: Deal damage, with a 20% (SILVER_WIND_BOOST_CHANCE) to boost the user's attack, special attack, defense, special defense, and speed.
        Relevant moves: Silver Wind, AncientPower, Ominous Wind
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSynthesis
      address:
        NA: 0x23278E8
      description: |-
        Move effect: Synthesis
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBoostSpeed1
      address:
        NA: 0x2327928
      description: |-
        Move effect: Boost the team's movement speed by one stage
        Relevant moves: Agility, Speed Boost (item effect), MOVE_TAG_0x1AA, Tailwind
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRapidSpin
      address:
        EU: 0x23283A8
        NA: 0x2327940
        JP: 0x2328DC8
      description: |-
        Move effect: Rapid Spin
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSureShot
      address:
        NA: 0x23279AC
      description: |-
        Move effect: Give the user the Sure-Shot status
        Relevant moves: Mind Reader, Lock-On
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCosmicPower
      address:
        NA: 0x23279E4
      description: |-
        Move effect: Cosmic Power
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSkyAttack
      address:
        NA: 0x2327A28
      description: |-
        Move effect: Sky Attack
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageFreeze15
      address:
        EU: 0x232855C
        NA: 0x2327AF4
        JP: 0x2328F7C
      description: |-
        Move effect: Deal damage with a 15% chance (POWDER_SNOW_FREEZE_CHANCE) of freezing the defender.
        Relevant moves: Powder Snow, Blizzard, Ice Punch, Ice Beam
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveMeteorMash
      address:
        NA: 0x2327B5C
      description: |-
        Move effect: Meteor Mash
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEndure
      address:
        NA: 0x2327BE0
      description: |-
        Move effect: Endure
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLowerSpeed1
      address:
        EU: 0x232865C
        NA: 0x2327BF0
        JP: 0x2329078
      description: |-
        Move effect: Lower the defender's defense by one stage
        Relevant moves: Scary Face, Cotton Spore
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageConfuse10
      address:
        NA: 0x2327C08
      description: |-
        Move effect: Deal damage with a 10% chance (PSYBEAM_CONFUSE_CHANCE) of confusing the defender.
        Relevant moves: Psybeam, Signal Beam, Confusion, Chatter, Rock Climb
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePsywave
      address:
        NA: 0x2327C74
      description: |-
        Move effect: Psywave
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageLowerDefensiveStatVariable
      address:
        NA: 0x2327CD8
      description: |-
        Move effect: Deal damage with some chance of lowering one of the defender's defensive stats.
        Relevant moves: Psychic, Acid, Seed Flare, Earth Power, Bug Buzz, Flash Cannon
        
        Note that this move effect handler has a slightly different parameter list than all the others. Which defensive stat is lowered, the chance of lowering, and the number of stages to lower are all specified as arguments by the caller.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: stat index for the defensive stat to lower
        stack[0]: number of defensive stat stages to lower
        stack[1]: percentage chance of lowering the defensive stat
        stack[2]: item ID
        return: whether the move was successfully used
    - name: DoMovePsychoBoost
      address:
        NA: 0x2327D60
      description: |-
        Move effect: Psycho Boost
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveUproar
      address:
        NA: 0x2327DD0
      description: |-
        Move effect: Uproar
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWaterSpout
      address:
        NA: 0x2327DE0
      description: |-
        Move effect: Water Spout
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePsychUp
      address:
        NA: 0x2327E94
      description: |-
        Move effect: Psych Up
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageWithRecoil
      address:
        EU: 0x23289A0
        NA: 0x2327F34
        JP: 0x23293BC
      description: |-
        Move effect: Deals damage, inflicting recoil damage on the attacker.
        Relevant moves: Submission, Take Down, Volt Tackle, Wood Hammer, Brave Bird
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: bool, whether or not damage was dealt
    - name: DoMoveRecoverHp
      address:
        NA: 0x2328030
      description: |-
        Move effect: Recover 50% of the user's max HP
        Relevant moves: Recover, Slack Off
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEarthquake
      address:
        EU: 0x2328AE0
        NA: 0x2328074
        JP: 0x23294FC
      description: |-
        Move effect: Earthquake
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: GetNaturePowerVariant
      address:
        EU: 0x2328B40
        NA: 0x23280D4
      description: |-
        Gets the nature power variant for the current dungeon, based on the tileset ID.
        
        return: nature power variant
    - name: DoMoveNaturePower
      address:
        EU: 0x2328B7C
        NA: 0x2328110
        JP: 0x2329598
      description: |-
        Move effect: Nature Power
        
        r0: attacker pointer
        r1: defender pointer
        r2: move (unused)
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageParalyze10
      address:
        NA: 0x232816C
      description: |-
        Move effect: Deal damage with a 10% chance (LICK_PARALZYE_CHANCE) of paralyzing the defender.
        Relevant moves: Lick, Spark, Body Slam, DragonBreath
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSelfdestruct
      address:
        NA: 0x23281D8
      description: |-
        Move effect: Selfdestruct
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveShadowBall
      address:
        NA: 0x2328248
      description: |-
        Move effect: Shadow Ball
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCharge
      address:
        NA: 0x23282C8
      description: |-
        Move effect: Charge
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveThunderbolt
      address:
        NA: 0x2328328
      description: |-
        Move effect: Thunderbolt
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMist
      address:
        NA: 0x2328394
      description: |-
        Move effect: Mist
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFissure
      address:
        EU: 0x2328E10
        NA: 0x23283A4
        JP: 0x232982C
      description: |-
        Move effect: Fissure
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageCringe10
      address:
        NA: 0x23284BC
      description: |-
        Move effect: Deal damage with a 10% chance (EXTRASENSORY_CRINGE_CHANCE) to inflict the cringe status on the defender.
        Relevant moves: Extrasensory, Hyper Fang, Bone Club
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSafeguard
      address:
        NA: 0x2328528
      description: |-
        Move effect: Safeguard
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAbsorb
      address:
        EU: 0x2328FA4
        NA: 0x2328538
      description: |-
        Move effect: Absorb
        
        This is essentially identical to DoMoveDamageDrain, except the ordering of the instructions is slightly different enough to introduce subtle variations in functionality.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveSkillSwap
      address:
        EU: 0x2329104
        NA: 0x2328698
        JP: 0x2329B18
      description: |-
        Move effect: Skill Swap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSketch
      address:
        NA: 0x2328794
      description: |-
        Move effect: Sketch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHeadbutt
      address:
        NA: 0x23288C4
      description: |-
        Move effect: Headbutt
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDoubleEdge
      address:
        EU: 0x232939C
        NA: 0x2328930
        JP: 0x2329DB0
      description: |-
        Move effect: Double-Edge
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSandstorm
      address:
        NA: 0x23289F8
      description: |-
        Move effect: Sandstorm
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLowerAccuracy1
      address:
        NA: 0x2328A54
      description: |-
        Move effect: Lower the defender's accuracy by one stage
        Relevant moves: Sand-Attack, Kinesis, Flash
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamagePoison40
      address:
        NA: 0x2328A74
      description: |-
        Move effect: Deal damage with a 40% chance (SMOG_POISON_CHANCE) of poisoning the defender.
        Relevant moves: Smog, Cross Poison, Gunk Shot, Poison Jab
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveGrowth
      address:
        NA: 0x2328AE0
      description: |-
        Move effect: Growth
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSacredFire
      address:
        NA: 0x2328B00
      description: |-
        Move effect: Sacred Fire
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveOhko
      address:
        EU: 0x23295F4
        NA: 0x2328B88
        JP: 0x232A008
      description: |-
        Move effect: Possibly one-hit KO the defender
        Relevant moves: Sheer Cold, Guillotine
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSolarBeam
      address:
        NA: 0x2328C74
      description: |-
        Move effect: SolarBeam
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSonicBoom
      address:
        NA: 0x2328D44
      description: |-
        Move effect: SonicBoom
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFly
      address:
        NA: 0x2328DE4
      description: |-
        Move effect: Fly
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveExplosion
      address:
        NA: 0x2328E74
      description: |-
        Move effect: Explosion
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDive
      address:
        NA: 0x2328ECC
      description: |-
        Move effect: Dive
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWaterfall
      address:
        NA: 0x2328F94
      description: |-
        Move effect: Waterfall
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageLowerAccuracy40
      address:
        NA: 0x2329000
      description: |-
        Move effect: Deal damage with a 40% chance (MUDDY_WATER_LOWER_ACCURACY_CHANCE) of lowering the defender's accuracy.
        Relevant moves: Muddy Water, Mud Bomb, Mirror Shot
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMoveStockpile
      address:
        NA: 0x2329074
      description: |-
        Move effect: Stockpile
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTwister
      address:
        EU: 0x2329B38
        NA: 0x23290CC
        JP: 0x232A54C
      description: |-
        Move effect: Twister
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTwineedle
      address:
        EU: 0x2329BC8
        NA: 0x232915C
        JP: 0x232A5DC
      description: |-
        Move effect: Twineedle
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRecoverHpTeam
      address:
        NA: 0x23291F4
      description: |-
        Move effect: Recover 25% HP for all team members
        Relevant moves: Softboiled, Milk Drink
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMinimize
      address:
        NA: 0x232923C
      description: |-
        Move effect: Minimize
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSeismicToss
      address:
        EU: 0x2329CC4
        NA: 0x2329258
        JP: 0x232A6D8
      description: |-
        Move effect: Seismic Toss
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveConfuse
      address:
        EU: 0x2329E38
        NA: 0x23293CC
        JP: 0x232A84C
      description: |-
        Move effect: Confuse target enemies if possible.
        Relevant moves: Confuse Ray, Supersonic, Sweet Kiss, Teeter Dance, Totter (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTaunt
      address:
        EU: 0x2329E50
        NA: 0x23293E4
        JP: 0x232A864
      description: |-
        Move effect: Taunt
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMoonlight
      address:
        NA: 0x23293F8
      description: |-
        Move effect: Moonlight
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHornDrill
      address:
        EU: 0x2329EA4
        NA: 0x2329438
        JP: 0x232A8B8
      description: |-
        Move effect: Horn Drill
        
        This is exactly the same as DoMoveOhko, except there's a call to SubstitutePlaceholderStringTags at the end.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSwordsDance
      address:
        NA: 0x2329534
      description: |-
        Move effect: Swords Dance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveConversion
      address:
        NA: 0x2329554
      description: |-
        Move effect: Conversion
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveConversion2
      address:
        NA: 0x2329664
      description: |-
        Move effect: Conversion 2
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHelpingHand
      address:
        NA: 0x2329674
      description: |-
        Move effect: Helping Hand
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBoostDefense2
      address:
        NA: 0x23296D8
      description: |-
        Move effect: Boost the defender's defense stat by two stages
        Relevant moves: Iron Defense, Acid Armor, Barrier
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWarp
      address:
        NA: 0x23296F8
      description: |-
        Move effect: Warp the target to another tile on the floor
        Relevant moves: Teleport, Warp (item effect), MOVE_TAG_0x1A8
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveThundershock
      address:
        NA: 0x2329710
      description: |-
        Move effect: Thundershock
        
        This is identical to DoMoveDamageParalyze10, except it uses a different data symbol for the paralysis chance (but it's still 10%).
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveThunderWave
      address:
        EU: 0x232A1E8
        NA: 0x232977C
        JP: 0x232ABFC
      description: |-
        Move effect: Thunder Wave
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveZapCannon
      address:
        NA: 0x23297F0
      description: |-
        Move effect: Zap Cannon
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBlock
      address:
        EU: 0x232A2C0
        NA: 0x2329854
        JP: 0x232ACD0
      description: |-
        Move effect: Block
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePoison
      address:
        EU: 0x232A2D4
        NA: 0x2329868
        JP: 0x232ACE4
      description: |-
        Move effect: Poison the defender if possible
        Relevant moves: Poison Gas, PoisonPowder
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveToxic
      address:
        EU: 0x232A2EC
        NA: 0x2329880
        JP: 0x232ACFC
      description: |-
        Move effect: Toxic
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePoisonFang
      address:
        NA: 0x2329898
      description: |-
        Move effect: Poison Fang
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamagePoison18
      address:
        NA: 0x2329904
      description: |-
        Move effect: Deal damage with an 18% chance (POISON_STING_POISON_CHANCE) to poison the defender.
        Relevant moves: Poison Sting, Sludge, Sludge Bomb
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveJumpKick
      address:
        NA: 0x2329970
      description: |-
        Move effect: Jump Kick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBounce
      address:
        NA: 0x2329A9C
      description: |-
        Move effect: Bounce
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHiJumpKick
      address:
        NA: 0x2329B68
      description: |-
        Move effect: Hi Jump Kick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTriAttack
      address:
        EU: 0x232A700
        NA: 0x2329C94
        JP: 0x232B110
      description: |-
        Move effect: Tri Attack
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSwapItems
      address:
        EU: 0x232A7BC
        NA: 0x2329D50
        JP: 0x232B1CC
      description: |-
        Move effect: Swaps the held items of the attacker and defender.
        Relevant moves: Trick, Switcheroo
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTripleKick
      address:
        EU: 0x232A9E4
        NA: 0x2329F78
        JP: 0x232B3E8
      description: |-
        Move effect: Triple Kick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSport
      address:
        NA: 0x2329FB4
      description: |-
        Move effect: Activate the relevant sport condition (Mud Sport, Water Sport) on the floor
        Relevant moves: Mud Sport, Water Sport
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMudSlap
      address:
        EU: 0x232AA4C
        NA: 0x2329FE0
        JP: 0x232B450
      description: |-
        Move effect: Mud-Slap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageStealItem
      address:
        NA: 0x232A04C
      description: |-
        Move effect: Deal damage and steal the defender's item if possible.
        Relevant moves: Thief, Covet
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAmnesia
      address:
        NA: 0x232A058
      description: |-
        Move effect: Amnesia
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveNightShade
      address:
        NA: 0x232A078
      description: |-
        Move effect: Night Shade
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGrowl
      address:
        NA: 0x232A118
      description: |-
        Move effect: Growl
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSurf
      address:
        NA: 0x232A148
      description: |-
        Move effect: Surf
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRolePlay
      address:
        EU: 0x232ABF4
        NA: 0x232A188
        JP: 0x232B5F8
      description: |-
        Move effect: Role Play
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSunnyDay
      address:
        NA: 0x232A220
      description: |-
        Move effect: Sunny Day
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLowerDefense1
      address:
        NA: 0x232A27C
      description: |-
        Move effect: Lower the defender's defense by one stage
        Relevant moves: Tail Whip, Leer
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWish
      address:
        NA: 0x232A2AC
      description: |-
        Move effect: Wish
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFakeOut
      address:
        NA: 0x232A2BC
      description: |-
        Move effect: Fake Out
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSleepTalk
      address:
        NA: 0x232A328
      description: |-
        Move effect: Sleep Talk
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePayDay
      address:
        EU: 0x232ADAC
        NA: 0x232A340
        JP: 0x232B7B0
      description: |-
        Move effect: Pay Day
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAssist
      address:
        NA: 0x232A3FC
      description: |-
        Move effect: Assist
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRest
      address:
        NA: 0x232A414
      description: |-
        Move effect: Rest
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveIngrain
      address:
        NA: 0x232A480
      description: |-
        Move effect: Ingrain
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSwallow
      address:
        NA: 0x232A490
      description: |-
        Move effect: Swallow
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCurse
      address:
        EU: 0x232AF54
        NA: 0x232A4E8
        JP: 0x232B958
      description: |-
        Move effect: Curse
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSuperpower
      address:
        EU: 0x232AF90
        NA: 0x232A524
        JP: 0x232B994
      description: |-
        Move effect: Superpower
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSteelWing
      address:
        NA: 0x232A5AC
      description: |-
        Move effect: Steel Wing
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSpitUp
      address:
        NA: 0x232A640
      description: |-
        Move effect: Spit Up
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDynamicPunch
      address:
        EU: 0x232B0F4
        NA: 0x232A688
        JP: 0x232BAF4
      description: |-
        Move effect: DynamicPunch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveKnockOff
      address:
        EU: 0x232B158
        NA: 0x232A6EC
        JP: 0x232BB58
      description: |-
        Move effect: Knock Off
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSplash
      address:
        NA: 0x232A8EC
      description: |-
        Move effect: Splash
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSetDamage
      address:
        NA: 0x232AC44
      description: |-
        Move effect: Give the user the Set Damage status
        Relevant moves: Doom Desire, Future Sight
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBellyDrum
      address:
        NA: 0x232AC54
      description: |-
        Move effect: Belly Drum
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLightScreen
      address:
        NA: 0x232AD08
      description: |-
        Move effect: Light Screen
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSecretPower
      address:
        EU: 0x232B784
        NA: 0x232AD18
        JP: 0x232C178
      description: |-
        Move effect: Secret Power
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageConfuse30
      address:
        NA: 0x232AEF0
      description: |-
        Move effect: Deal damage with a 30% chance (DIZZY_PUNCH_CONFUSE_CHANCE) to confuse the defender.
        Relevant moves: Dizzy Punch, Water Pulse
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBulkUp
      address:
        NA: 0x232AF5C
      description: |-
        Move effect: Bulk Up
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePause
      address:
        EU: 0x232BA0C
        NA: 0x232AFA0
        JP: 0x232C400
      description: |-
        Move effect: Inflicts the Paused status on the defender
        Relevant moves: Imprison, Observer (item effect), MOVE_TAG_0x1AD
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFeatherDance
      address:
        NA: 0x232AFF0
      description: |-
        Move effect: FeatherDance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBeatUp
      address:
        EU: 0x232BA90
        NA: 0x232B024
        JP: 0x232C484
      description: |-
        Move effect: Beat Up
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBlastBurn
      address:
        EU: 0x232BB84
        NA: 0x232B118
        JP: 0x232C578
      description: |-
        Move effect: Blast Burn
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCrushClaw
      address:
        NA: 0x232B164
      description: |-
        Move effect: Crush Claw
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBlazeKick
      address:
        NA: 0x232B1E4
      description: |-
        Move effect: Blaze Kick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePresent
      address:
        EU: 0x232BCD8
        NA: 0x232B26C
        JP: 0x232C6CC
      description: |-
        Move effect: Present
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEruption
      address:
        EU: 0x232BDD4
        NA: 0x232B368
        JP: 0x232C7C8
      description: |-
        Move effect: Eruption
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTransform
      address:
        NA: 0x232B44C
      description: |-
        Move effect: Transform
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePoisonTail
      address:
        NA: 0x232B494
      description: |-
        Move effect: Poison Tail
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBlowback
      address:
        EU: 0x232BF6C
        NA: 0x232B500
        JP: 0x232C960
      description: |-
        Move effect: Blows the defender back
        Relevant moves: Whirlwind, Roar, Blowback (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCamouflage
      address:
        NA: 0x232B518
      description: |-
        Move effect: Camouflage
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTailGlow
      address:
        NA: 0x232B5C8
      description: |-
        Move effect: Tail Glow
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageConstrict10
      address:
        EU: 0x232C054
        NA: 0x232B5E8
        JP: 0x232CA44
      description: |-
        Move effect: Deal damage with a 10% (WHIRLPOOL_CONSTRICT_CHANCE) chance to constrict, and with a damage multiplier dependent on the move used.
        Relevant moves: Clamp, Bind, Sand Tomb, Fire Spin, Magma Storm
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DoMovePerishSong
      address:
        NA: 0x232B6A4
      description: |-
        Move effect: Perish Song
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWrap
      address:
        EU: 0x232C124
        NA: 0x232B6B8
        JP: 0x232C0A4
      description: |-
        Move effect: Wrap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSpikes
      address:
        NA: 0x232B6C8
      description: |-
        Move effect: Spikes
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMagnitude
      address:
        EU: 0x232C1A4
        NA: 0x232B738
        JP: 0x232CB84
      description: |-
        Move effect: Magnitude
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMagicCoat
      address:
        NA: 0x232B7C0
      description: |-
        Move effect: Magic Coat
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveProtect
      address:
        NA: 0x232B7D0
      description: |-
        Move effect: Try to give the user the Protect status
        Relevant moves: Protect, Detect
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDefenseCurl
      address:
        NA: 0x232B7E0
      description: |-
        Move effect: Defense Curl
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDecoy
      address:
        NA: 0x232B800
      description: |-
        Move effect: Inflict the Decoy status on the target
        Relevant moves: Follow Me, Substitute, Decoy Maker (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMistBall
      address:
        NA: 0x232B820
      description: |-
        Move effect: Mist Ball
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDestinyBond
      address:
        EU: 0x232C30C
        NA: 0x232B8A0
        JP: 0x232CCEC
      description: |-
        Move effect: Destiny Bond
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMirrorCoat
      address:
        NA: 0x232B8D4
      description: |-
        Move effect: Mirror Coat
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCalmMind
      address:
        NA: 0x232B8E4
      description: |-
        Move effect: Calm Mind
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHiddenPower
      address:
        EU: 0x232C394
        NA: 0x232B928
        JP: 0x232CD74
      description: |-
        Move effect: Hidden Power
        
        This is exactly the same as DoMoveDamage (both are wrappers around DealDamage), except this function always returns true.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMetalClaw
      address:
        NA: 0x232B940
      description: |-
        Move effect: Metal Claw
        
         Note that this move effect handler has a slightly different parameter list than all the others. Which offensive stat is boosted is specified by the caller.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: stat index for the offensive stat to boost
        stack[0]: item ID
        return: whether the move was successfully used
    - name: DoMoveAttract
      address:
        EU: 0x232C440
        NA: 0x232B9D0
        JP: 0x232CE1C
      description: |-
        Move effect: Attract
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCopycat
      address:
        EU: 0x232C4B4
        NA: 0x232BA44
        JP: 0x232CE94
      description: |-
        Move effect: The attacker uses the move last used by enemy it's facing.
        Relevant moves: Mimic, Copycat
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFrustration
      address:
        EU: 0x232C5BC
        NA: 0x232BB4C
        JP: 0x232CFA0
      description: |-
        Move effect: Frustration
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLeechSeed
      address:
        EU: 0x232C6A4
        NA: 0x232BC34
        JP: 0x232D088
      description: |-
        Move effect: Leech Seed
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMetronome
      address:
        NA: 0x232BC64
      description: |-
        Move effect: Metronome
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDreamEater
      address:
        EU: 0x232C734
        NA: 0x232BCC4
      description: |-
        Move effect: Dream Eater
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSnatch
      address:
        NA: 0x232BE34
      description: |-
        Move effect: Snatch
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRecycle
      address:
        NA: 0x232BE44
      description: |-
        Move effect: Recycle
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveReflect
      address:
        NA: 0x232BF78
      description: |-
        Move effect: Reflect
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDragonRage
      address:
        NA: 0x232BF88
      description: |-
        Move effect: Dragon Rage
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDragonDance
      address:
        NA: 0x232C028
      description: |-
        Move effect: Dragon Dance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSkullBash
      address:
        NA: 0x232C064
      description: |-
        Move effect: Skull Bash
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageLowerSpecialDefense50
      address:
        EU: 0x232CB64
        NA: 0x232C0F4
        JP: 0x232D540
      description: |-
        Move effect: Deal damage with a 50% (LUSTER_PURGE_LOWER_SPECIAL_DEFENSE_CHANCE) chance to lower special defense.
        Relevant moves: Luster Purge, Energy Ball, Focus Blast
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveStruggle
      address:
        NA: 0x232C1A4
      description: |-
        Move effect: Struggle
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRockSmash
      address:
        NA: 0x232C27C
      description: |-
        Move effect: Rock Smash
        Relevant moves: Rock Smash, MOVE_UNNAMED_0x169
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSeeTrap
      address:
        NA: 0x232C300
      description: |-
        Move effect: See-Trap (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTakeaway
      address:
        NA: 0x232C310
      description: |-
        Move effect: Takeaway (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRebound
      address:
        NA: 0x232C524
      description: |-
        Move effect: Rebound (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSwitchPositions
      address:
        NA: 0x232C538
      description: |-
        Move effect: Switches the user's position with positions of other monsters in the room.
        Relevant moves: Baton Pass, Switcher (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveStayAway
      address:
        NA: 0x232C560
      description: |-
        Move effect: Stay Away (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCleanse
      address:
        NA: 0x232C578
      description: |-
        Move effect: Cleanse (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSiesta
      address:
        NA: 0x232C6B4
      description: |-
        Move effect: Siesta (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTwoEdge
      address:
        NA: 0x232C6F0
      description: |-
        Move effect: Two-Edge (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveNoMove
      address:
        NA: 0x232C818
      description: |-
        Move effect: No-Move (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveScan
      address:
        NA: 0x232C82C
      description: |-
        Move effect: Scan (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePowerEars
      address:
        NA: 0x232C83C
      description: |-
        Move effect: Power-Ears (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTransfer
      address:
        NA: 0x232C84C
      description: |-
        Move effect: Transfer (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSlowDown
      address:
        NA: 0x232CA14
      description: |-
        Move effect: Slow Down (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSearchlight
      address:
        NA: 0x232CA2C
      description: |-
        Move effect: Searchlight (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePetrify
      address:
        NA: 0x232CA3C
      description: |-
        Move effect: Petrifies the target
        Relevant moves: Petrify (item effect), MOVE_TAG_0x1A9
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePounce
      address:
        NA: 0x232CA4C
      description: |-
        Move effect: Pounce (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTrawl
      address:
        NA: 0x232CA60
      description: |-
        Move effect: Trawl (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEscape
      address:
        NA: 0x232CA70
      description: |-
        Move effect: Escape (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDrought
      address:
        NA: 0x232CB08
      description: |-
        Move effect: Drought (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTrapBuster
      address:
        NA: 0x232CB18
      description: |-
        Move effect: Trap Buster (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWildCall
      address:
        NA: 0x232CCC4
      description: |-
        Move effect: Wild Call (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveInvisify
      address:
        NA: 0x232CD90
      description: |-
        Move effect: Invisify (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveOneShot
      address:
        NA: 0x232CDA4
      description: |-
        Move effect: One-Shot (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHpGauge
      address:
        NA: 0x232CE40
      description: |-
        Move effect: HP Gauge (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveVacuumCut
      address:
        NA: 0x232CE50
      description: |-
        Move effect: Vacuum Cut
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveReviver
      address:
        NA: 0x232CE7C
      description: |-
        Move effect: Reviver (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveShocker
      address:
        NA: 0x232CE94
      description: |-
        Move effect: Shocker (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEcho
      address:
        NA: 0x232CEAC
      description: |-
        Move effect: Echo (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFamish
      address:
        NA: 0x232CF54
      description: |-
        Move effect: Famish (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveOneRoom
      address:
        NA: 0x232CF74
      description: |-
        Move effect: One-Room (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFillIn
      address:
        NA: 0x232CF84
      description: |-
        Move effect: Fill-In (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTrapper
      address:
        NA: 0x232D0F0
      description: |-
        Move effect: Trapper (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveItemize
      address:
        NA: 0x232D148
      description: |-
        Move effect: Itemize (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHurl
      address:
        EU: 0x232DC4C
        NA: 0x232D1DC
        JP: 0x232E620
      description: |-
        Move effect: Hurls the target
        Relevant moves: Strength, Hurl (item effect), Fling
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMobile
      address:
        NA: 0x232D1EC
      description: |-
        Move effect: Mobile (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveSeeStairs
      address:
        NA: 0x232D1FC
      description: |-
        Move effect: See Stairs (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLongToss
      address:
        NA: 0x232D20C
      description: |-
        Move effect: Long Toss (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePierce
      address:
        NA: 0x232D21C
      description: |-
        Move effect: Pierce (item effect)
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoHammerArm
      address:
        EU: 0x232DC9C
        NA: 0x232D22C
        JP: 0x232E670
      description: |-
        Move effect: Hammer Arm
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAquaRing
      address:
        NA: 0x232D270
      description: |-
        Move effect: Aqua Ring
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGastroAcid
      address:
        EU: 0x232DCF0
        NA: 0x232D280
        JP: 0x232E6C4
      description: |-
        Move effect: Gastro Acid
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHealingWish
      address:
        NA: 0x232D298
      description: |-
        Move effect: Healing Wish
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCloseCombat
      address:
        EU: 0x232DD58
        NA: 0x232D2E8
        JP: 0x232E72C
      description: |-
        Move effect: Close Combat
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLuckyChant
      address:
        NA: 0x232D368
      description: |-
        Move effect: Lucky Chant
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGuardSwap
      address:
        EU: 0x232DDE8
        NA: 0x232D378
      description: |-
        Move effect: Guard Swap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHealOrder
      address:
        NA: 0x232D3D8
      description: |-
        Move effect: Heal Order
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHealBlock
      address:
        NA: 0x232D400
      description: |-
        Move effect: Heal Block
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveThunderFang
      address:
        EU: 0x232DE88
        NA: 0x232D418
        JP: 0x232E85C
      description: |-
        Move effect: Thunder Fang
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDefog
      address:
        EU: 0x232DF1C
        NA: 0x232D4AC
        JP: 0x232E8F0
      description: |-
        Move effect: Defog
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTrumpCard
      address:
        EU: 0x232DFD0
        NA: 0x232D560
        JP: 0x232E9A4
      description: |-
        Move effect: Trump Card
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveIceFang
      address:
        EU: 0x232E090
        NA: 0x232D620
        JP: 0x232EA64
      description: |-
        Move effect: Ice Fang
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePsychoShift
      address:
        EU: 0x232E120
        NA: 0x232D6B0
        JP: 0x232EAF4
      description: |-
        Move effect: Psycho Shift
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveEmbargo
      address:
        EU: 0x232E140
        NA: 0x232D6D0
        JP: 0x232EB14
      description: |-
        Move effect: Embargo
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveBrine
      address:
        EU: 0x232E158
        NA: 0x232D6E8
        JP: 0x232EB2C
      description: |-
        Move effect: Deal damage, with a 2x multiplier if the defender is at or below half HP.
        Relevant moves: Brine, Assurance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveNaturalGift
      address:
        EU: 0x232E1A8
        NA: 0x232D738
        JP: 0x232EB7C
      description: |-
        Move effect: Natural Gift
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGyroBall
      address:
        EU: 0x232E268
        NA: 0x232D7F8
        JP: 0x232EC3C
      description: |-
        Move effect: Gyro Ball
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveShadowForce
      address:
        NA: 0x232D860
      description: |-
        Move effect: Shadow Force
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveGravity
      address:
        NA: 0x232D8FC
      description: |-
        Move effect: Gravity
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveStealthRock
      address:
        NA: 0x232D90C
      description: |-
        Move effect: Stealth Rock
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveChargeBeam
      address:
        EU: 0x232E3EC
        NA: 0x232D97C
        JP: 0x232EDB0
      description: |-
        Move effect: Charge Beam
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageEatItem
      address:
        NA: 0x232D9E4
      description: |-
        Move effect: Deals damage, and eats any beneficial items the defender is holding.
        Relevant moves: Pluck, Bug Bite
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveAcupressure
      address:
        NA: 0x232DAD0
      description: |-
        Move effect: Acupressure
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMagnetRise
      address:
        NA: 0x232DC54
      description: |-
        Move effect: Magnet Rise
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveToxicSpikes
      address:
        NA: 0x232DC64
      description: |-
        Move effect: Toxic Spikes
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLastResort
      address:
        EU: 0x232E714
        NA: 0x232DCD4
        JP: 0x232F0DC
      description: |-
        Move effect: Last Resort
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTrickRoom
      address:
        NA: 0x232DD78
      description: |-
        Move effect: Trick Room
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWorrySeed
      address:
        NA: 0x232DDAC
      description: |-
        Move effect: Worry Seed
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDamageHpDependent
      address:
        EU: 0x232E8C4
        NA: 0x232DE84
        JP: 0x232F284
      description: |-
        Move effect: Deal damage, with a multiplier dependent on the defender's current HP.
        Relevant moves: Wring Out, Crush Grip
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHeartSwap
      address:
        EU: 0x232E978
        NA: 0x232DF38
        JP: 0x232F338
      description: |-
        Move effect: Heart Swap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveRoost
      address:
        NA: 0x232DFC8
      description: |-
        Move effect: Roost
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePowerSwap
      address:
        EU: 0x232EAC4
        NA: 0x232E084
      description: |-
        Move effect: Power Swap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMovePowerTrick
      address:
        NA: 0x232E0E4
      description: |-
        Move effect: Power Trick
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFeint
      address:
        EU: 0x232EB38
        NA: 0x232E0F8
        JP: 0x232F4F8
      description: |-
        Move effect: Feint
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFlareBlitz
      address:
        EU: 0x232EB70
        NA: 0x232E130
        JP: 0x232F530
      description: |-
        Move effect: Flare Blitz
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDefendOrder
      address:
        NA: 0x232E274
      description: |-
        Move effect: Defend Order
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveFireFang
      address:
        EU: 0x232ECF8
        NA: 0x232E2B8
        JP: 0x232F6B8
      description: |-
        Move effect: Fire Fang
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLunarDance
      address:
        NA: 0x232E368
      description: |-
        Move effect: Lunar Dance
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMiracleEye
      address:
        EU: 0x232EE10
        NA: 0x232E3D0
        JP: 0x232F7D0
      description: |-
        Move effect: Miracle Eye
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveWakeUpSlap
      address:
        EU: 0x232EE40
        NA: 0x232E400
        JP: 0x232F800
      description: |-
        Move effect: Wake-Up Slap
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveMetalBurst
      address:
        NA: 0x232E48C
      description: |-
        Move effect: Metal Burst
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveHeadSmash
      address:
        EU: 0x232EEE0
        NA: 0x232E4A0
        JP: 0x232F8A0
      description: |-
        Move effect: Head Smash
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveCaptivate
      address:
        EU: 0x232EFA0
        NA: 0x232E560
        JP: 0x232F960
      description: |-
        Move effect: Captivate
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveLeafStorm
      address:
        NA: 0x232E624
      description: |-
        Move effect: Leaf Storm
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveDracoMeteor
      address:
        NA: 0x232E67C
      description: |-
        Move effect: Draco Meteor
        
        Note that this move effect handler has an extra parameter that can be used to disable the special attack drop.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        r4: disable special attack drop
        return: whether the move was successfully used
    - name: DoMoveRockPolish
      address:
        NA: 0x232E6E0
      description: |-
        Move effect: Rock Polish
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveNastyPlot
      address:
        NA: 0x232E714
      description: |-
        Move effect: Nasty Plot
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTag0x1AB
      address:
        NA: 0x232E734
      description: |-
        Move effect: MOVE_TAG_0x1AB
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTag0x1A6
      address:
        NA: 0x232E750
      description: |-
        Move effect: MOVE_TAG_0x1A6
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: DoMoveTag0x1A7
      address:
        NA: 0x232E794
      description: |-
        Move effect: MOVE_TAG_0x1A7
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether the move was successfully used
    - name: ExecuteMoveEffect
      address:
        EU: 0x232F2A4
        NA: 0x232E864
        JP: 0x232FC60
      description: |-
        Handles the effects that happen after a move is used. Includes a loop that is run for each target, mutiple ability checks and the giant switch statement that executes the effect of the move used given its ID.
        
        r0: pointer to some struct
        r1: attacker pointer
        r2: pointer to move data
        r3: ?
        stack[0]: ?
    - name: DoMoveDamageInlined
      address:
        EU: 0x23334B0
        NA: 0x2332A70
        JP: 0x2333E60
      description: |-
        Exactly the same as DoMoveDamage, except it appears DealDamage was inlined.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: item ID
        return: whether or not damage was dealt
    - name: DealDamage
      address:
        EU: 0x2333560
        NA: 0x2332B20
        JP: 0x2333F10
      description: |-
        Deals damage from a move or item used by an attacking monster on a defending monster.
        
        r0: attacker pointer
        r1: defender pointer
        r2: move
        r3: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[0]: item ID
        return: amount of damage dealt
    - name: CalcDamageProjectile
      address:
        EU: 0x233368C
        NA: 0x2332C4C
        JP: 0x233403C
      description: |-
        Appears to calculate damage from a variable-damage projectile.
        
        r0: entity pointer 1?
        r1: entity pointer 2?
        r2: move pointer
        r3: move power
        stack[0]: damage multiplier (as a binary fixed-point number with 8 fraction bits)
        stack[1]: item ID of the projectile
        return: Calculated damage
    - name: CalcDamageFinal
      address:
        EU: 0x23337AC
        NA: 0x2332D6C
        JP: 0x233415C
      description: |-
        Last function called by DealDamage to determine the final damage dealt by the move. The result of this call is the return value of DealDamage. 
        
        r0: Attacker pointer
        r1: Defender pointer
        r2: Move pointer
        r3: [output] struct containing info about the damage calculation
        stack[0]: Faint reason (see HandleFaint)
        return: Calculated damage
    - name: StatusCheckerCheck
      address:
        EU: 0x2333AB4
        NA: 0x2333074
        JP: 0x2334460
      description: |-
        Determines if using a given move against its intended targets would be redundant because all of them already have the effect caused by said move.
        
        r0: Pointer to the entity that is considering using the move
        r1: Move pointer
        return: True if it makes sense to use the move, false if it would be redundant given the effects it causes and the effects that all the targets already have.
    - name: GetApparentWeather
      address:
        EU: 0x2335748
        NA: 0x2334D08
        JP: 0x23360F4
      description: |-
        Get the weather, as experienced by a specific entity.
        
        r0: entity pointer
        return: weather ID
    - name: TryWeatherFormChange
      address:
        EU: 0x2335BB0
        NA: 0x2335170
        JP: 0x233655C
      description: |-
        Tries to change a monster into one of its weather-related alternative forms. Applies to Castform and Cherrim, and checks for their unique abilities.
        
        r0: pointer to entity
    - name: ActivateSportCondition
      address:
        NA: 0x233544C
      description: |-
        Activates the Mud Sport or Water Sport condition on the dungeon floor for some number of turns.
        
        r0: water sport flag (false for Mud Sport, true for Water Sport)
    - name: DigitCount
      address:
        EU: 0x23360B0
        NA: 0x2335670
        JP: 0x2336A5C
      description: |-
        Counts the number of digits in a nonnegative integer.
        
        If the number is negative, it is cast to a uint16_t before counting digits.
        
        r0: int
        return: number of digits in int
    - name: LoadTextureUi
      address:
        EU: 0x2336100
        NA: 0x23356C0
        JP: 0x2336AAC
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: DisplayNumberTextureUi
      address:
        EU: 0x23362CC
        NA: 0x2335880
        JP: 0x2336C50
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: x position
        r1: y position
        r2: number
        r3: ally_mode
        return: xsize
    - name: DisplayCharTextureUi
      address:
        EU: 0x23363D4
        NA: 0x2335988
        JP: 0x2336D58
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: call_back_str
        r1: x position
        r2: y position
        r3: char_id
        stack[0]: ?
        return: ?
    - name: DisplayUi
      address:
        EU: 0x233645C
        NA: 0x2335A10
        JP: 0x2336DE0
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: GetTile
      address:
        EU: 0x2336CCC
        NA: 0x23360FC
        JP: 0x23374CC
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: GetTileSafe
      address:
        EU: 0x2336D34
        NA: 0x2336164
        JP: 0x2337534
      description: |-
        Get the tile at some position. If the coordinates are out of bounds, returns a pointer to a copy of the default tile.
        
        r0: x position
        r1: y position
        return: tile pointer
    - name: IsFullFloorFixedRoom
      address:
        EU: 0x2336DA4
        NA: 0x23361D4
        JP: 0x23375A4
      description: |-
        Checks if the current fixed room on the dungeon generation info corresponds to a fixed, full-floor layout.
        
        The first non-full-floor fixed room is 0xA5, which is for Sealed Chambers.
        
        return: bool
    - name: GetStairsRoom
      address:
        EU: 0x2336FF8
        NA: 0x2336428
        JP: 0x23377F8
      description: |-
        Returns the index of the room that contains the stairs
        
        return: Room index
    - name: GetRandomSpawnMonsterID
      address:
        EU: 0x2338B68
        NA: 0x2337F98
        JP: 0x233935C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        return: monster ID?
    - name: GravityIsActive
      address:
        EU: 0x2338F60
        NA: 0x2338390
      description: |-
        Checks if gravity is active on the floor.
        
        return: bool
    - name: IsSecretBazaar
      address:
        EU: 0x2339194
        NA: 0x23385C4
      description: |-
        Checks if the current floor is the Secret Bazaar.
        
        return: bool
    - name: ShouldBoostHiddenStairsSpawnChance
      address:
        EU: 0x23391BC
        NA: 0x23385EC
      description: |-
        Gets the boost_hidden_stairs_spawn_chance field on the dungeon struct.
        
        return: bool
    - name: SetShouldBoostHiddenStairsSpawnChance
      address:
        EU: 0x23391D4
        NA: 0x2338604
      description: |-
        Sets the boost_hidden_stairs_spawn_chance field on the dungeon struct to the given value.
        
        r0: bool to set the flag to
    - name: IsSecretRoom
      address:
        EU: 0x233922C
        NA: 0x233865C
      description: |-
        Checks if the current floor is the Secret Room fixed floor (from hidden stairs).
        
        return: bool
    - name: IsSecretFloor
      address:
        EU: 0x2339254
        NA: 0x2338684
        JP: 0x2339A48
      description: |-
        Checks if the current floor is a secret bazaar or a secret room.
        
        return: bool
    - name: GetDungeonGenInfoUnk0C
      address:
        EU: 0x2339450
        NA: 0x2338880
      description: "return: dungeon_generation_info::field_0xc"
    - name: GetMinimapData
      address:
        EU: 0x2339CE8
        NA: 0x2339118
      description: |-
        Returns a pointer to the minimap_display_data struct in the dungeon struct.
        
        return: minimap_display_data*
    - name: SetMinimapDataE447
      address:
        EU: 0x233ADE8
        NA: 0x233A218
        JP: 0x233B5DC
      description: |-
        Sets minimap_display_data::field_0xE447 to the specified value
        
        r0: Value to set the field to
    - name: GetMinimapDataE447
      address:
        EU: 0x233AE00
      description: |-
        Exclusive to the EU ROM. Returns minimap_display_data::field_0xE447.
        
        return: minimap_display_data::field_0xE447
    - name: SetMinimapDataE448
      address:
        EU: 0x233AE14
        NA: 0x233A230
        JP: 0x233B5F4
      description: |-
        Sets minimap_display_data::field_0xE448 to the specified value
        
        r0: Value to set the field to
    - name: LoadFixedRoomDataVeneer
      address:
        EU: 0x233B208
        NA: 0x233A624
      description: |-
        Likely a linker-generated veneer for LoadFixedRoomData.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        No params.
    - name: IsNormalFloor
      address:
        EU: 0x233B238
        NA: 0x233A654
        JP: 0x233BA18
      description: |-
        Checks if the current floor is a normal layout.
        
        "Normal" means any layout that is NOT one of the following:
        - Hidden stairs floors
        - Golden Chamber
        - Challenge Request floor
        - Outlaw hideout
        - Treasure Memo floor
        - Full-room fixed floors (ID < 0xA5) [0xA5 == Sealed Chamber]
        
        return: bool
    - name: GenerateFloor
      address:
        EU: 0x233B2BC
        NA: 0x233A6D8
        JP: 0x233BA9C
      description: |-
        This is the master function that generates the dungeon floor.
        
        Very loosely speaking, this function first tries to generate a valid floor layout. Then it tries to spawn entities in a valid configuration. Finally, it performs cleanup and post-processing depending on the dungeon.
        
        If a spawn configuration is invalid, the entire floor layout is scrapped and regenerated. If the generated floor layout is invalid 10 times in a row, or a valid spawn configuration isn't generated within 10 attempts, the generation algorithm aborts and the default one-room Monster House floor is generated as a fallback.
        
        No params.
    - name: GetTileTerrain
      address:
        EU: 0x233BA5C
        NA: 0x233AE78
        JP: 0x233C23C
      description: |-
        Gets the terrain type of a tile.
        
        r0: tile pointer
        return: terrain ID
    - name: DungeonRand100
      address:
        EU: 0x233BA68
        NA: 0x233AE84
        JP: 0x233C248
      description: |-
        Compute a pseudorandom integer on the interval [0, 100) using the dungeon PRNG.
        
        return: pseudorandom integer
    - name: ClearHiddenStairs
      address:
        EU: 0x233BA78
        NA: 0x233AE94
        JP: 0x233C258
      description: |-
        Clears the tile (terrain and spawns) on which Hidden Stairs are spawned, if applicable.
        
        No params.
    - name: FlagHallwayJunctions
      address:
        EU: 0x233BAF0
        NA: 0x233AF0C
        JP: 0x233C2D0
      description: |-
        Sets the junction flag (bit 3 of the terrain flags) on any hallway junction tiles in some range [x0, x1), [y0, y1). This leaves tiles within rooms untouched.
        
        A hallway tile is considered a junction if it has at least 3 cardinal neighbors with open terrain.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
    - name: GenerateStandardFloor
      address:
        EU: 0x233BC0C
        NA: 0x233B028
        JP: 0x233C3EC
      description: |-
        Generate a standard floor with the given parameters.
        
        Broadly speaking, a standard floor is generated as follows:
        1. Generating the grid
        2. Creating a room or hallway anchor in each grid cell
        3. Creating hallways between grid cells
        4. Generating special features (maze room, Kecleon shop, Monster House, extra hallways, room imperfections, secondary structures)
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: GenerateOuterRingFloor
      address:
        EU: 0x233BD74
        NA: 0x233B190
        JP: 0x233C554
      description: |-
        Generates a floor layout with a 4x2 grid of rooms, surrounded by an outer ring of hallways.
        
        r0: floor properties
    - name: GenerateCrossroadsFloor
      address:
        EU: 0x233C200
        NA: 0x233B61C
        JP: 0x233C9E0
      description: |-
        Generates a floor layout with a mesh of hallways on the interior 3x2 grid, surrounded by a boundary of rooms protruding from the interior like spikes, excluding the corner cells.
        
        r0: floor properties
    - name: GenerateLineFloor
      address:
        EU: 0x233C660
        NA: 0x233BA7C
        JP: 0x233CE40
      description: |-
        Generates a floor layout with 5 grid cells in a horizontal line.
        
        r0: floor properties
    - name: GenerateCrossFloor
      address:
        EU: 0x233C7C0
        NA: 0x233BBDC
        JP: 0x233CFA0
      description: |-
        Generates a floor layout with 5 rooms arranged in a cross ("plus sign") formation.
        
        r0: floor properties
    - name: GenerateBeetleFloor
      address:
        EU: 0x233C958
        NA: 0x233BD74
        JP: 0x233D138
      description: |-
        Generates a floor layout in a "beetle" formation, which is created by taking a 3x3 grid of rooms, connecting the rooms within each row, and merging the central column into one big room.
        
        r0: floor properties
    - name: MergeRoomsVertically
      address:
        EU: 0x233CB14
        NA: 0x233BF30
        JP: 0x233D2F4
      description: |-
        Merges two vertically stacked rooms into one larger room.
        
        r0: x grid coordinate of the rooms to merge
        r1: y grid coordinate of the upper room
        r2: dy, where the lower room has a y grid coordinate of y+dy
        r3: grid to update
    - name: GenerateOuterRoomsFloor
      address:
        EU: 0x233CC60
        NA: 0x233C07C
        JP: 0x233D440
      description: |-
        Generates a floor layout with a ring of rooms on the grid boundary and nothing in the interior.
        
        Note that this function is bugged, and won't properly connect all the rooms together for grid_size_x < 4.
        
        r0: grid size x
        r1: grid size y
        r2: floor properties
    - name: IsNotFullFloorFixedRoom
      address:
        EU: 0x233CEF4
        NA: 0x233C310
        JP: 0x233D6D4
      description: |-
        Checks if a fixed room ID does not correspond to a fixed, full-floor layout.
        
        The first non-full-floor fixed room is 0xA5, which is for Sealed Chambers.
        
        r0: fixed room ID
        return: bool
    - name: GenerateFixedRoom
      address:
        EU: 0x233CF10
        NA: 0x233C32C
      description: |-
        Handles fixed room generation if the floor contains a fixed room.
        
        r0: fixed room ID
        r1: floor properties
        return: bool
    - name: GenerateOneRoomMonsterHouseFloor
      address:
        EU: 0x233D358
        NA: 0x233C774
        JP: 0x233DB34
      description: |-
        Generates a floor layout with just a large, one-room Monster House.
        
        This is the default layout if dungeon generation fails.
        
        No params.
    - name: GenerateTwoRoomsWithMonsterHouseFloor
      address:
        EU: 0x233D428
        NA: 0x233C844
        JP: 0x233DC04
      description: |-
        Generate a floor layout with two rooms (left and right), one of which is a Monster House.
        
        No params.
    - name: GenerateExtraHallways
      address:
        EU: 0x233D5CC
        NA: 0x233C9E8
        JP: 0x233DDA8
      description: |-
        Generate extra hallways on the floor via a series of random walks.
        
        Each random walk starts from a random tile in a random room, leaves the room in a random cardinal direction, and from there tunnels through obstacles through a series of random turns, leaving open terrain in its wake. The random walk stops when it reaches open terrain, goes out of bounds, or reaches an impassable obstruction.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of extra hallways to generate
    - name: GetGridPositions
      address:
        EU: 0x233DB68
        NA: 0x233CF84
        JP: 0x233E344
      description: |-
        Get the grid cell positions for a given set of floor grid dimensions.
        
        r0: [output] pointer to array of the starting x coordinates of each grid column
        r1: [output] pointer to array of the starting y coordinates of each grid row
        r2: grid size x
        r3: grid size y
    - name: InitDungeonGrid
      address:
        EU: 0x233DBE8
        NA: 0x233D004
        JP: 0x233E3C4
      description: |-
        Initialize a dungeon grid with defaults.
        
        The grid is an array of grid cells stored in column-major order (such that grid cells with the same x value are stored contiguously), with a fixed column size of 15. If the grid size in the y direction is less than this, the last (15 - grid_size_y) entries of each column will be uninitialized.
        
        Note that the grid size arguments define the maximum size of the grid from a programmatic standpoint. However, grid cells can be invalidated if they exceed the configured floor size in the dungeon generation status struct. Thus, the dimensions of the ACTIVE grid can be smaller.
        
        r0: [output] grid (expected to have space for at least (15*(grid_size_x-1) + grid_size_y) dungeon grid cells)
        r1: grid size x
        r2: grid size y
    - name: AssignRooms
      address:
        EU: 0x233DCE8
        NA: 0x233D104
        JP: 0x233E4C4
      description: |-
        Randomly selects a subset of grid cells to become rooms.
        
        The given number of grid cells will become rooms. If any of the selected grid cells are invalid, fewer rooms will be generated. The number of rooms assigned will always be at least 2 and never exceed 36.
        
        Cells not marked as rooms will become hallway anchors. A hallway anchor is a single tile in a non-room grid cell to which hallways will be connected later, thus "anchoring" hallway generation.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: number of rooms; if positive, a random value between [n_rooms, n_rooms+2] will be used. If negative, |n_rooms| will be used exactly.
    - name: CreateRoomsAndAnchors
      address:
        EU: 0x233DEFC
        NA: 0x233D318
        JP: 0x233E6D8
      description: |-
        Creates rooms and hallway anchors in each grid cell as designated by AssignRooms.
        
        This function creates a rectangle of open terrain for each room (with some margin relative to the grid cell border). A single open tile is created in hallway anchor cells, and a hallway anchor indicator is set for later reference.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: room bitflags; only uses bit 2 (mask: 0b100), which enables room imperfections
    - name: GenerateSecondaryStructures
      address:
        EU: 0x233E258
        NA: 0x233D674
        JP: 0x233EA34
      description: |-
        Try to generate secondary structures in flagged rooms.
        
        If a valid room with no special features is flagged to have a secondary structure, try to generate a random one in the room, based on the result of a dice roll:
          0: no secondary structure
          1: maze, or a central water/lava "plus sign" as fallback, or a single water/lava tile in the center as a second fallback
          2: checkerboard pattern of water/lava
          3: central pool of water/lava
          4: central "island" with items and a Warp Tile, surrounded by a "moat" of water/lava
          5: horizontal or vertical divider of water/lava splitting the room in two
        
        If the room isn't the right shape, dimension, or otherwise doesn't support the selected secondary structure, it is left untouched.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: AssignGridCellConnections
      address:
        EU: 0x233EC40
        NA: 0x233E05C
        JP: 0x233F41C
      description: |-
        Randomly assigns connections between adjacent grid cells.
        
        Connections are created via a random walk with momentum, starting from the grid cell at (cursor x, cursor y). A connection is drawn in a random direction from the current cursor, and this process is repeated a certain number of times (the "floor connectivity" specified in the floor properties). The direction of the random walk has "momentum"; there's a 50% chance it will be the same as the previous step (or rotated counterclockwise if on the boundary). This helps to reduce the number of dead ends and forks in the road caused by the random walk "doubling back" on itself.
        
        If dead ends are disabled in the floor properties, there is an additional phase to remove dead end hallway anchors (only hallway anchors, not rooms) by drawing additional connections. Note that the actual implementation contains a bug: the grid cell validity checks use the wrong index, so connections may be drawn to invalid cells.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: cursor x
        stack[0]: cursor y
        stack[1]: floor properties
    - name: CreateGridCellConnections
      address:
        EU: 0x233F020
        NA: 0x233E43C
        JP: 0x233F7FC
      description: |-
        Create grid cell connections either by creating hallways or merging rooms.
        
        When creating a hallway connecting a hallway anchor, the exact anchor coordinates are used as the endpoint. When creating a hallway connecting a room, a random point on the room edge facing the hallway is used as the endpoint. The grid cell boundaries are used as the middle coordinates for kinks (see CreateHallway).
        
        If room merging is enabled, there is a 9.75% chance that two connected rooms will be merged into a single larger room (9.75% comes from two 5% rolls, one for each of the two rooms being merged). A room can only participate in a merge once.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
        stack[1]: disable room merging flag
    - name: GenerateRoomImperfections
      address:
        EU: 0x233F918
        NA: 0x233ED34
        JP: 0x23400F4
      description: |-
        Attempt to generate room imperfections for each room in the floor layout, if enabled.
        
        Each room has a 40% chance of having imperfections if its grid cell is flagged to allow room imperfections. Imperfections are generated by randomly growing the walls of the room inwards for a certain number of iterations, starting from the corners.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
    - name: CreateHallway
      address:
        EU: 0x233FD04
        NA: 0x233F120
        JP: 0x23404E0
      description: |-
        Create a hallway between two points.
        
        If the two points share no coordinates in common (meaning the line connecting them is diagonal), a "kinked" hallway is created, with the kink at a specified "middle" coordinate (in practice the grid cell boundary). For example, with a kinked horizontal hallway, there are two horizontal lines extending out from the endpoints, connected by a vertical line on the middle x coordinate.
        
        If a hallway would intersect with an existing open tile (like an existing hallway), the hallway will only be created up to the point where it intersects with the open tile.
        
        r0: x0
        r1: y0
        r2: x1
        r3: y1
        stack[0]: vertical flag (true for vertical hallway, false for horizontal)
        stack[1]: middle x coordinate for kinked horizontal hallways
        stack[2]: middle y coordinate for kinked vertical hallways
    - name: EnsureConnectedGrid
      address:
        EU: 0x2340008
        NA: 0x233F424
        JP: 0x23407E4
      description: |-
        Ensure the grid forms a connected graph (all valid cells are reachable) by adding hallways to unreachable grid cells.
        
        If a grid cell cannot be connected for some reason, remove it entirely.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: array of the starting x coordinates of each grid column
        stack[0]: array of the starting y coordinates of each grid row
    - name: SetTerrainObstacleChecked
      address:
        EU: 0x23404E4
        NA: 0x233F900
        JP: 0x2340CC0
      description: |-
        Set the terrain of a specific tile to be an obstacle (wall or secondary terrain).
        
        Secondary terrain (water/lava) can only be placed in the specified room. If the tile room index does not match, a wall will be placed instead.
        
        r0: tile pointer
        r1: use secondary terrain flag (true for water/lava, false for wall)
        r2: room index
    - name: FinalizeJunctions
      address:
        EU: 0x2340520
        NA: 0x233F93C
        JP: 0x2340CFC
      description: |-
        Finalizes junction tiles by setting the junction flag (bit 3 of the terrain flags) and ensuring open terrain.
        
        Note that this implementation is slightly buggy. This function scans tiles left-to-right, top-to-bottom, and identifies junctions as any open, non-hallway tile (room_index != 0xFF) adjacent to an open, hallway tile (room_index == 0xFF). This interacts poorly with hallway anchors (room_index == 0xFE). This function sets the room index of any hallway anchors to 0xFF within the same loop, so a hallway anchor may or may not be identified as a junction depending on the orientation of connected hallways.
        
        For example, in the following configuration, the "o" tile would be marked as a junction because the neighboring hallway tile to its left comes earlier in iteration, while the "o" tile still has the room index 0xFE, causing the algorithm to mistake it for a room tile:
          xxxxx
          ---ox
          xxx|x
          xxx|x
        However, in the following configuration, the "o" tile would NOT be marked as a junction because it comes earlier in iteration than any of its neighboring hallway tiles, so its room index is set to 0xFF before it can be marked as a junction. This is actually the ONLY possible configuration where a hallway anchor will not be marked as a junction.
          xxxxx
          xo---
          x|xxx
          x|xxx
        
        No params.
    - name: GenerateKecleonShop
      address:
        EU: 0x23407CC
        NA: 0x233FBE8
        JP: 0x2340FA8
      description: |-
        Possibly generate a Kecleon shop on the floor.
        
        A Kecleon shop will be generated with a probability determined by the Kecleon shop spawn chance parameter. A Kecleon shop will be generated in a random room that is valid, connected, has no other special features, and has dimensions of at least 5x4. Kecleon shops will occupy the entire room interior, leaving a one tile margin from the room walls.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Kecleon shop spawn chance (percentage from 0-100)
    - name: GenerateMonsterHouse
      address:
        EU: 0x2340B80
        NA: 0x233FF9C
        JP: 0x234135C
      description: |-
        Possibly generate a Monster House on the floor.
        
        A Monster House will be generated with a probability determined by the Monster House spawn chance parameter, and only if the current floor can support one (no non-Monster-House outlaw missions or special floor types). A Monster House will be generated in a random room that is valid, connected, and is not a merged or maze room.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: Monster House spawn chance (percentage from 0-100)
    - name: GenerateMazeRoom
      address:
        EU: 0x2340E08
        NA: 0x2340224
        JP: 0x23415E4
      description: |-
        Possibly generate a maze room on the floor.
        
        A maze room will be generated with a probability determined by the maze room chance parameter. A maze will be generated in a random room that is valid, connected, has odd dimensions, and has no other features.
        
        r0: grid to update
        r1: grid size x
        r2: grid size y
        r3: maze room chance (percentage from 0-100)
    - name: GenerateMaze
      address:
        EU: 0x234103C
        NA: 0x2340458
        JP: 0x2341818
      description: |-
        Generate a maze room within a given grid cell.
        
        A "maze" is generated within the room using a series of random walks to place obstacle terrain (walls or secondary terrain) in a maze-like arrangement. "Maze lines" (see GenerateMazeLine) are generated using every other tile around the room's border, as well as every other interior tile, as a starting point. This ensures that there are stripes of walkable open terrain surrounded by stripes of obstacles (the maze walls).
        
        r0: grid cell pointer
        r1: use secondary terrain flag (true for water/lava, false for walls)
    - name: GenerateMazeLine
      address:
        EU: 0x23412B8
        NA: 0x23406D4
        JP: 0x2341A94
      description: |-
        Generate a "maze line" from a given starting point, within the given bounds.
        
        A "maze line" is a random walk starting from (x0, y0). The random walk proceeds with a stride of 2 in a random direction, laying down obstacles as it goes. The random walk terminates when it gets trapped and there are no more neighboring tiles that are open and in-bounds.
        
        r0: x0
        r1: y0
        r2: xmin
        r3: ymin
        stack[0]: xmax
        stack[1]: ymax
        stack[2]: use secondary terrain flag (true for water/lava, false for walls)
        stack[3]: room index
    - name: SetSpawnFlag5
      address:
        EU: 0x2341460
        NA: 0x234087C
        JP: 0x2341C3C
      description: |-
        Set spawn flag 5 (0b100000 or 0x20) on all tiles in a room.
        
        r0: grid cell
    - name: IsNextToHallway
      address:
        EU: 0x23414B4
        NA: 0x23408D0
        JP: 0x2341C90
      description: |-
        Checks if a tile position is either in a hallway or next to one.
        
        r0: x
        r1: y
        return: bool
    - name: ResolveInvalidSpawns
      address:
        EU: 0x2341558
        NA: 0x2340974
        JP: 0x2341D34
      description: |-
        Resolve invalid spawn flags on tiles.
        
        Spawn flags can be invalid due to terrain. For example, traps can't spawn on obstacles. Spawn flags can also be invalid due to multiple being set on a single tile, in which case one will take precedence. For example, stair spawns trump trap spawns.
        
        No params.
    - name: ConvertSecondaryTerrainToChasms
      address:
        EU: 0x23415F0
        NA: 0x2340A0C
        JP: 0x2341DCC
      description: |-
        Converts all secondary terrain tiles (water/lava) to chasms.
        
        No params.
    - name: EnsureImpassableTilesAreWalls
      address:
        EU: 0x234165C
        NA: 0x2340A78
        JP: 0x2341E38
      description: |-
        Ensures all tiles with the impassable flag are walls.
        
        No params.
    - name: InitializeTile
      address:
        EU: 0x23416B8
        NA: 0x2340AD4
        JP: 0x2341E94
      description: |-
        Initialize a tile struct.
        
        r0: tile pointer
    - name: ResetFloor
      address:
        EU: 0x23416F0
        NA: 0x2340B0C
        JP: 0x2341ECC
      description: |-
        Resets the floor in preparation for a floor generation attempt.
        
        Resets all tiles, resets the border to be impassable, and clears entity spawns.
        
        No params.
    - name: PosIsOutOfBounds
      address:
        EU: 0x2341890
        NA: 0x2340CAC
        JP: 0x234206C
      description: |-
        Checks if a position (x, y) is out of bounds on the map: !((0 <= x <= 55) && (0 <= y <= 31)).
        
        r0: x
        r1: y
        return: bool
    - name: ShuffleSpawnPositions
      address:
        EU: 0x23418C8
        NA: 0x2340CE4
        JP: 0x23420A4
      description: |-
        Randomly shuffle an array of spawn positions.
        
        r0: spawn position array containing bytes {x1, y1, x2, y2, ...}
        r1: number of (x, y) pairs in the spawn position array
    - name: SpawnNonEnemies
      address:
        EU: 0x2341930
        NA: 0x2340D4C
        JP: 0x234210C
      description: |-
        Spawn all non-enemy entities, which includes stairs, items, traps, and the player.
        
        Most entities are spawned randomly on a subset of permissible tiles.
        
        Stairs are spawned if they don't already exist on the floor, and hidden stairs of the specified type are also spawned if configured as long as there are at least 2 floors left in the dungeon. Stairs can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an enemy spawn, isn't a hallway junction, and isn't a special tile like a Key door.
        
        Items are spawned both normally in rooms, as well as in walls and Monster Houses. Normal items can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop or Monster House, isn't a hallway junction, and isn't a special tile like a Key door. Buried items can spawn on any wall tile. Monster House items can spawn on any Monster House tile that isn't in a Kecleon shop and isn't a hallway junction.
        
        Traps are similarly spawned both normally in rooms, as well as in Monster Houses. Normal traps can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, doesn't already have an item or enemy spawn, and isn't a special tile like a Key door. Monster House traps follow the same conditions as Monster House items.
        
        The player can spawn on any tile that has open terrain, is in a room, isn't in a Kecleon shop, isn't a hallway junction, doesn't already have an item, enemy, or trap spawn, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: SpawnEnemies
      address:
        EU: 0x2342054
        NA: 0x2341470
        JP: 0x2342830
      description: |-
        Spawn all enemies, which includes normal enemies and those in Monster Houses.
        
        Normal enemies can spawn on any tile that has open terrain, isn't in a Kecleon shop, doesn't already have another entity spawn, and isn't a special tile like a Key door.
        
        Monster House enemies can spawn on any Monster House tile that isn't in a Kecleon shop, isn't where the player spawns, and isn't a special tile like a Key door.
        
        r0: floor properties
        r1: empty Monster House flag. An empty Monster House is one with no items or traps, and only a small number of enemies.
    - name: SetSecondaryTerrainOnWall
      address:
        EU: 0x2342350
        NA: 0x234176C
        JP: 0x2342B2C
      description: |-
        Set a specific tile to have secondary terrain (water/lava), but only if it's a passable wall.
        
        r0: tile pointer
    - name: GenerateSecondaryTerrainFormations
      address:
        EU: 0x2342390
        NA: 0x23417AC
        JP: 0x2342B6C
      description: |-
        Generate secondary terrain (water/lava) formations.
        
        This includes "rivers" that flow from top-to-bottom (or bottom-to-top), as well as "lakes" both standalone and after rivers. Water/lava formations will never cut through rooms, but they can pass through rooms to the opposite side.
        
        Rivers are generated by a top-down or bottom-up random walk that ends when existing secondary terrain is reached or the walk goes out of bounds. Some rivers also end prematurely in a lake. Lakes are a large collection of secondary terrain generated around a central point.
        
        r0: bit index to test in the floor properties room flag bitvector (formations are only generated if the bit is set)
        r1: floor properties
    - name: StairsAlwaysReachable
      address:
        EU: 0x2342A50
        NA: 0x2341E6C
        JP: 0x234322C
      description: |-
        Checks that the stairs are reachable from every walkable tile on the floor.
        
        This runs a graph traversal algorithm that is very similar to breadth-first search (the order in which nodes are visited is slightly different), starting from the stairs. If any tile is walkable but wasn't reached by the traversal algorithm, then the stairs must not be reachable from that tile.
        
        r0: x coordinate of the stairs
        r1: y coordinate of the stairs
        r2: flag to always return true, but set a special bit on all walkable tiles that aren't reachable from the stairs
        return: bool
    - name: ConvertWallsToChasms
      address:
        EU: 0x234312C
        NA: 0x2342548
        JP: 0x2343908
      description: |-
        Converts all wall tiles to chasms.
        
        No params.
    - name: ResetInnerBoundaryTileRows
      address:
        EU: 0x2343760
        NA: 0x2342B7C
        JP: 0x2343F3C
      description: |-
        Reset the inner boundary tile rows (y == 1 and y == 30) to their initial state of all wall tiles, with impassable walls at the edges (x == 0 and x == 55).
        
        No params.
    - name: SpawnStairs
      address:
        EU: 0x2343870
        NA: 0x2342C8C
        JP: 0x234404C
      description: |-
        Spawn stairs at the given location.
        
        If the hidden stairs type is something other than HIDDEN_STAIRS_NONE, hidden stairs of the specified type will be spawned instead of normal stairs.
        
        If spawning normal stairs and the current floor is a rescue floor, the room containing the stairs will be converted into a Monster House.
        
        If attempting to spawn hidden stairs but the spawn is blocked, the floor generation status's hidden stairs spawn position will be updated, but it won't be transferred to the dungeon generation info struct.
        
        r0: position (two-byte array for {x, y})
        r1: dungeon generation info pointer (a field on the dungeon struct)
        r2: hidden stairs type
    - name: GetHiddenStairsType
      address:
        EU: 0x2343980
        NA: 0x2342D9C
      description: |-
        Gets the hidden stairs type for a given floor.
        
        This function reads the floor properties and resolves any randomness (such as HIDDEN_STAIRS_RANDOM_SECRET_BAZAAR_OR_SECRET_ROOM and the floor_properties::hidden_stairs_spawn_chance) into a concrete hidden stairs type.
        
        r0: dungeon generation info pointer
        r1: floor properties pointer
        return: enum hidden_stairs_type
    - name: ResetHiddenStairsSpawn
      address:
        EU: 0x2343AEC
        NA: 0x2342F08
        JP: 0x23442CC
      description: |-
        Resets hidden stairs spawn information for the floor. This includes the position on the floor generation status as well as the flag indicating whether the spawn was blocked.
        
        No params.
    - name: LoadFixedRoomData
      address:
        EU: 0x2344974
        NA: 0x2343D90
        JP: 0x2345154
      description: |-
        Loads fixed room data from BALANCE/fixed.bin into the buffer pointed to by FIXED_ROOM_DATA_PTR.
        
        No params.
    - name: LoadFixedRoom
      address:
        EU: 0x2344A04
        NA: 0x2343E20
        JP: 0x23451E4
      description: "Note: unverified, ported from Irdkwia's notes"
    - name: OpenFixedBin
      address:
        EU: 0x2344C38
        NA: 0x2344054
        JP: 0x2345418
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: CloseFixedBin
      address:
        EU: 0x2344C6C
        NA: 0x2344088
        JP: 0x234544C
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        No params.
    - name: AreOrbsAllowed
      address:
        EU: 0x2344C90
        NA: 0x23440AC
        JP: 0x2345470
      description: |-
        Checks if orbs are usable in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreTileJumpsAllowed
      address:
        EU: 0x2344CC0
        NA: 0x23440DC
        JP: 0x23454A0
      description: |-
        Checks if tile jumps (warping, being blown away, and leaping) are allowed in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreTrawlOrbsAllowed
      address:
        EU: 0x2344CF0
        NA: 0x234410C
        JP: 0x23454D0
      description: |-
        Checks if Trawl Orbs work in the given fixed room.
        
        Always true if not a full-floor fixed room.
        
        r0: fixed room ID
        return: bool
    - name: AreOrbsAllowedVeneer
      address:
        EU: 0x2344D20
        NA: 0x234413C
        JP: 0x2345500
      description: |-
        Likely a linker-generated veneer for InitMemAllocTable.
        
        See https://developer.arm.com/documentation/dui0474/k/image-structure-and-generation/linker-generated-veneers/what-is-a-veneer-
        
        r0: fixed room ID
        return: bool
    - name: AreLateGameTrapsEnabled
      address:
        EU: 0x2344D2C
        NA: 0x2344148
        JP: 0x234550C
      description: |-
        Check if late-game traps (Summon, Pitfall, and Pokémon traps) work in the given fixed room.
        
        Or disabled? This function, which Irdkwia's notes label as a disable check, check the struct field labeled in End's notes as an enable flag.
        
        r0: fixed room ID
        return: bool
    - name: AreMovesEnabled
      address:
        EU: 0x2344D44
        NA: 0x2344160
        JP: 0x2345524
      description: |-
        Checks if moves (excluding the regular attack) are usable in the given fixed room.
        
        r0: fixed room ID
        return: bool
    - name: IsRoomIlluminated
      address:
        EU: 0x2344D5C
        NA: 0x2344178
        JP: 0x234553C
      description: |-
        Checks if the given fixed room is fully illuminated.
        
        r0: fixed room ID
        return: bool
    - name: GetMatchingMonsterId
      address:
        EU: 0x2344D74
        NA: 0x2344190
        JP: 0x2345554
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster ID
        r1: ?
        r2: ?
        return: monster ID
    - name: GenerateItemExplicit
      address:
        EU: 0x2344F98
        NA: 0x23443B4
        JP: 0x2345778
      description: |-
        Initializes an item struct with the given information.
        
        This calls InitStandardItem, then explicitly sets the quantity and stickiness. If quantity == 0 for Poké, GenerateCleanItem is used instead.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: quantity
        r3: sticky flag
    - name: GenerateAndSpawnItem
      address:
        EU: 0x2345014
        NA: 0x2344430
        JP: 0x23457F4
      description: |-
        A convenience function that generates an item with GenerateItemExplicit, then spawns it with SpawnItem.
        
        If the check-in-bag flag is set and the player's bag already contains an item with the given ID, a Reviver Seed will be spawned instead.
        
        It seems like this function is only ever called in one place, with an item ID of 0x49 (Reviver Seed).
        
        r0: item ID
        r1: x position
        r2: y position
        r3: quantity
        stack[0]: sticky flag
        stack[1]: check-in-bag flag
    - name: IsHiddenStairsFloor
      address:
        EU: 0x23450F0
        NA: 0x234450C
        JP: 0x23458D0
      description: |-
        Checks if the current floor is either the Secret Bazaar or a Secret Room.
        
        return: bool
    - name: GenerateStandardItem
      address:
        EU: 0x23457B4
        NA: 0x2344BD0
        JP: 0x2345F94
      description: |-
        Wrapper around GenerateItem with quantity set to 0
        
        r0: pointer to item to initialize
        r1: item ID
        r2: stickiness type
    - name: GenerateCleanItem
      address:
        EU: 0x23457C8
        NA: 0x2344BE4
        JP: 0x2345FA8
      description: |-
        Wrapper around GenerateItem with quantity set to 0 and stickiness type set to SPAWN_STICKY_NEVER.
        
        r0: pointer to item to initialize
        r1: item ID
    - name: SpawnItem
      address:
        EU: 0x2346120
        NA: 0x2345538
        JP: 0x23468FC
      description: |-
        Spawns an item on the floor. Fails if there are more than 64 items already on the floor.
        
        This calls SpawnItemEntity, fills in the item info struct, sets the entity to be visible, binds the entity to the tile it occupies, updates the n_items counter on the dungeon struct, and various other bits of bookkeeping.
        
        r0: position
        r1: item pointer
        r2: some flag?
        return: success flag
    - name: SpawnEnemyItemDropWrapper
      address:
        EU: 0x2346628
        NA: 0x2345A3C
        JP: 0x2346E00
      description: |-
        Wraps SpawnEnemyItemDrop in a more convenient interface.
        
        r0: entity
        r1: position
        r2: item
        r3: ?
    - name: SpawnEnemyItemDrop
      address:
        EU: 0x23466C4
        NA: 0x2345AD8
        JP: 0x2346E9C
      description: |-
        Appears to spawn an enemy item drop at a specified location, with a log message.
        
        r0: entity
        r1: item entity
        r2: item info
        r3: ?
        stack[0]: pointer to int16_t[2] for x/y direction (corresponding to DIRECTIONS_XY)
        stack[1]: ?
    - name: TryGenerateUnownStoneDrop
      address:
        EU: 0x2346C4C
        NA: 0x2346060
        JP: 0x2347424
      description: |-
        Determine if a defeated monster should drop a Unown Stone, and generate the item if so.
        
        Checks that the current dungeon isn't a Marowak Dojo training maze, and that the monster is an Unown. If so, there's a 21% chance that an Unown Stone will be generated.
        
        r0: [output] item
        r1: monster ID
        return: whether or not an Unown Stone was generated
    - name: HasHeldItem
      address:
        EU: 0x23473D0
        NA: 0x23467E4
        JP: 0x2347B94
      description: |-
        Checks if a monster has a certain held item.
        
        r0: entity pointer
        r1: item ID
        return: bool
    - name: GenerateMoneyQuantity
      address:
        EU: 0x2347420
        NA: 0x2346834
        JP: 0x2347BE4
      description: |-
        Set the quantity code on an item (assuming it's Poké), given some maximum acceptable money amount.
        
        r0: item pointer
        r1: max money amount (inclusive)
    - name: CheckTeamItemsFlags
      address:
        EU: 0x23477CC
        NA: 0x2346BD8
        JP: 0x2347F8C
      description: |-
        Checks whether any of the items in the bag or any of the items carried by team members has any of the specified flags set in its flags field.
        
        r0: Flag(s) to check (0 = f_exists, 1 = f_in_shop, 2 = f_unpaid, etc.)
        return: True if any of the items of the team has the specified flags set, false otherwise.
    - name: GenerateItem
      address:
        EU: 0x2347EC4
        NA: 0x23472C4
        JP: 0x2348684
      description: |-
        Initializes an item struct with the given information.
        
        This wraps InitItem, but with extra logic to resolve the item's stickiness. It also calls GenerateMoneyQuantity for Poké.
        
        r0: pointer to item to initialize
        r1: item ID
        r2: quantity
        r3: stickiness type (enum gen_item_stickiness)
    - name: CheckActiveChallengeRequest
      address:
        EU: 0x2349D4C
        NA: 0x234914C
        JP: 0x234A474
      description: |-
        Checks if there's an active challenge request on the current dungeon.
        
        return: True if there's an active challenge request on the current dungeon in the list of missions.
    - name: IsOutlawOrChallengeRequestFloor
      address:
        EU: 0x2349DC4
        NA: 0x23491C4
        JP: 0x234A4EC
      description: |-
        Checks if the current floor is an active mission destination of type MISSION_TAKE_ITEM_FROM_OUTLAW, MISSION_ARREST_OUTLAW or MISSION_CHALLENGE_REQUEST.
        
        return: bool
    - name: IsDestinationFloor
      address:
        EU: 0x2349E08
        NA: 0x2349208
        JP: 0x234A530
      description: |-
        Checks if the current floor is a mission destination floor.
        
        return: bool
    - name: IsCurrentMissionType
      address:
        EU: 0x2349E1C
        NA: 0x234921C
        JP: 0x234A544
      description: |-
        Checks if the current floor is an active mission destination of a given type (and any subtype).
        
        r0: mission type
        return: bool
    - name: IsCurrentMissionTypeExact
      address:
        EU: 0x2349E50
        NA: 0x2349250
        JP: 0x234A578
      description: |-
        Checks if the current floor is an active mission destination of a given type and subtype.
        
        r0: mission type
        r1: mission subtype
        return: bool
    - name: IsOutlawMonsterHouseFloor
      address:
        EU: 0x2349E8C
        NA: 0x234928C
        JP: 0x234A5B4
      description: |-
        Checks if the current floor is a mission destination for a Monster House outlaw mission.
        
        return: bool
    - name: IsGoldenChamber
      address:
        EU: 0x2349EB0
        NA: 0x23492B0
        JP: 0x234A5D8
      description: |-
        Checks if the current floor is a Golden Chamber floor.
        
        return: bool
    - name: IsLegendaryChallengeFloor
      address:
        EU: 0x2349ED4
        NA: 0x23492D4
        JP: 0x234A5FC
      description: |-
        Checks if the current floor is a boss floor for a Legendary Challenge Letter mission.
        
        return: bool
    - name: IsJirachiChallengeFloor
      address:
        EU: 0x2349F14
        NA: 0x2349314
        JP: 0x234A63C
      description: |-
        Checks if the current floor is the boss floor in Star Cave Pit for Jirachi's Challenge Letter mission.
        
        return: bool
    - name: IsDestinationFloorWithMonster
      address:
        EU: 0x2349F4C
        NA: 0x234934C
        JP: 0x234A674
      description: |-
        Checks if the current floor is a mission destination floor with a special monster.
        
        See FloorHasMissionMonster for details.
        
        return: bool
    - name: LoadMissionMonsterSprites
      address:
        EU: 0x2349FF8
        NA: 0x23493F8
        JP: 0x234A720
      description: |-
        Loads the sprites of monsters that appear on the current floor because of a mission, if applicable.
        
        This includes monsters to be rescued, outlaws and its minions.
        
        No params.
    - name: MissionTargetEnemyIsDefeated
      address:
        EU: 0x234A070
        NA: 0x2349470
        JP: 0x234A798
      description: |-
        Checks if the target enemy of the mission on the current floor has been defeated.
        
        return: bool
    - name: SetMissionTargetEnemyDefeated
      address:
        EU: 0x234A090
        NA: 0x2349490
        JP: 0x234A7B8
      description: |-
        Set the flag for whether or not the target enemy of the current mission has been defeated.
        
        r0: new flag value
    - name: IsDestinationFloorWithFixedRoom
      address:
        EU: 0x234A0A4
        NA: 0x23494A4
        JP: 0x234A7CC
      description: |-
        Checks if the current floor is a mission destination floor with a fixed room.
        
        The entire floor can be a fixed room layout, or it can just contain a Sealed Chamber.
        
        return: bool
    - name: GetItemToRetrieve
      address:
        EU: 0x234A0CC
        NA: 0x23494CC
        JP: 0x234A7F4
      description: |-
        Get the ID of the item that needs to be retrieve on the current floor for a mission, if one exists.
        
        return: item ID
    - name: GetItemToDeliver
      address:
        EU: 0x234A0F0
        NA: 0x23494F0
        JP: 0x234A818
      description: |-
        Get the ID of the item that needs to be delivered to a mission client on the current floor, if one exists.
        
        return: item ID
    - name: GetSpecialTargetItem
      address:
        EU: 0x234A11C
        NA: 0x234951C
        JP: 0x234A844
      description: |-
        Get the ID of the special target item for a Sealed Chamber or Treasure Memo mission on the current floor.
        
        return: item ID
    - name: IsDestinationFloorWithItem
      address:
        EU: 0x234A164
        NA: 0x2349564
        JP: 0x234A88C
      description: |-
        Checks if the current floor is a mission destination floor with a special item.
        
        This excludes missions involving taking an item from an outlaw.
        
        return: bool
    - name: IsDestinationFloorWithHiddenOutlaw
      address:
        EU: 0x234A1C4
        NA: 0x23495C4
        JP: 0x234A8EC
      description: |-
        Checks if the current floor is a mission destination floor with a "hidden outlaw" that behaves like a normal enemy.
        
        return: bool
    - name: IsDestinationFloorWithFleeingOutlaw
      address:
        EU: 0x234A1E8
        NA: 0x23495E8
        JP: 0x234A910
      description: |-
        Checks if the current floor is a mission destination floor with a "fleeing outlaw" that runs away.
        
        return: bool
    - name: GetMissionTargetEnemy
      address:
        EU: 0x234A220
        NA: 0x2349620
        JP: 0x234A948
      description: |-
        Get the monster ID of the target enemy to be defeated on the current floor for a mission, if one exists.
        
        return: monster ID
    - name: GetMissionEnemyMinionGroup
      address:
        EU: 0x234A238
        NA: 0x2349638
        JP: 0x234A960
      description: |-
        Get the monster ID of the specified minion group on the current floor for a mission, if it exists.
        
        Note that a single minion group can correspond to multiple actual minions of the same species. There can be up to 2 minion groups.
        
        r0: minion group index (0-indexed)
        return: monster ID
    - name: SetTargetMonsterNotFoundFlag
      address:
        EU: 0x234A2C4
        NA: 0x23496C4
        JP: 0x234A9EC
      description: |-
        Sets dungeon::target_monster_not_found_flag to the specified value.
        
        r0: Value to set the flag to
    - name: GetTargetMonsterNotFoundFlag
      address:
        EU: 0x234A2D8
        NA: 0x23496D8
        JP: 0x234AA00
      description: |-
        Gets the value of dungeon::target_monster_not_found_flag.
        
        return: dungeon::target_monster_not_found_flag
    - name: FloorHasMissionMonster
      address:
        EU: 0x234A348
        NA: 0x2349748
        JP: 0x234AA70
      description: |-
        Checks if a given floor is a mission destination with a special monster, either a target to rescue or an enemy to defeat.
        
        Mission types with a monster on the destination floor:
        - Rescue client
        - Rescue target
        - Escort to target
        - Deliver item
        - Search for target
        - Take item from outlaw
        - Arrest outlaw
        - Challenge Request
        
        r0: mission destination info pointer
        return: bool
    - name: GenerateMissionEggMonster
      address:
        EU: 0x234A4A0
        NA: 0x23498A0
        JP: 0x234AB90
      description: |-
        Generates the monster ID in the egg from the given mission. Uses the base form of the monster.
        
        Note: unverified, ported from Irdkwia's notes
        
        r0: mission struct
    - name: LogMessageByIdWithPopupCheckUser
      address:
        EU: 0x234BEA4
        NA: 0x234B2A4
        JP: 0x234C514
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopupCheckUser
      address:
        EU: 0x234BEE4
        NA: 0x234B2E4
        JP: 0x234C554
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdQuiet
      address:
        EU: 0x234BF1C
        NA: 0x234B31C
        JP: 0x234C58C
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageQuiet
      address:
        EU: 0x234BF40
        NA: 0x234B340
        JP: 0x234C5B0
      description: |-
        Logs a message in the message log (but without a message popup).
        
        r0: user entity pointer
        r1: message string
    - name: LogMessageByIdWithPopupCheckUserTarget
      address:
        EU: 0x234BF50
        NA: 0x234B350
        JP: 0x234C5C0
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageWithPopupCheckUserTarget
      address:
        EU: 0x234BFA4
        NA: 0x234B3A4
        JP: 0x234C614
      description: |-
        Logs a message in the message log alongside a message popup, if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message string
    - name: LogMessageByIdQuietCheckUserTarget
      address:
        EU: 0x234BFF0
        NA: 0x234B3F0
        JP: 0x234C660
      description: |-
        Logs a message in the message log (but without a message popup), if some user check passes and the target hasn't fainted.
        
        r0: user entity pointer
        r1: target entity pointer
        r2: message ID
    - name: LogMessageByIdWithPopupCheckUserUnknown
      address:
        EU: 0x234C044
        NA: 0x234B444
        JP: 0x234C6B4
      description: |-
        Logs a message in the message log alongside a message popup, if the user hasn't fainted and some other unknown check.
        
        r0: user entity pointer
        r1: ?
        r2: message ID
    - name: LogMessageByIdWithPopup
      address:
        EU: 0x234C098
        NA: 0x234B498
        JP: 0x234C708
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message ID
    - name: LogMessageWithPopup
      address:
        EU: 0x234C0BC
        NA: 0x234B4BC
        JP: 0x234C72C
      description: |-
        Logs a message in the message log alongside a message popup.
        
        r0: user entity pointer
        r1: message string
    - name: LogMessage
      address:
        EU: 0x234C108
        NA: 0x234B508
        JP: 0x234C778
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message string
        r2: bool, whether or not to present a message popup
    - name: LogMessageById
      address:
        EU: 0x234C314
        NA: 0x234B714
        JP: 0x234C984
      description: |-
        Logs a message in the message log.
        
        r0: user entity pointer
        r1: message ID
        r2: bool, whether or not to present a message popup
    - name: OpenMessageLog
      address:
        EU: 0x234C75C
        NA: 0x234BB5C
        JP: 0x234CDC0
      description: |-
        Opens the message log window.
        
        r0: ?
        r1: ?
    - name: RunDungeonMode
      address:
        EU: 0x234CB28
        NA: 0x234BF28
        JP: 0x234D18C
      description: |-
        This appears to be the top-level function for running dungeon mode.
        
        It gets called by some code in overlay 10 right after doing the dungeon fade transition, and once it exits, the dungeon results are processed.
        
        This function is presumably in charge of allocating the dungeon struct, setting it up, launching the dungeon engine, etc.
    - name: DisplayDungeonTip
      address:
        EU: 0x234DAF0
        NA: 0x234CEF0
        JP: 0x234E154
      description: |-
        Checks if a given dungeon tip should be displayed at the start of a floor and if so, displays it. Called up to 4 times at the start of each new floor, with a different r0 parameter each time.
        
        r0: Pointer to the message_tip struct of the message that should be displayed
        r1: True to log the message in the message log
    - name: SetBothScreensWindowColorToDefault
      address:
        EU: 0x234DB60
        NA: 0x234CF60
        JP: 0x234E1C4
      description: |-
        This changes the palettes of windows in both screens to an appropiate value depending on the playthrough
        If you're in a special episode, they turn green , otherwise, they turn blue or pink depending on your character's sex
        
        No params
    - name: GetPersonalityIndex
      address:
        EU: 0x234DBEC
        NA: 0x234CFEC
        JP: 0x234E250
      description: |-
        Note: unverified, ported from Irdkwia's notes
        
        r0: monster pointer
        return: ?
    - name: DisplayMessage
      address:
        EU: 0x234DE58
        NA: 0x234D258
        JP: 0x234E4E4
      description: |-
        Displays a message in a dialogue box that optionally waits for player input before closing.
        
        r0: ?
        r1: ID of the string to display
        r2: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
    - name: DisplayMessage2
      address:
        EU: 0x234DEAC
        NA: 0x234D2AC
        JP: 0x234E538
      description: Very similar to DisplayMessage
    - name: YesNoMenu
      address:
        EU: 0x234E118
        NA: 0x234D518
        JP: 0x234E7A4
      description: |-
        Opens a menu where the user can choose "Yes" or "No" and waits for input before returning.
        
        r0: ?
        r1: ID of the string to display in the textbox
        r2: Option that the cursor will be on by default. 0 for "Yes", 1 for "No"
        r3: ?
        return: True if the user chooses "Yes", false if the user chooses "No"
    - name: DisplayMessageInternal
      address:
        EU: 0x234E190
        NA: 0x234D590
        JP: 0x234E81C
      description: |-
        Called by DisplayMessage. Seems to be the function that handles the display of the dialogue box. It won't return until all the characters have been written and after the player manually closes the dialogue box (if the corresponding parameter was set).
        
        r0: ID of the string to display
        r1: True to wait for player input before closing the dialogue box, false to close it automatically once all the characters get printed.
        r2: ? (r0 in DisplayMessage)
        r3: ?
        stack[0]: ?
        stack[1]: ?
    - name: OpenMenu
      address:
        EU: 0x234E9F4
        NA: 0x234DDF4
        JP: 0x234F080
      description: "Note: unverified, ported from Irdkwia's notes"
    - name: OthersMenuLoop
      address:
        EU: 0x23503CC
        NA: 0x234F7C0
        JP: 0x2350A40
      description: |-
        Called on each frame while the in-dungeon "others" menu is open.
        
        It contains a switch to determine whether an option has been chosen or not and a second switch that determines what to do depending on which option was chosen.
        
        return: int (Actually, this is probably some sort of enum shared by all the MenuLoop functions)
    - name: OthersMenu
      address:
        EU: 0x2350630
        NA: 0x234FA24
        JP: 0x2350CA4
      description: |-
        Called when the in-dungeon "others" menu is open. Does not return until the menu is closed.
        
        return: Always 0
  data:
    - name: DUNGEON_STRUCT_SIZE
      address:
        EU:
          - 0x22DF3B8
          - 0x22DF3EC
        NA:
          - 0x22DEA78
          - 0x22DEAAC
      length:
        EU: 0x4
        NA: 0x4
      description: Size of the dungeon struct (0x2CB14)
    - name: MAX_HP_CAP
      address:
        EU:
          - 0x22E4780
          - 0x2312274
          - 0x2318EB4
        NA:
          - 0x22E3DD0
          - 0x2311814
          - 0x2318454
      length:
        EU: 0x4
        NA: 0x4
      description: The maximum amount of HP a monster can have (999).
    - name: OFFSET_OF_DUNGEON_FLOOR_PROPERTIES
      address:
        EU:
          - 0x22E83A8
          - 0x233BA4C
        NA:
          - 0x22E79F8
          - 0x233AE68
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the floor properties field in the dungeon struct (0x286B2)
    - name: SPAWN_RAND_MAX
      address:
        EU: 0x22E8800
        NA: 0x22E7E50
      length:
        EU: 0x4
        NA: 0x4
      description: "Equal to 10,000 (0x2710). Used as parameter for DungeonRandInt to generate the random number which determines the entity to spawn."
    - name: DUNGEON_PRNG_LCG_MULTIPLIER
      address:
        EU:
          - 0x22EB378
          - 0x22EB43C
        NA:
          - 0x22EA9C8
          - 0x22EAA8C
      length:
        EU: 0x4
        NA: 0x4
      description: "The multiplier shared by all of the dungeon PRNG's LCGs, 1566083941 (0x5D588B65)."
    - name: DUNGEON_PRNG_LCG_INCREMENT_SECONDARY
      address:
        EU: 0x22EB444
        NA: 0x22EAA94
      length:
        EU: 0x4
        NA: 0x4
      description: "The increment for the dungeon PRNG's secondary LCGs, 2531011 (0x269EC3). This happens to be the same increment that the Microsoft Visual C++ runtime library uses in its implementation of the rand() function."
    - name: KECLEON_FEMALE_ID
      address:
        EU: 0x22F7DBC
        NA: 0x22F7404
      length:
        EU: 0x4
        NA: 0x4
      description: "0x3D7 (983). Used when spawning Kecleon on an even numbered floor."
    - name: KECLEON_MALE_ID
      address:
        EU: 0x22F7DC0
        NA: 0x22F7408
      length:
        EU: 0x4
        NA: 0x4
      description: "0x17F (383). Used when spawning Kecleon on an odd numbered floor."
    - name: MSG_ID_SLOW_START
      address:
        EU: 0x22F9CDC
        NA: 0x22F92D0
      length:
        EU: 0x4
        NA: 0x4
      description: ID of the message printed when a monster has the ability Slow Start at the beginning of the floor.
    - name: EXPERIENCE_POINT_GAIN_CAP
      address:
        EU: 0x23030F4
        NA: 0x23026C8
      length:
        EU: 0x4
        NA: 0x4
      description: A cap on the experience that can be given to a monster in one call to AddExpSpecial
    - name: JUDGMENT_MOVE_ID
      address:
        EU: 0x230CECC
        NA: 0x230C458
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Move ID for Judgment (0x1D3)
        
        type: enum move_id
    - name: REGULAR_ATTACK_MOVE_ID
      address:
        EU: 0x230CED0
        NA: 0x230C45C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Move ID for the regular attack (0x163)
        
        type: enum move_id
    - name: DEOXYS_ATTACK_ID
      address:
        EU: 0x230CED4
        NA: 0x230C460
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Monster ID for Deoxys in Attack Forme (0x1A3)
        
        type: enum monster_id
    - name: DEOXYS_SPEED_ID
      address:
        EU: 0x230CED8
        NA: 0x230C464
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Monster ID for Deoxys in Speed Forme (0x1A5)
        
        type: enum monster_id
    - name: GIRATINA_ALTERED_ID
      address:
        EU: 0x230CEDC
        NA: 0x230C468
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Monster ID for Giratina in Altered Forme (0x211)
        
        type: enum monster_id
    - name: PUNISHMENT_MOVE_ID
      address:
        EU: 0x230CEE0
        NA: 0x230C46C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Move ID for Punishment (0x1BD)
        
        type: enum move_id
    - name: OFFENSE_STAT_MAX
      address:
        EU: 0x230CF10
        NA: 0x230C49C
      length:
        EU: 0x4
        NA: 0x4
      description: "Cap on an attacker's modified offense (attack or special attack) stat after boosts. Used during damage calculation."
    - name: PROJECTILE_MOVE_ID
      address:
        EU:
          - 0x230DAF0
          - 0x231D160
        NA:
          - 0x230D07C
          - 0x231C700
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        The move ID of the special "projectile" move (0x195)
        
        type: enum move_id
    - name: BELLY_LOST_PER_TURN
      address:
        EU: 0x23114D0
        NA: 0x2310A70
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        The base value by which belly is decreased every turn.
        
        Its raw value is 0x199A, which encodes a binary fixed-point number (16 fraction bits) with value (0x199A * 2^-16), and is the closest approximation to 0.1 representable in this number format.
    - name: MONSTER_HEAL_HP_MAX
      address:
        NA: 0x23152E0
      length:
        NA: 0x4
      description: The maximum amount of HP a monster can have (999).
    - name: MOVE_TARGET_AND_RANGE_SPECIAL_USER_HEALING
      address:
        EU: 0x231B794
        NA: 0x231AD34
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        The move target and range code for special healing moves that target just the user (0x273).
        
        type: struct move_target_and_range (+ padding)
    - name: PLAIN_SEED_VALUE
      address:
        EU: 0x231D1A8
        NA: 0x231C748
      length:
        EU: 0x4
        NA: 0x4
      description: Some value related to the Plain Seed (0xBE9).
    - name: MAX_ELIXIR_PP_RESTORATION
      address:
        EU: 0x231D1AC
        NA: 0x231C74C
      length:
        EU: 0x4
        NA: 0x4
      description: The amount of PP restored per move by ingesting a Max Elixir (0x3E7).
    - name: SLIP_SEED_VALUE
      address:
        EU: 0x231D614
        NA: 0x231CBAC
      length:
        EU: 0x4
        NA: 0x4
      description: Some value related to the Slip Seed (0xC75).
    - name: ROCK_WRECKER_MOVE_ID
      address:
        NA: 0x23245A0
      length:
        NA: 0x4
      description: The move ID for Rock Wrecker (453).
    - name: LUNAR_DANCE_PP_RESTORATION
      address:
        NA: 0x232E3CC
      length:
        NA: 0x4
      description: The amount of PP restored by Lunar Dance (999).
    - name: CASTFORM_NORMAL_FORM_MALE_ID
      address:
        EU: 0x2335E78
        NA: 0x2335438
      length:
        EU: 0x4
        NA: 0x4
      description: "Castform's male normal form ID (0x17B)"
    - name: CASTFORM_NORMAL_FORM_FEMALE_ID
      address:
        EU: 0x2335E7C
        NA: 0x233543C
      length:
        EU: 0x4
        NA: 0x4
      description: "Castform's female normal form ID (0x3D3)"
    - name: CHERRIM_SUNSHINE_FORM_MALE_ID
      address:
        EU: 0x2335E80
        NA: 0x2335440
      length:
        EU: 0x4
        NA: 0x4
      description: "Cherrim's male sunshine form ID (0x1CD)"
    - name: CHERRIM_OVERCAST_FORM_FEMALE_ID
      address:
        EU: 0x2335E84
        NA: 0x2335444
      length:
        EU: 0x4
        NA: 0x4
      description: "Cherrim's female overcast form ID (0x424)"
    - name: CHERRIM_SUNSHINE_FORM_FEMALE_ID
      address:
        EU: 0x2335E88
        NA: 0x2335448
      length:
        EU: 0x4
        NA: 0x4
      description: "Cherrim's female sunshine form ID (0x425)"
    - name: FLOOR_GENERATION_STATUS_PTR
      address:
        EU:
          - 0x233BA50
          - 0x233BAEC
          - 0x233BD70
          - 0x233C1FC
          - 0x233C65C
          - 0x233C7BC
          - 0x233C954
          - 0x233CB10
          - 0x233CEF0
          - 0x233D350
          - 0x233DB64
          - 0x233DCE4
          - 0x233DEF4
          - 0x233E254
          - 0x233EC3C
          - 0x2340B74
          - 0x2340E00
          - 0x23412B4
          - 0x2342040
          - 0x2342348
          - 0x2342D5C
          - 0x23430F4
          - 0x23433C4
          - 0x2343758
          - 0x2343848
          - 0x234397C
          - 0x2343B0C
        NA:
          - 0x233AE6C
          - 0x233AF08
          - 0x233B18C
          - 0x233B618
          - 0x233BA78
          - 0x233BBD8
          - 0x233BD70
          - 0x233BF2C
          - 0x233C30C
          - 0x233C76C
          - 0x233CF80
          - 0x233D100
          - 0x233D310
          - 0x233D670
          - 0x233E058
          - 0x233FF90
          - 0x234021C
          - 0x23406D0
          - 0x234145C
          - 0x2341764
          - 0x2342178
          - 0x2342510
          - 0x23427E0
          - 0x2342B74
          - 0x2342C64
          - 0x2342D98
          - 0x2342F28
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        Pointer to the global FLOOR_GENERATION_STATUS
        
        type: struct floor_generation_status*
    - name: OFFSET_OF_DUNGEON_N_NORMAL_ITEM_SPAWNS
      address:
        EU:
          - 0x233BA58
          - 0x2342048
        NA:
          - 0x233AE74
          - 0x2341464
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the (number of base items + 1) field on the dungeon struct (0x12AFA)
    - name: DUNGEON_GRID_COLUMN_BYTES
      address:
        EU:
          - 0x233C1F8
          - 0x233C658
          - 0x233C950
          - 0x233CB0C
          - 0x233CEEC
          - 0x233D354
          - 0x233D5C8
          - 0x233DB5C
          - 0x233DCE0
          - 0x233DEF8
          - 0x233E250
          - 0x233EC38
          - 0x233F01C
          - 0x233F914
          - 0x233FCF8
          - 0x23404E0
          - 0x2340B78
          - 0x2340E04
          - 0x2341038
          - 0x23430B0
        NA:
          - 0x233B614
          - 0x233BA74
          - 0x233BD6C
          - 0x233BF28
          - 0x233C308
          - 0x233C770
          - 0x233C9E4
          - 0x233CF78
          - 0x233D0FC
          - 0x233D314
          - 0x233D66C
          - 0x233E054
          - 0x233E438
          - 0x233ED30
          - 0x233F114
          - 0x233F8FC
          - 0x233FF94
          - 0x2340220
          - 0x2340454
          - 0x23424CC
      length:
        EU: 0x4
        NA: 0x4
      description: "The number of bytes in one column of the dungeon grid cell array, 450, which corresponds to a column of 15 grid cells."
    - name: DEFAULT_MAX_POSITION
      address:
        EU: 0x2340B7C
        NA: 0x233FF98
      length:
        EU: 0x4
        NA: 0x4
      description: A large number (9999) to use as a default position for keeping track of min/max position values
    - name: OFFSET_OF_DUNGEON_GUARANTEED_ITEM_ID
      address:
        EU:
          - 0x2342044
          - 0x2345A64
        NA:
          - 0x2341460
          - 0x2344E80
      length:
        EU: 0x4
        NA: 0x4
      description: Offset of the guaranteed item ID field in the dungeon struct (0x2C9E8)
    - name: FIXED_ROOM_TILE_SPAWN_TABLE
      address:
        EU: 0x23509DC
        NA: 0x234FDD0
        JP: 0x2351050
      length:
        EU: 0x2C
        NA: 0x2C
        JP: 0x2C
      description: |-
        Table of tiles that can spawn in fixed rooms, pointed into by the FIXED_ROOM_TILE_SPAWN_TABLE.
        
        This is an array of 11 4-byte entries containing info about one tile each. Info includes the trap ID if a trap, room ID, and flags.
        
        type: struct fixed_room_tile_spawn_entry[11]
    - name: TREASURE_BOX_1_ITEM_IDS
      address:
        EU: 0x2350A08
        NA: 0x234FDFC
        JP: 0x235107C
      length:
        EU: 0x18
        NA: 0x18
        JP: 0x18
      description: |-
        Item IDs for variant 1 of each of the treasure box items (ITEM_*_BOX_1).
        
        type: struct item_id_16[12]
    - name: FIXED_ROOM_REVISIT_OVERRIDES
      address:
        EU: 0x2350A20
        NA: 0x234FE14
        JP: 0x2351094
      length:
        EU: 0x100
        NA: 0x100
        JP: 0x100
      description: |-
        Table of fixed room IDs, which if nonzero, overrides the normal fixed room ID for a floor (which is used to index the table) if the dungeon has already been cleared previously.
        
        Overrides are used to substitute different fixed room data for things like revisits to story dungeons.
        
        type: struct fixed_room_id_8[256]
    - name: FIXED_ROOM_MONSTER_SPAWN_TABLE
      address:
        EU: 0x2350B20
        NA: 0x234FF14
        JP: 0x2351194
      length:
        EU: 0x1E0
        NA: 0x1E0
        JP: 0x1E0
      description: |-
        Table of monsters that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 120 4-byte entries containing info about one monster each. Info includes the monster ID, stats, and behavior type.
        
        type: struct fixed_room_monster_spawn_entry[120]
    - name: FIXED_ROOM_ITEM_SPAWN_TABLE
      address:
        EU: 0x2350D00
        NA: 0x23500F4
        JP: 0x2351374
      length:
        EU: 0x1F8
        NA: 0x1F8
        JP: 0x1F8
      description: |-
        Table of items that can spawn in fixed rooms, pointed into by the FIXED_ROOM_ENTITY_SPAWN_TABLE.
        
        This is an array of 63 8-byte entries containing one item ID each.
        
        type: struct fixed_room_item_spawn_entry[63]
    - name: FIXED_ROOM_ENTITY_SPAWN_TABLE
      address:
        EU: 0x2350EF8
        NA: 0x23502EC
        JP: 0x2351374
      length:
        EU: 0xC9C
        NA: 0xC9C
        JP: 0xC9C
      description: |-
        Table of entities (items, monsters, tiles) that can spawn in fixed rooms, which is indexed into by the main data structure for each fixed room.
        
        This is an array of 269 entries. Each entry contains 3 pointers (one into FIXED_ROOM_ITEM_SPAWN_TABLE, one into FIXED_ROOM_MONSTER_SPAWN_TABLE, and one into FIXED_ROOM_TILE_SPAWN_TABLE), and represents the entities that can spawn on one specific tile in a fixed room.
        
        type: struct fixed_room_entity_spawn_entry[269]
    - name: STATUS_ICON_ARRAY_MUZZLED
      address:
        EU: 0x2351DC8
        NA: 0x23511BC
      length:
        EU: 0x10
        NA: 0x10
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::muzzled * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_MAGNET_RISE
      address:
        EU: 0x2351DD8
        NA: 0x23511CC
      length:
        EU: 0x10
        NA: 0x10
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::magnet_rise * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_MIRACLE_EYE
      address:
        EU: 0x2351DF8
        NA: 0x23511EC
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::miracle_eye * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_LEECH_SEED
      address:
        EU: 0x2351E08
        NA: 0x23511FC
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::leech_seed * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_LONG_TOSS
      address:
        EU: 0x2351E20
        NA: 0x2351214
      length:
        EU: 0x18
        NA: 0x18
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::long_toss * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BLINDED
      address:
        EU: 0x2351E78
        NA: 0x235126C
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::blinded * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BURN
      address:
        EU: 0x2351EA0
        NA: 0x2351294
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::burn * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_SURE_SHOT
      address:
        EU: 0x2351EC8
        NA: 0x23512BC
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::sure_shot * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_INVISIBLE
      address:
        EU: 0x2351EF0
        NA: 0x23512E4
      length:
        EU: 0x28
        NA: 0x28
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::invisible * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_SLEEP
      address:
        EU: 0x2351F18
        NA: 0x235130C
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::sleep * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_CURSE
      address:
        EU: 0x2351F48
        NA: 0x235133C
      length:
        EU: 0x38
        NA: 0x38
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::curse * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_FREEZE
      address:
        EU: 0x2351F80
        NA: 0x2351274
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::freeze * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_CRINGE
      address:
        EU: 0x2351FC0
        NA: 0x23513B4
      length:
        EU: 0x40
        NA: 0x40
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::cringe * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_BIDE
      address:
        EU: 0x2352000
        NA: 0x23513F4
      length:
        EU: 0x70
        NA: 0x70
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::bide * 8. See UpdateStatusIconFlags for details."
    - name: STATUS_ICON_ARRAY_REFLECT
      address:
        EU: 0x2352100
        NA: 0x23514F4
      length:
        EU: 0x90
        NA: 0x90
      description: "Array of bit masks used to set monster::status_icon. Indexed by monster::statuses::reflect * 8. See UpdateStatusIconFlags for details."
    - name: DIRECTIONS_XY
      address:
        EU: 0x2352328
        NA: 0x235171C
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        An array mapping each direction index to its x and y displacements.
        
        Directions start with 0=down and proceed counterclockwise (see enum direction_id). Displacements for x and y are interleaved and encoded as 2-byte signed integers. For example, the first two integers are [0, 1], which correspond to the x and y displacements for the "down" direction (positive y means down).
    - name: ITEM_CATEGORY_ACTIONS
      address:
        EU: 0x2352C1C
        NA: 0x2352010
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        Action ID associated with each item category. Used by GetItemAction.
        
        Each entry is 2 bytes long.
    - name: FRACTIONAL_TURN_SEQUENCE
      address:
        EU: 0x2352EC2
        NA: 0x2352284
      length:
        EU: 0xFA
        NA: 0xFA
      description: |-
        Read by certain functions that are called by RunFractionalTurn to see if they should be executed.
        
        Array is accessed via a pointer added to some multiple of fractional_turn, so that if the resulting memory location is zero, the function returns.
    - name: BELLY_DRAIN_IN_WALLS_INT
      address:
        EU: 0x2353374
        NA: 0x2352768
      length:
        EU: 0x2
        NA: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (integer part)
    - name: BELLY_DRAIN_IN_WALLS_THOUSANDTHS
      address:
        EU: 0x2353376
        NA: 0x235276A
      length:
        EU: 0x2
        NA: 0x2
      description: The additional amount by which belly is decreased every turn when inside walls (fractional thousandths)
    - name: SPATK_STAT_IDX
      address:
        EU: 0x23536F4
        NA: 0x2352AE8
      length:
        EU: 0x4
        NA: 0x4
      description: "The index (1) of the special attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: ATK_STAT_IDX
      address:
        EU: 0x23536F8
        NA: 0x2352AEC
      length:
        EU: 0x4
        NA: 0x4
      description: "The index (0) of the attack entry in internal stat structs, such as the stat modifier array for a monster."
    - name: MAP_COLOR_TABLE
      address:
        NA: 0x2352FD0
      length:
        NA: 0x24
      description: |-
        In order: white, black, red, green, blue, magenta, dark pink, chartreuse, light orange
        
        Note: unverified, ported from Irdkwia's notes
        
        type: struct rgb[9]
    - name: CORNER_CARDINAL_NEIGHBOR_IS_OPEN
      address:
        EU: 0x2353C24
        NA: 0x2353010
      length:
        EU: 0x20
        NA: 0x20
      description: |-
        An array mapping each (corner index, neighbor direction index) to whether or not that neighbor is expected to be open floor.
        
        Corners start with 0=top-left and proceed clockwise. Directions are enumerated as with DIRECTIONS_XY. The array is indexed by i=(corner_index * N_DIRECTIONS + direction). An element of 1 (0) means that starting from the specified corner of a room, moving in the specified direction should lead to an open floor tile (non-open terrain like a wall).
        
        Note that this array is only used for the cardinal directions. The elements at odd indexes are unused and unconditionally set to 0.
        
        This array is used by the dungeon generation algorithm when generating room imperfections. See GenerateRoomImperfections.
    - name: DUNGEON_PTR
      address:
        EU: 0x2354138
        NA: 0x2353538
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "working copy" of DUNGEON_PTR_MASTER. The main dungeon engine uses this pointer (or rather pointers to this pointer) when actually running dungeon mode.
        
        type: struct dungeon*
    - name: DUNGEON_PTR_MASTER
      address:
        EU: 0x235413C
        NA: 0x235353C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Pointer to the dungeon struct in dungeon mode.
        
        This is a "master copy" of the dungeon pointer. The game uses this pointer when doing low-level memory work (allocation, freeing, zeroing). The normal DUNGEON_PTR is used for most other dungeon mode work.
        
        type: struct dungeon*
    - name: LEADER_PTR
      address:
        EU: 0x235415C
        NA: 0x235355C
      length:
        EU: 0x4
        NA: 0x4
      description: |-
        [Runtime] Pointer to the current leader of the team.
        
        type: struct entity*
    - name: DUNGEON_PRNG_STATE
      address:
        EU: 0x2354170
        NA: 0x2353570
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        [Runtime] The global PRNG state for dungeon mode, not including the current values in the secondary sequences.
        
        This struct holds state for the primary LCG, as well as the current configuration controlling which LCG to use when generating random numbers. See DungeonRand16Bit for more information on how the dungeon PRNG works.
        
        type: struct prng_state
    - name: DUNGEON_PRNG_STATE_SECONDARY_VALUES
      address:
        EU: 0x2354184
        NA: 0x2353584
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        [Runtime] An array of 5 integers corresponding to the last value generated for each secondary LCG sequence.
        
        Based on the assembly, this appears to be its own global array, separate from DUNGEON_PRNG_STATE.
    - name: EXCL_ITEM_EFFECTS_WEATHER_ATK_SPEED_BOOST
      address:
        EU: 0x23541B0
        NA: 0x23535B0
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that increase attack speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_MOVE_SPEED_BOOST
      address:
        EU: 0x23541B8
        NA: 0x23535B8
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that increase movement speed with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_WEATHER_NO_STATUS
      address:
        EU: 0x23541C0
        NA: 0x23535C0
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that grant status immunity with certain weather conditions.
    - name: EXCL_ITEM_EFFECTS_EVASION_BOOST
      address:
        EU: 0x2354310
        NA: 0x2353710
      length:
        EU: 0x8
        NA: 0x8
      description: Array of IDs for exclusive item effects that grant an evasion boost with certain weather conditions.
    - name: DEFAULT_TILE
      address:
        EU: 0x235433C
        NA: 0x2353724
      length:
        EU: 0x14
        NA: 0x14
      description: |-
        The default tile struct.
        
        This is just a struct full of zeroes, but is used as a fallback in various places where a "default" tile is needed, such as when a grid index is out of range.
        
        type: struct tile
    - name: HIDDEN_STAIRS_SPAWN_BLOCKED
      address:
        EU: 0x23543A4
        NA: 0x235378C
      length:
        EU: 0x1
        NA: 0x1
      description: |-
        [Runtime] A flag for when Hidden Stairs could normally have spawned on the floor but didn't.
        
        This is set either when the Hidden Stairs just happen not to spawn by chance, or when the current floor is a rescue or mission destination floor.
        
        This appears to be part of a larger (8-byte?) struct. It seems like this value is at least followed by 3 bytes of padding and a 4-byte integer field.
    - name: FIXED_ROOM_DATA_PTR
      address:
        EU: 0x23543AC
        NA: 0x2353794
      length:
        EU: 0x4
        NA: 0x4
      description: "[Runtime] Pointer to decoded fixed room data loaded from the BALANCE/fixed.bin file."
