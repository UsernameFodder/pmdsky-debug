name: Create Release Package

on:
  push:
    paths:
      - 'src/**.rs'
      - 'symbols/**.yml'
      - 'headers/**'
      - 'Cargo.toml'
      - '.github/workflows/release.yml'
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  check-resymgen:
    uses: UsernameFodder/pmdsky-debug/.github/workflows/check-resymgen.yml@master
  check-symbols:
    uses: UsernameFodder/pmdsky-debug/.github/workflows/check-symbols.yml@master
    with:
      no-format-on-check-fail: true
  check-headers:
    uses: UsernameFodder/pmdsky-debug/.github/workflows/check-headers.yml@master
    with:
      no-format-on-check-fail: true
  deploy:
    runs-on: ubuntu-latest
    needs:
      - check-resymgen
      - check-symbols
      - check-headers
    env:
      RELEASE_VERSION: '0.1.0'
      OUTPUT_DIR: out
      RELEASE_PACKAGE_DIR: release-packages
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build resymgen
        uses: ./.github/actions/build-resymgen
      - name: Generate symbols
        run: cargo run --release -- gen --output-dir ${{ env.OUTPUT_DIR }} symbols/*.yml
      - name: Create package directory
        run: mkdir -p release-packages
      - name: Package symbols
        shell: bash
        env:
          OUT_PACKAGE: ${{ env.OUTPUT_DIR }}/packages
        run: |
          # Organize the symbol packages
          for f in $(ls ${{ env.OUTPUT_DIR }}/*); do
            version_and_format="${f##*_}"
            version="${version_and_format%.*}"
            format="${version_and_format##*.}"
            dir="${OUT_PACKAGE}/symbols-${format}/${version}"
            mkdir -p "${dir}"
            cp "${f}" "${dir}"
          done

          # Archive the completed packages
          pushd "${OUT_PACKAGE}"
          cd "${OUT_PACKAGE}"
          for pkg in $(ls); do
            zip -r "${pkg}.zip" "${pkg}"
          done
          popd

          # Install the packages
          mv "${OUT_PACKAGE}"/*.zip ${{ env.RELEASE_PACKAGE_DIR }}
      - name: Package headers
        run: zip "${{ env.RELEASE_PACKAGE_DIR }}/headers.zip" $(find headers -iname '*.h')
      - name: Compute SHA-256 hash for the release package
        env:
          HASH_FILE: ${{ env.RELEASE_PACKAGE_DIR }}/release-assets.sha256
        id: new_hash
        run: |
          echo ${{ hashFiles(format('{0}/*.zip', env.RELEASE_PACKAGE_DIR)) }} > ${HASH_FILE}
          echo "::set-output name=sha256::$(cat ${HASH_FILE})"
          cat ${HASH_FILE}
      - name: Retrieve SHA-256 hash of the previous release package
        env:
          HASH_FILE: release-assets.sha256.old
        id: old_hash
        run: |
          curl --fail "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/latest/download/release-assets.sha256" > ${HASH_FILE} || echo "Could not locate previous release package"
          echo "::set-output name=sha256::$(cat ${HASH_FILE})"
          cat ${HASH_FILE}
      - name: Create release
        run: |
          echo "Dry-run"
          echo "name: ${{ env.RELEASE_VERSION}}-${{ github.sha }}"
          echo "files: ${{ env.RELEASE_PACKAGE_DIR }}/*"
        # uses: softprops/action-gh-release@v1
        # with:
        #   name: ${{ env.RELEASE_VERSION}}-${{ github.sha }}
        #   files: '${{ env.RELEASE_PACKAGE_DIR }}/*'
        #   fail_on_unmatched_files: true
        if: ${{ steps.new_hash.outputs.sha256 }} != ${{ steps.old_hash.outputs.sha256 }}
